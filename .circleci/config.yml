#
# CircleCI configuration for salesforcedx-vscode
#
# The following environment variables are required in the 'vscode-test' context
# when running tests for Windows:
#     SFDX_CI_DEVHUB_CLIENTID  -- connected app client ID for the dev hub
#     SFDX_CI_DEVHUB_JWT_KEY   -- private key for the connected app (base64 encoded)
#     SFDX_CI_DEVHUB_USERNAME  -- username of an authorized user of the dev hub
#
version: 2.1

orbs:
  win: circleci/windows@2.2.0
  sfchangecase: salesforce/change-case-management@3

_refs:
  defaults: &defaults
    working_directory: ~/cli
    docker:
      - image: circleci/node:12.4.0
  ssh-config: &ssh-config
    fingerprints:
      - '3b:68:69:7d:19:a4:50:69:ad:b8:db:57:f9:9c:f0:3f'
  restore_cache: &restore_cache
    keys:
      - dependency-cache-v2-{{ checksum "package.json" }}
      # if cache for exact version of 'package.json' is not present, then load the most recent cache
      - dependency-cache-v2-
  install: &install
    name: Install dependencies
    command: |
      npm --version
      node --version
      npm install
  gh-config: &gh-config
    name: Configuring GitHub
    command: |
      git config credential.helper 'cache --timeout=120'
      git config user.email "$GH_EMAIL"
      git config user.name "Release Bot"
  gus-prepare-environment-variables: &gus-prepare-environment-variables
    name: 'Prepare environment variables for GUS Change Case Management'
    command: |
      export GUS_BUILD="$(node -pe "require('./packages/salesforcedx-vscode/package.json').version")"
      echo "export GUS_RELEASE=offcore.tooling.$GUS_BUILD" >> $BASH_ENV

commands:
  build-artifacts:
    description: 'Building and archiving extension artifacts.'
    steps:
      - checkout
      - restore_cache: *restore_cache
      - run: npm install
      - run:
          name: 'Compile in production mode'
          environment:
            - NODE_ENV: production
          command: |
            npm run compile
      - run:
          name: 'Packaging extensions'
          command: npm run vscode:package
      - run:
          name: 'Staging artifacts'
          command: |
            mkdir extensions
            find packages -name "*.vsix" -type f -exec cp {} ./extensions \;
      - store_artifacts:
          path: ./extensions
      - save_cache:
          key: dependency-cache-v2-{{ checksum "package.json" }}
          paths:
            - node_modules

  build-win:
    description: 'Build for Windows.'
    steps:
      - run: git config --global core.autocrlf false
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-win3-{{ checksum "package.json" }}
            # if cache for exact version of 'package.json' is not present, then load the most recent cache
            - dependency-cache-win3-
      - run:
          name: 'Install node'
          shell: bash.exe
          command: |
            nvm install $NODE_VERSION
            nvm use $NODE_VERSION
            nvm install-latest-npm
      - run:
          name: 'Install dependent modules'
          shell: bash.exe
          command: |
            npm config set scripts-prepend-node-path true
            npm install
            npm install -g sfdx-cli@7.45.1
            npm install -g codecov
            npm install -g junit-merge
      - run:
          name: 'Compile'
          shell: bash.exe
          command: npm run compile
      - save_cache:
          key: dependency-cache-win3-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: 'Run lint'
          shell: bash.exe
          command: |
            npm run lint

jobs:
  build-all:
    description: 'Build artifacts in a non-Windows environment'
    docker:
      - image: circleci/node:12.4.0
    environment:
      - SFDX_URL_LINUX: https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
      - SFDX_AUTOUPDATE_DISABLE: true
      - SFDX_USE_GENERIC_UNIX_KEYCHAIN: true
      - SFDX_DOMAIN_RETRY: 300
    steps:
      - build-artifacts

  unit-tests:
    description: 'Run tests on Windows'
    executor: win/default
    environment:
      - SFDX_AUTOUPDATE_DISABLE: true
      - SFDX_DOMAIN_RETRY: 300
      - NODE_VERSION: '12.4.0'
    steps:
      - build-win
      - run:
          name: 'Running unit tests'
          shell: cmd.exe
          command: npm run test:unit
      - run:
          name: 'Aggregate test results'
          shell: bash.exe
          command: |
            npm run aggregateJUnit
            junit-merge -d junit-aggregate -o junit-aggregate.xml
      - store_test_results:
          path: ./junit-aggregate/
      - run:
          name: 'Generate code coverage'
          shell: bash.exe
          command: |
            codecov --disable=gcov
      - run:
          name: 'Fail build for test failures'
          shell: powershell.exe
          command: |
            [xml]$results = Get-Content junit-aggregate.xml
            $failure = $results.SelectSingleNode("//failure")
            if ($failure -ne $null) { 
              Write-Host "Forcing build failure due to test failure(s) :'("
              $host.SetShouldExit(1)
            }

  integration-tests:
    description: 'Run tests on Windows'
    executor: win/default
    environment:
      - SFDX_AUTOUPDATE_DISABLE: true
      - SFDX_DOMAIN_RETRY: 300
      - NODE_VERSION: '12.4.0'
    parameters:
      run-unit-tests:
        type: boolean
        default: true
    steps:
      - build-win
      - run:
          name: 'Authenticate to the default DevHub'
          shell: bash.exe
          command: |
            echo $SFDX_CI_DEVHUB_JWTKEY | base64 --decode > devhub.key
            sfdx force:auth:jwt:grant --clientid ${SFDX_CI_DEVHUB_CLIENTID} --username ${SFDX_CI_DEVHUB_USERNAME} --jwtkeyfile devhub.key --setdefaultdevhubusername --setalias devhub
            rm devhub.key
      - run:
          name: 'Running integration tests'
          shell: cmd.exe
          command: npm run test:integration-tests-without-system-tests
      - run:
          name: 'Aggregate test results'
          shell: bash.exe
          command: |
            npm run aggregateJUnit
            junit-merge -d junit-aggregate -o junit-aggregate.xml
      - store_test_results:
          path: ./junit-aggregate/
      - run:
          name: 'Generate code coverage'
          shell: bash.exe
          command: |
            codecov --disable=gcov
      - run:
          name: 'Fail build for test failures'
          shell: powershell.exe
          command: |
            [xml]$results = Get-Content junit-aggregate.xml
            $failure = $results.SelectSingleNode("//failure")
            if ($failure -ne $null) { 
              Write-Host "Forcing build failure due to test failure(s) :'("
              $host.SetShouldExit(1)
            }
  publish:
    <<: *defaults
    steps:
      - add_ssh_keys: *ssh-config
      - checkout
      - restore_cache: *restore_cache
      - sfchangecase/install
      - run: *gus-prepare-environment-variables
      - sfchangecase/create:
          location: REPO_LOCATION
          release: GUS_RELEASE
      - sfchangecase/check:
          location: REPO_LOCATION
          release: GUS_RELEASE
      - run: *gh-config
      - run: *install
      - run:
          name: 'Compile in production mode'
          environment:
            - NODE_ENV: production
          command: |
            npm run compile
      - run:
          name: 'Packaging extensions'
          command: npm run vscode:package
      - run:
          name: 'Generating the SHA256 and appending to the file.'
          command: npm run vscode:sha256
      - run:
          name: 'Concatenating the contents to the proper SHA256.md'
          command: scripts/concatenate-sha256.js
      - run:
          name: 'Removing the temp SHA256 file.'
          command: rm ./SHA256
      - run:
          name: 'Adding the SHA256 to git.'
          command: |
            git add SHA256.md
            git commit -m "[skip ci] Updated SHA256"
      - run:
          name: 'Publishing to the VS Code Marketplace.'
          command: npm run vscode:publish
      - run:
          name: 'Store artifacts that were published'
          command: |
            mkdir extensions
            find packages -name "*.vsix" -type f -exec cp {} ./extensions \;
      - store_artifacts:
          path: ./extensions
      - run:
          name: 'Create git tag (e.g. v48.1.0) & push changes back to master branch'
          command: |
            export GUS_BUILD="$(node -pe "require('./packages/salesforcedx-vscode/package.json').version")"
            git tag v${GUS_BUILD}
            git push origin v${GUS_BUILD}
            git push origin master
      - sfchangecase/update:
          location: REPO_LOCATION
          release: GUS_RELEASE

  create-release-branch:
    <<: *defaults
    steps:
      - add_ssh_keys: *ssh-config
      - checkout
      - restore_cache: *restore_cache
      - run: *gh-config
      - run: *install
      - run:
          name: Install Lerna
          command: sudo npm install -g lerna@3.13.1
      - run:
          name: Create release branch
          command: |
            git branch
            scripts/create-release-branch.js

workflows:
  version: 2.1

  # run a build and a windows test on every commit
  commit-workflow:
    jobs:
      - build-all
      - unit-tests
      - integration-tests
      - publish:
          filters:
            branches:
              only:
                - master
          requires:
            - build-all
            - unit-tests
            - integration-tests

  # run a build/test every mid-night
  scheduled-workflow:
    triggers:
      - schedule:
          cron: '0 0 * * *'
          filters:
            branches:
              only:
                - develop
                - master
    jobs:
      - build-all
      - unit-tests
      - integration-tests

  cut-release:
    triggers:
      - schedule:
          cron: '0 2 * * 2'
          filters:
            branches:
              only:
                - develop
    jobs:
      - create-release-branch
