#
# CircleCI configuration for salesforcedx-vscode
#
# The following environment variables are required in the 'vscode-test' context
# when running tests for Windows:
#       SFDX_CI_DEVHUB_CLIENTID  -- connected app client ID for the dev hub
#     SFDX_CI_DEVHUB_JWT_KEY   -- private key for the connected app (base64 encoded)
#     SFDX_CI_DEVHUB_USERNAME  -- username of an authorized user of the dev hub
#
version: 2.1

orbs:
  win: circleci/windows@4.1.0
  release-management: salesforce/npm-release-management@4
  slack: circleci/slack@3.4.2
  github-cli: circleci/github-cli@2.1.0

parameters:
  # Configurable Versions
  cli-version:
    type: string
    default: '7.45.1'
  lerna-version:
    type: string
    default: '3.13.1'
  node-version:
    type: string
    # node > 16.13 doesn't exist on legacy CircleCI image https://hub.docker.com/r/circleci/node/tags
    # Need to migrate from legacy CircleCI image (W-11027467)
    default: '16.13.0'
  # Constants
  cache-version:
    type: string
    default: 'dependency-cache-v4-'
  domain-retry:
    description: 'SFDX Domain Retry Wait in Seconds'
    type: integer
    default: 300
  fingerprint:
    type: string
    default: '3b:68:69:7d:19:a4:50:69:ad:b8:db:57:f9:9c:f0:3f'
  # Workflow Triggers
  publish:
    type: boolean
    default: false
  publish-type:
    type: string
    default: minor
  pre-publish:
    type: boolean
    default: false

commands:
  build-artifacts:
    description: 'Building and archiving extension artifacts.'
    steps:
      - checkout
      - restore_dependency_cache
      - run: sudo npm install -g npm@8.12.1
      - install
      - compile
      - package-extensions
      - stage-and-store-artifacts
      - save_dependency_cache

  build-win:
    description: 'Build for Windows.'
    steps:
      - run: git config --global core.autocrlf false
      - checkout
      - restore_dependency_cache:
          base-cache-path: << pipeline.parameters.cache-version >>-win
      - run:
          name: 'Install node'
          shell: bash.exe
          command: |
            nvm install $NODE_VERSION
            nvm use $NODE_VERSION
            nvm install-latest-npm
      - run:
          name: 'Install dependent modules'
          shell: bash.exe
          command: |
            npm config set scripts-prepend-node-path true
            npm install
            npm install -g sfdx-cli@<< pipeline.parameters.cli-version >>
            npm install -g junit-merge
      - run:
          name: 'Compile'
          shell: bash.exe
          command: npm run compile
      - save_dependency_cache:
          base-cache-path: << pipeline.parameters.cache-version >>-win
      - run:
          name: 'Run lint'
          shell: bash.exe
          command: |
            npm run lint

  compile:
    parameters:
      compile-mode:
        type: string
        default: production
    steps:
      - run:
          name: 'Compile in << parameters.compile-mode >> mode'
          environment:
            - NODE_ENV: << parameters.compile-mode >>
          command: |
            npm run compile

  gh-config:
    parameters:
      cache_timeout:
        description: 'Cache timeout in seconds'
        type: integer
        default: 120
      gh_email:
        description: 'GitHub email'
        type: string
        default: $GH_EMAIL
      gh_username:
        description: 'GitHub username'
        type: string
        default: 'Release Bot'
    steps:
      - run:
          name: 'Configuring GitHub'
          command: |
            git config credential.helper 'cache --timeout=<< parameters.cache_timeout >>'
            git config user.email "<< parameters.gh_email >>"
            git config user.name "<< parameters.gh_username >>"
            git config --global pull.rebase true

  install:
    description: 'Installing dependencies'
    steps:
      - run: npm ci
      - run: npm --version
      - run: node --version

  merge-validation:
    description: 'Verify the release branch is not older than main'
    parameters:
      package-json-path:
        type: string
        default: './packages/salesforcedx-vscode/package.json'
    steps:
      - run:
          name: 'Validate release version against main'
          command: |
            git checkout main
            echo "export MAIN_RELEASE_VERSION="$(node -pe "require('<< parameters.package-json-path >>').version")"" >> $BASH_ENV
            source $BASH_ENV
            echo "MAIN_RELEASE_VERSION is: ${MAIN_RELEASE_VERSION}"
            LOWER_VERSION="`echo -e "${MAIN_RELEASE_VERSION}\n${RELEASE_VERSION}" | sort -V | cut --delimiter $'\n' --fields 1`"
            echo "Lower version was: ${LOWER_VERSION}"
            if [ ${LOWER_VERSION} != ${MAIN_RELEASE_VERSION} ]
            then
              echo "The release branch is older than main. We do not want to rebase off of an old branch. Exiting."
              exit 1;
            fi

  package-extensions:
    steps:
      - run:
          name: 'Packaging extensions'
          command: npm run vscode:package

  prepare-gus-environment-variables:
    parameters:
      package-json-path:
        type: string
        default: './packages/salesforcedx-vscode/package.json'
      release-tag-name:
        type: string
        default: 'offcore.tooling'
    steps:
      - run:
          name: 'Prepare environment variables for GUS Change Case Management'
          command: |
            export GUS_BUILD="$(node -pe "require('<< parameters.package-json-path >>').version")"
            echo "export SF_CHANGE_CASE_SCHEDULE_BUILD=<< parameters.release-tag-name >>.$GUS_BUILD" >> $BASH_ENV
            source $BASH_ENV

  prepare-release-environment-variables:
    parameters:
      package-json-path:
        type: string
        default: './packages/salesforcedx-vscode/package.json'
    steps:
      - run:
          name: 'Prepare release branch environment variable'
          command: |
            echo "export RELEASE_VERSION="$(node -pe "require('<< parameters.package-json-path >>').version")"" >> $BASH_ENV
            source $BASH_ENV
            echo "RELEASE_VERSION is: ${RELEASE_VERSION}"

  restore_dependency_cache:
    # This logic cannot be done within the node orb currently. This is due to the fact that we use
    # the package.json instead of the package-lock.json for our checksum.
    parameters:
      base-cache-path:
        type: string
        default: << pipeline.parameters.cache-version >>
    steps:
      - restore_cache:
          keys:
            - << parameters.base-cache-path >>{{ checksum "package.json" }}

  save_dependency_cache:
    parameters:
      base-cache-path:
        type: string
        default: << pipeline.parameters.cache-version >>
      path-to-save:
        type: string
        default: 'node_modules'
    steps:
      - save_cache:
          key: << parameters.base-cache-path >>{{ checksum "package.json" }}
          paths:
            - << parameters.path-to-save >>

  ssh-config:
    steps:
      - add_ssh_keys:
          fingerprints:
            - << pipeline.parameters.fingerprint >>

  stage-and-store-artifacts:
    parameters:
      location:
        type: string
        default: 'extensions'
    steps:
      - run:
          name: 'Staging artifacts'
          command: |
            mkdir << parameters.location >>
            find packages -name "*.vsix" -type f -exec cp {} ./<< parameters.location >> \;
      - store_artifacts:
          path: ./<< parameters.location >>

  store-crash-logs:
    parameters:
      location:
        type: string
        default: 'vscode-crash-logs'
    steps:
      - store_artifacts:
          path: ./<< parameters.location >>

  updating-sha-for-publish:
    steps:
      - run:
          name: 'Generating the SHA256 and appending to the file.'
          command: npm run vscode:sha256
      - run:
          name: 'Concatenating the contents to the proper SHA256.md'
          command: scripts/concatenate-sha256.js
      - run:
          name: 'Removing the temp SHA256 file.'
          command: rm ./SHA256
      - run:
          name: 'Adding the SHA256 to git.'
          command: |
            git add SHA256.md
            git commit -m "chore: updated SHA256 v${RELEASE_VERSION}"

executors:
  default-executor:
    parameters:
      # We are unable to use the recommended cimg docker images since they use the root path instead of home
      image:
        type: string
        default: circleci/node:<< pipeline.parameters.node-version >>
      working-dir:
        type: string
        default: ~/cli
    docker:
      - image: << parameters.image >>
    working_directory: << parameters.working-dir >>

jobs:
  build-all:
    description: 'Build artifacts in a non-Windows environment'
    executor:
      name: default-executor
      working-dir: ~/project
    environment:
      - SFDX_URL_LINUX: https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
      - SFDX_AUTOUPDATE_DISABLE: true
      - SFDX_USE_GENERIC_UNIX_KEYCHAIN: true
      - SFDX_DOMAIN_RETRY: << pipeline.parameters.domain-retry >>
    steps:
      - build-artifacts

  unit-tests:
    description: 'Run tests on Windows'
    executor:
      name: win/default
      size: xlarge
    environment:
      - SFDX_AUTOUPDATE_DISABLE: true
      - SFDX_DOMAIN_RETRY: << pipeline.parameters.domain-retry >>
      - NODE_VERSION: << pipeline.parameters.node-version >>
    steps:
      - build-win
      - run:
          name: 'Running unit tests'
          shell: cmd.exe
          command: npm run test:unit
      - run:
          name: 'Aggregate test results'
          shell: bash.exe
          command: |
            set -e
            npm run aggregateJUnit -- -t unit
            junit-merge -d junit-aggregate -o junit-aggregate.xml
      - store_test_results:
          path: ./junit-aggregate/
      - run:
          name: 'Check for Test Failures'
          shell: powershell.exe
          command: |
            [xml]$results = Get-Content junit-aggregate.xml
            $failure = $results.SelectSingleNode("//failure")
            if ($failure -ne $null) {
              Write-Host "Forcing build failure due to test failure(s) :'("
              $host.SetShouldExit(1)
            }

  soql-ui-tests:
    description: 'Run E2E SOQL UI Tests'
    executor:
      name: win/default
      size: xlarge
    environment:
      - SFDX_AUTOUPDATE_DISABLE: true
      - SFDX_DOMAIN_RETRY: << pipeline.parameters.domain-retry >>
      - NODE_VERSION: << pipeline.parameters.node-version >>
    steps:
      - build-win
      - package-extensions
      - run:
          name: 'Run SOQL UI Tests if Needed'
          shell: bash.exe
          command: |
            set -e
            npm run test:ui

  integration-tests:
    description: 'Run tests on Windows'
    executor:
      name: win/default
      size: xlarge
    environment:
      - SFDX_AUTOUPDATE_DISABLE: true
      - SFDX_DOMAIN_RETRY: << pipeline.parameters.domain-retry >>
      - NODE_VERSION: << pipeline.parameters.node-version >>
    steps:
      - build-win
      - run:
          name: 'Authenticate to the default DevHub'
          shell: bash.exe
          command: |
            echo $SFDX_CI_DEVHUB_JWTKEY | base64 --decode > devhub.key
            sfdx force:auth:jwt:grant --clientid ${SFDX_CI_DEVHUB_CLIENTID} --username ${SFDX_CI_DEVHUB_USERNAME} --jwtkeyfile devhub.key --setdefaultdevhubusername --setalias devhub
            rm devhub.key
      - run:
          name: 'Running integration tests'
          shell: cmd.exe
          command: npm run test:integration-tests-without-system-tests
      - run:
          name: 'Assert all tests ran and aggregate results'
          shell: bash.exe
          command: |
            set -e
            npm run aggregateJUnit -- -t integration vscode-integration
            junit-merge -d junit-aggregate -o junit-aggregate.xml
      - store_test_results:
          path: ./junit-aggregate/
      - store-crash-logs
      - run:
          name: 'Check for Test Failures'
          shell: powershell.exe
          command: |
            [xml]$results = Get-Content junit-aggregate.xml
            $failure = $results.SelectSingleNode("//failure")
            if ($failure -ne $null) {
              Write-Host "Forcing build failure due to test failure(s) :'("
              $host.SetShouldExit(1)
            }

  merge-release-branch:
    parameters:
      e:
        type: executor
    executor: << parameters.e >>
    steps:
      - slack/notify:
          channel: 'pdt_releases'
          color: '#FFDEAD'
          message: 'Merging release branch into main'
      - ssh-config
      - checkout
      - gh-config
      - prepare-release-environment-variables
      - merge-validation
      - run:
          name: 'Rebasing main off of release branch'
          command: |
            echo "Rebasing main off of release branch ${RELEASE_VERSION}"
            git checkout main
            git rebase -Xtheirs release/v${RELEASE_VERSION}
            git push
      - slack/notify:
          channel: 'pdt_releases'
          color: '#d8bfd8'
          message: 'Main should now be rebased off of the release branch ${RELEASE_VERSION}'
      - slack/status:
          channel: 'pdt_releases'
          fail_only: true

  publish:
    parameters:
      e:
        type: executor
    executor: << parameters.e >>
    steps:
      - slack/notify:
          channel: 'pdt_releases'
          color: '#FFDEAD'
          message: 'Starting publish for VSCode Extensions'
      - ssh-config
      - checkout
      - prepare-release-environment-variables
      - prepare-gus-environment-variables
      - restore_dependency_cache
      - gh-config
      - run:
          name: 'Setup gus case management'
          command: |
            sudo npm install -g @salesforce/change-case-management@latest
      - release-management/change-case-create
      - install
      - compile
      - package-extensions
      - updating-sha-for-publish
      - stage-and-store-artifacts
      - run:
          name: 'Publishing to the VS Code Marketplace.'
          command: npm run vscode:publish
      - run:
          name: 'Create git tag (e.g. v48.1.0) & push changes back to main branch'
          command: |
            git tag v${RELEASE_VERSION}
            git push origin v${RELEASE_VERSION}
            git push origin main
      - github-cli/setup
      - run:
          name: 'Create release on git tag'
          command: |
            gh release create v${RELEASE_VERSION} ./packages/**/*.vsix --title "Release v${RELEASE_VERSION}" --notes-file ./packages/salesforcedx-vscode/CHANGELOG.md
      - slack/notify:
          channel: 'pdt_releases'
          color: '#9bcd9b'
          message: 'VSCode Extensions v${RELEASE_VERSION} have been published to the marketplace'
      - slack/notify:
          channel: 'pdt_releases'
          color: '#FFDEAD'
          message: 'VSCode Extensions v${RELEASE_VERSION} Post Publish - Starting merge of main into develop'
      - run:
          name: 'Merge changes from main back into develop'
          command: |
            git checkout develop
            git pull
            git merge main --commit --no-edit
            git push origin develop
      - slack/notify:
          channel: 'pdt_releases'
          color: '#9bcd9b'
          message: 'VSCode Extensions v${RELEASE_VERSION} Post Publish - Succeeded'
      - slack/status:
          channel: 'pdt_releases'
          fail_only: true
      - run:
          when: on_fail
          name: Close CTC case as Not Implemented
          command: |
            if [ -z "${SF_CHANGE_CASE_SFDX_AUTH_URL}" ] || [ -z "${SF_CHANGE_CASE_TEMPLATE_ID}" ] || [ -z "${SF_CHANGE_CASE_SCHEDULE_BUILD}" ]; then
                echo "Environment not configured for CTC"
            else
                sfchangecase close --location "https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME" --status "Not Implemented"
            fi
      - run:
          when: on_success
          name: All Good! Close CTC case/implementations
          command: |
            if [ -z "${SF_CHANGE_CASE_SFDX_AUTH_URL}" ] || [ -z "${SF_CHANGE_CASE_TEMPLATE_ID}" ] || [ -z "${SF_CHANGE_CASE_SCHEDULE_BUILD}" ]; then
                echo "Environment not configured for CTC"
            else
                sfchangecase close --location "https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"
            fi

workflows:
  version: 2.1

  # run a build and a windows test on every commit
  commit-workflow:
    when:
      and:
        - not: << pipeline.parameters.publish >>
        - not: << pipeline.parameters.pre-publish >>
    jobs:
      - build-all
      - unit-tests
      - integration-tests

  pre-publish-workflow:
    when: << pipeline.parameters.pre-publish >>
    jobs:
      - slack/approval-notification:
          context:
            - salesforce-ide
          message: Pending Approval for merge of release branch into main
          channel: 'pdt_releases'
          color: '#0E1111'
      - hold: # Requires manual approval in Circle Ci
          type: approval
      - merge-release-branch:
          e: default-executor
          context:
            - salesforce-ide
          requires:
            - hold
          filters:
            branches:
              only:
                - /^release/v.*/

  publish-workflow:
    when: << pipeline.parameters.publish >>
    jobs:
      - slack/approval-notification:
          context:
            - salesforce-ide
          message: Pending Approval for Publish
          channel: 'pdt_releases'
          color: '#0E1111'
      - build-all
      - unit-tests
      - integration-tests
      - hold: # Requires manual approval in Circle Ci
          type: approval
      - publish:
          e: default-executor
          context:
            - salesforce-ide
            - NPM_Salesforce-Releases
            - CLI_CTC
          requires:
            - build-all
            - unit-tests
            - integration-tests
            - hold
          filters:
            branches:
              only:
                - main

  # run a build/test every mid-night
  scheduled-workflow:
    triggers:
      - schedule:
          cron: '0 0 * * *'
          filters:
            branches:
              only:
                - develop
                - main
    jobs:
      - build-all
      - unit-tests
      - integration-tests
      - soql-ui-tests
  # TODO: Re-enable after issue with dependabot automerge ignoring failed  status checks is fixed.
  # dependabot-automerge:
  #   triggers:
  #     - schedule:
  #         # Every hour after regular working hours (8pm-4am) specified in UTC
  #         # on Thu to Fri, giving time before and after release cutoff for changes to get tested
  #         # Ref: https://circleci.com/docs/2.0/workflows/#scheduling-a-workflow
  #         cron: '0 4,6,8,10,12 * * 4,5'
  #         filters:
  #           branches:
  #             only:
  #               - develop
  #   jobs:
  #     # Merges 1 mergeable PR created by dependabot containing minor, patch updates
  #     # Requires "repository" property in package.json to be a string of 'owner/repo'
  #     - release-management/dependabot-automerge:
  #         merge-method: squash
