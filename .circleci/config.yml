#
# CircleCI configuration for salesforcedx-vscode
#
# The following environment variables are required in the 'vscode-test' context
# when running tests for Windows:
#     SFDX_CI_DEVHUB_CLIENTID  -- connected app client ID for the dev hub
#     SFDX_CI_DEVHUB_JWT_KEY   -- private key for the connected app (base64 encoded)
#     SFDX_CI_DEVHUB_USERNAME  -- username of an authorized user of the dev hub
#
version: 2.1

orbs:
  win: circleci/windows@2.2.0
  sfchangecase: salesforce/change-case-management@3
  slack: circleci/slack@3.4.2

parameters:
  cli-version:
    type: string
    default: '7.45.1'
  node-version:
    type: string
    default: '12.4.0'
  lerna-version:
    type: string
    default: '3.13.1'
  domain-retry:
    description: 'SFDX Domain Retry Wait in Seconds'
    type: integer
    default: 300
  fingerprint:
    type: string
    default: '3b:68:69:7d:19:a4:50:69:ad:b8:db:57:f9:9c:f0:3f'
  publish:
    type: boolean
    default: false
  create-release:
    type: boolean
    default: false
  cache-version:
    type: string
    default: 'dependency-cache-v4-'

commands:
  compile:
    parameters:
      compile-mode:
        type: string
        default: production
    steps:
      - run:
          name: 'Compile in << parameters.compile-mode >> mode'
          environment:
            - NODE_ENV: << parameters.compile-mode >>
          command: |
            npm run compile

  gh-config:
    parameters:
      cache_timeout:
        description: 'Cache timeout in seconds'
        type: integer
        default: 120
      gh_email:
        description: 'GitHub email'
        type: string
        default: $GH_EMAIL
      gh_username:
        description: 'GitHub username'
        type: string
        default: 'Release Bot'
    steps:
      - run:
          name: 'Configuring GitHub'
          command: |
            git config credential.helper 'cache --timeout=<< parameters.cache_timeout >>'
            git config user.email "<< parameters.gh_email >>"
            git config user.name "<< parameters.gh_username >>"

  gus-prepare-environment-variables:
    parameters:
      package-json-path:
        type: string
        default: './packages/salesforcedx-vscode/package.json'
      release-tag-name:
        type: string
        default: 'offcore.tooling'
    steps:
      - run:
          name: 'Prepare environment variables for GUS Change Case Management'
          command: |
            export GUS_BUILD="$(node -pe "require('<< parameters.package-json-path >>').version")"
            echo "export RELEASE_VERSION=$GUS_BUILD" >> $BASH_ENV
            echo "export GUS_RELEASE=<< parameters.release-tag-name >>.$GUS_BUILD" >> $BASH_ENV
            source $BASH_ENV
            echo "RELEASE_VERSION is: ${RELEASE_VERSION}"
            echo "GUS_RELEASE is: ${GUS_RELEASE}"

  install:
    description: 'Installing dependencies'
    steps:
      - run: npm install
      - run: npm --version
      - run: node --version

  package-extensions:
    steps:
      - run:
          name: 'Packaging extensions'
          command: npm run vscode:package

  restore_dependency_cache:
    # This logic cannot be done within the node orb currently. This is due to the fact that we use
    # the package.json instead of the package-lock.json for our checksum.
    parameters:
      base-cache-path:
        type: string
        default: << pipeline.parameters.cache-version >>
    steps:
      - restore_cache:
          keys:
            - << parameters.base-cache-path >>{{ checksum "package.json" }}
            # if cache for exact version of 'package.json' is not present, then load the most recent cache
            - << parameters.base-cache-path >>

  save_dependency_cache:
    parameters:
      base-cache-path:
        type: string
        default: << pipeline.parameters.cache-version >>
      path-to-save:
        type: string
        default: 'node_modules'
    steps:
      - save_cache:
          key: << parameters.base-cache-path >>{{ checksum "package.json" }}
          paths:
            - << parameters.path-to-save >>

  ssh-config:
    steps:
      - add_ssh_keys:
          fingerprints:
            - << pipeline.parameters.fingerprint >>

  stage-and-store-artifacts:
    parameters:
      location:
        type: string
        default: 'extensions'
    steps:
      - run:
          name: 'Staging artifacts'
          command: |
            mkdir << parameters.location >>
            find packages -name "*.vsix" -type f -exec cp {} ./<< parameters.location >> \;
      - store_artifacts:
          path: ./<< parameters.location >>

  updating-sha-for-publish:
    steps:
      - run:
          name: 'Generating the SHA256 and appending to the file.'
          command: npm run vscode:sha256
      - run:
          name: 'Concatenating the contents to the proper SHA256.md'
          command: scripts/concatenate-sha256.js
      - run:
          name: 'Removing the temp SHA256 file.'
          command: rm ./SHA256
      - run:
          name: 'Adding the SHA256 to git.'
          command: |
            git add SHA256.md
            git commit -m "Updated SHA256 v${RELEASE_VERSION}"

  build-artifacts:
    description: 'Building and archiving extension artifacts.'
    steps:
      - checkout
      - restore_dependency_cache
      - install
      - compile
      - package-extensions
      - stage-and-store-artifacts
      - save_dependency_cache

  build-win:
    description: 'Build for Windows.'
    steps:
      - run: git config --global core.autocrlf false
      - checkout
      - restore_dependency_cache:
          base-cache-path: << pipeline.parameters.cache-version >>-win
      - run:
          name: 'Install node'
          shell: bash.exe
          command: |
            nvm install $NODE_VERSION
            nvm use $NODE_VERSION
            nvm install-latest-npm
      - run:
          name: 'Install dependent modules'
          shell: bash.exe
          command: |
            npm config set scripts-prepend-node-path true
            npm install
            npm install -g sfdx-cli@<< pipeline.parameters.cli-version >>
            npm install -g codecov
            npm install -g junit-merge
      - run:
          name: 'Compile'
          shell: bash.exe
          command: npm run compile
      - save_dependency_cache:
          base-cache-path: << pipeline.parameters.cache-version >>-win
      - run:
          name: 'Run lint'
          shell: bash.exe
          command: |
            npm run lint

executors:
  default-executor:
    parameters:
      # We are unable to use the recommended cimg docker images since they use the root path instead of home
      image:
        type: string
        default: circleci/node:<< pipeline.parameters.node-version >>
      working-dir:
        type: string
        default: ~/cli
    docker:
      - image: << parameters.image >>
    working_directory: << parameters.working-dir >>

jobs:
  build-all:
    description: 'Build artifacts in a non-Windows environment'
    executor:
      name: default-executor
      working-dir: ~/project
    environment:
      - SFDX_URL_LINUX: https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
      - SFDX_AUTOUPDATE_DISABLE: true
      - SFDX_USE_GENERIC_UNIX_KEYCHAIN: true
      - SFDX_DOMAIN_RETRY: << pipeline.parameters.domain-retry >>
    steps:
      - build-artifacts

  unit-tests:
    description: 'Run tests on Windows'
    executor: win/default
    environment:
      - SFDX_AUTOUPDATE_DISABLE: true
      - SFDX_DOMAIN_RETRY: << pipeline.parameters.domain-retry >>
      - NODE_VERSION: << pipeline.parameters.node-version >>
    steps:
      - build-win
      - run:
          name: 'Running unit tests'
          shell: cmd.exe
          command: npm run test:unit
      - run:
          name: 'Aggregate test results'
          shell: bash.exe
          command: |
            npm run aggregateJUnit
            junit-merge -d junit-aggregate -o junit-aggregate.xml
      - store_test_results:
          path: ./junit-aggregate/
      - run:
          name: 'Generate code coverage'
          shell: bash.exe
          command: |
            codecov --disable=gcov
      - run:
          name: 'Fail build for test failures'
          shell: powershell.exe
          command: |
            [xml]$results = Get-Content junit-aggregate.xml
            $failure = $results.SelectSingleNode("//failure")
            if ($failure -ne $null) {
              Write-Host "Forcing build failure due to test failure(s) :'("
              $host.SetShouldExit(1)
            }

  integration-tests:
    description: 'Run tests on Windows'
    executor: win/default
    environment:
      - SFDX_AUTOUPDATE_DISABLE: true
      - SFDX_DOMAIN_RETRY: << pipeline.parameters.domain-retry >>
      - NODE_VERSION: << pipeline.parameters.node-version >>
    parameters:
      run-unit-tests:
        type: boolean
        default: true
    steps:
      - build-win
      - run:
          name: 'Authenticate to the default DevHub'
          shell: bash.exe
          command: |
            echo $SFDX_CI_DEVHUB_JWTKEY | base64 --decode > devhub.key
            sfdx force:auth:jwt:grant --clientid ${SFDX_CI_DEVHUB_CLIENTID} --username ${SFDX_CI_DEVHUB_USERNAME} --jwtkeyfile devhub.key --setdefaultdevhubusername --setalias devhub
            rm devhub.key
      - run:
          name: 'Running integration tests'
          shell: cmd.exe
          command: npm run test:integration-tests-without-system-tests
      - run:
          name: 'Aggregate test results'
          shell: bash.exe
          command: |
            npm run aggregateJUnit
            junit-merge -d junit-aggregate -o junit-aggregate.xml
      - store_test_results:
          path: ./junit-aggregate/
      - run:
          name: 'Generate code coverage'
          shell: bash.exe
          command: |
            codecov --disable=gcov
      - run:
          name: 'Fail build for test failures'
          shell: powershell.exe
          command: |
            [xml]$results = Get-Content junit-aggregate.xml
            $failure = $results.SelectSingleNode("//failure")
            if ($failure -ne $null) { 
              Write-Host "Forcing build failure due to test failure(s) :'("
              $host.SetShouldExit(1)
            }

  publish:
    parameters:
      e:
        type: executor
    executor: << parameters.e >>
    steps:
      - slack/notify:
          channel: 'pdt_releases'
          color: '#FFDEAD'
          message: 'Starting publish for VSCode Extensions'
      - ssh-config
      - checkout
      - gus-prepare-environment-variables
      - restore_dependency_cache
      - run:
          name: 'Setup gus case management'
          command: |
            sudo npm install -g @salesforce/change-case-management
      - sfchangecase/create:
          location: REPO_LOCATION
          release: GUS_RELEASE
      - sfchangecase/check:
          location: REPO_LOCATION
          release: GUS_RELEASE
      - gh-config
      - install
      - compile
      - package-extensions
      - updating-sha-for-publish
      - run:
          name: 'Publishing to the VS Code Marketplace.'
          command: npm run vscode:publish
      - stage-and-store-artifacts
      - run:
          name: 'Create git tag (e.g. v48.1.0) & push changes back to master branch'
          command: |
            git tag v${RELEASE_VERSION}
            git push origin v${RELEASE_VERSION}
            git push origin master
      - sfchangecase/update:
          location: REPO_LOCATION
          release: GUS_RELEASE
      - slack/notify:
          channel: 'pdt_releases'
          color: '#9bcd9b'
          message: 'VSCode Extensions v${RELEASE_VERSION} have been published to the marketplace'
      - slack/status:
          channel: 'pdt_releases'
          fail_only: true

  create-release-branch:
    parameters:
      e:
        type: executor
    executor: << parameters.e >>
    steps:
      - slack/notify:
          channel: 'pdt_releases'
          color: '#FFDEAD'
          message: 'Starting creation of release branch for VSCode Extensions'
      - ssh-config
      - checkout
      - restore_dependency_cache
      - gh-config
      - install
      - run:
          name: Install Lerna
          command: sudo npm install -g lerna@<< pipeline.parameters.lerna-version >>
      - run:
          name: Create release branch
          command: |
            git branch
            scripts/create-release-branch.js
      - slack/notify:
          channel: 'pdt_releases'
          color: '#d8bfd8'
          message: 'VSCode Extensions release branch has been cut'
      - slack/status:
          channel: 'pdt_releases'
          fail_only: true

workflows:
  version: 2.1

  # run a build and a windows test on every commit
  commit-workflow:
    when:
      and:
        - not: << pipeline.parameters.publish >>
        - not: << pipeline.parameters.create-release >>
    jobs:
      - build-all
      - unit-tests
      - integration-tests

  publish-workflow:
    when: << pipeline.parameters.publish >>
    jobs:
      - slack/approval-notification:
          message: Pending Approval for Publish
          channel: 'pdt_releases'
          color: '#0E1111'
      - build-all
      - unit-tests
      - integration-tests
      - hold: # Requires manual approval in Circle Ci
          type: approval
      - publish:
          e: default-executor
          requires:
            - build-all
            - unit-tests
            - integration-tests
            - hold
          filters:
            branches:
              only:
                - master

  create-release-branch-workflow:
    when: << pipeline.parameters.create-release >>
    jobs:
      - slack/approval-notification:
          message: Pending Approval for Creation of Release Branch
          channel: 'pdt_releases'
          color: '#0E1111'
      - build-all
      - unit-tests
      - integration-tests
      - hold: # Requires manual approval in Circle Ci
          type: approval
      - create-release-branch:
          e: default-executor
          requires:
            - build-all
            - unit-tests
            - integration-tests
            - hold
          filters:
            branches:
              only:
                - develop

  # run a build/test every mid-night
  scheduled-workflow:
    triggers:
      - schedule:
          cron: '0 0 * * *'
          filters:
            branches:
              only:
                - develop
                - master
    jobs:
      - build-all
      - unit-tests
      - integration-tests

  cut-release:
    triggers:
      - schedule:
          cron: '0 2 * * 2'
          filters:
            branches:
              only:
                - develop
    jobs:
      - create-release-branch:
          e: default-executor
