// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tern completions 1`] = `
{
  "isIncomplete": true,
  "items": [
    {
      "detail": "AuraInstance",
      "documentation": "#include aura.Aura_export",
      "kind": 18,
      "label": "$A",
    },
    {
      "detail": "fn(type: string, listener: fn(e: Event), capture: bool)",
      "documentation": "Registers a single event listener on a single target. The event target may be a single element in a document, the document itself, a window, or an XMLHttpRequest.",
      "kind": 3,
      "label": "addEventListener",
    },
    {
      "detail": "fn(message: string)",
      "documentation": "Display an alert dialog with the specified content and an OK button.",
      "kind": 3,
      "label": "alert",
    },
    {
      "detail": "fn(encoded: string) -> string",
      "documentation": "Decodes a string of data which has been encoded using base-64 encoding.",
      "kind": 3,
      "label": "atob",
    },
    {
      "detail": "AuraInstance",
      "documentation": "TODO: Remove the legacy 'aura' top-level name.",
      "kind": 18,
      "label": "aura",
    },
    {
      "detail": "fn()",
      "documentation": "The blur method removes keyboard focus from the current element.",
      "kind": 3,
      "label": "blur",
    },
    {
      "detail": "fn(data: string) -> string",
      "documentation": "Creates a base-64 encoded ASCII string from a string of binary data.",
      "kind": 3,
      "label": "btoa",
    },
    {
      "detail": "fn(number)",
      "documentation": "Cancels a previously scheduled animation frame request.",
      "kind": 3,
      "label": "cancelAnimationFrame",
    },
    {
      "detail": "fn(interval: number)",
      "documentation": "Cancels repeated action which was set up using setInterval.",
      "kind": 3,
      "label": "clearInterval",
    },
    {
      "detail": "fn(timeout: number)",
      "documentation": "Clears the delay set by window.setTimeout().",
      "kind": 3,
      "label": "clearTimeout",
    },
    {
      "detail": "fn()",
      "documentation": "Closes the current window, or a referenced window.",
      "kind": 3,
      "label": "close",
    },
    {
      "detail": "bool",
      "documentation": "This property indicates whether the referenced window is closed or not.",
      "kind": 18,
      "label": "closed",
    },
    {
      "detail": "?",
      "documentation": undefined,
      "kind": 18,
      "label": "components",
    },
    {
      "detail": "fn(message: string) -> bool",
      "documentation": "Displays a modal dialog with a message and two buttons, OK and Cancel.",
      "kind": 3,
      "label": "confirm",
    },
    {
      "detail": "console",
      "documentation": "The console object provides access to the browser's debugging console. The specifics of how it works vary from browser to browser, but there is a de facto set of features that are typically provided.",
      "kind": 18,
      "label": "console",
    },
    {
      "detail": "crypto",
      "documentation": "This methods lets you get cryptographically random values.",
      "kind": 18,
      "label": "crypto",
    },
    {
      "detail": "fn(uri: string) -> string",
      "documentation": "Decodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine.",
      "kind": 3,
      "label": "decodeURI",
    },
    {
      "detail": "fn(uri: string) -> string",
      "documentation": "Decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.",
      "kind": 3,
      "label": "decodeURIComponent",
    },
    {
      "detail": "number",
      "documentation": undefined,
      "kind": 18,
      "label": "devicePixelRatio",
    },
    {
      "detail": "fn(event: Event) -> bool",
      "documentation": "Dispatches an event into the event system. The event is subject to the same capturing and bubbling behavior as directly dispatched events.",
      "kind": 3,
      "label": "dispatchEvent",
    },
    {
      "detail": "Document",
      "documentation": "Each web page loaded in the browser has its own document object. This object serves as an entry point to the web page's content (the DOM tree, including elements such as <body> and <table>) and provides functionality global to the document (such as obtaining the page's URL and creating new elements in the document).",
      "kind": 18,
      "label": "document",
    },
    {
      "detail": "fn(uri: string) -> string",
      "documentation": "Encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two "surrogate" characters).",
      "kind": 3,
      "label": "encodeURI",
    },
    {
      "detail": "fn(uri: string) -> string",
      "documentation": "Encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two "surrogate" characters).",
      "kind": 3,
      "label": "encodeURIComponent",
    },
    {
      "detail": "fn(code: string)",
      "documentation": "Evaluates JavaScript code represented as a string.",
      "kind": 3,
      "label": "eval",
    },
    {
      "detail": "{}",
      "documentation": undefined,
      "kind": 18,
      "label": "exports",
    },
    {
      "detail": "fn(url: string|Request, init?: ?)",
      "documentation": "The fetch() method of the WindowOrWorkerGlobalScope mixin starts the process of fetching a resource from the network.",
      "kind": 3,
      "label": "fetch",
    },
    {
      "detail": "fn()",
      "documentation": "Sets focus on the specified element, if it can be focused.",
      "kind": 3,
      "label": "focus",
    },
    {
      "detail": "Element",
      "documentation": "Returns the element (such as <iframe> or <object>) in which the window is embedded, or null if the window is top-level.",
      "kind": 18,
      "label": "frameElement",
    },
    {
      "detail": "fn(node: Element, pseudo?: string) -> Element.prototype.style",
      "documentation": "Gives the final used values of all the CSS properties of an element.",
      "kind": 3,
      "label": "getComputedStyle",
    },
    {
      "detail": "fn() -> Selection",
      "documentation": "Returns a selection object representing the range of text selected by the user. ",
      "kind": 3,
      "label": "getSelection",
    },
    {
      "detail": "history",
      "documentation": "The DOM window object provides access to the browser's history through the history object. It exposes useful methods and properties that let you move back and forth through the user's history, as well as -- starting with HTML5 -- manipulate the contents of the history stack.",
      "kind": 18,
      "label": "history",
    },
    {
      "detail": "number",
      "documentation": "Height (in pixels) of the browser window viewport including, if rendered, the horizontal scrollbar.",
      "kind": 18,
      "label": "innerHeight",
    },
    {
      "detail": "number",
      "documentation": "Width (in pixels) of the browser window viewport including, if rendered, the vertical scrollbar.",
      "kind": 18,
      "label": "innerWidth",
    },
    {
      "detail": "fn(value: number) -> bool",
      "documentation": "Determines whether the passed value is a finite number.",
      "kind": 3,
      "label": "isFinite",
    },
    {
      "detail": "fn(value: number) -> bool",
      "documentation": "Determines whether a value is NaN or not. Be careful, this function is broken. You may be interested in ECMAScript 6 Number.isNaN.",
      "kind": 3,
      "label": "isNaN",
    },
    {
      "detail": "Storage",
      "documentation": "The localStorage property allows you to access a local Storage object. localStorage is similar to sessionStorage. The only difference is that, while data stored in localStorage has no expiration time, data stored in sessionStorage gets cleared when the browsing session ends - that is, when the browser is closed.

It should be noted that data stored in either localStorage or sessionStorage is specific to the protocol of the page.",
      "kind": 18,
      "label": "localStorage",
    },
    {
      "detail": "location|string",
      "documentation": "Returns a location object with information about the current location of the document. Assigning to the location property changes the current page to the new address.",
      "kind": 18,
      "label": "location",
    },
    {
      "detail": "?",
      "documentation": undefined,
      "kind": 18,
      "label": "message",
    },
    {
      "detail": "{exports}",
      "documentation": undefined,
      "kind": 18,
      "label": "module",
    },
    {
      "detail": "string",
      "documentation": "The name of the function.",
      "kind": 18,
      "label": "name",
    },
    {
      "detail": "navigator",
      "documentation": "Returns a reference to the navigator object, which can be queried for information about the application running the script.",
      "kind": 18,
      "label": "navigator",
    },
    {
      "detail": "?",
      "documentation": "An event handler for abort events sent to the window.",
      "kind": 18,
      "label": "onabort",
    },
    {
      "detail": "?",
      "documentation": "An event that fires when a window is about to unload its resources. The document is still visible and the event is still cancelable.",
      "kind": 18,
      "label": "onbeforeunload",
    },
    {
      "detail": "?",
      "documentation": "The onblur property returns the onBlur event handler code, if any, that exists on the current element.",
      "kind": 18,
      "label": "onblur",
    },
    {
      "detail": "?",
      "documentation": "The onchange property sets and returns the onChange event handler code for the current element.",
      "kind": 18,
      "label": "onchange",
    },
    {
      "detail": "?",
      "documentation": "The onclick property returns the onClick event handler code on the current element.",
      "kind": 18,
      "label": "onclick",
    },
    {
      "detail": "?",
      "documentation": "An event handler property for right-click events on the window. Unless the default behavior is prevented, the browser context menu will activate (though IE8 has a bug with this and will not activate the context menu if a contextmenu event handler is defined). Note that this event will occur with any non-disabled right-click event and does not depend on an element possessing the "contextmenu" attribute.",
      "kind": 18,
      "label": "oncontextmenu",
    },
    {
      "detail": "?",
      "documentation": "The ondblclick property returns the onDblClick event handler code on the current element.",
      "kind": 18,
      "label": "ondblclick",
    },
    {
      "detail": "?",
      "documentation": "The drag event is fired when an element or text selection is being dragged (every few hundred milliseconds).",
      "kind": 18,
      "label": "ondrag",
    },
    {
      "detail": "?",
      "documentation": "The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).",
      "kind": 18,
      "label": "ondragend",
    },
    {
      "detail": "?",
      "documentation": "The dragenter event is fired when a dragged element or text selection enters a valid drop target.",
      "kind": 18,
      "label": "ondragenter",
    },
    {
      "detail": "?",
      "documentation": "The dragleave event is fired when a dragged element or text selection leaves a valid drop target.",
      "kind": 18,
      "label": "ondragleave",
    },
    {
      "detail": "?",
      "documentation": "The dragover event is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds).",
      "kind": 18,
      "label": "ondragover",
    },
    {
      "detail": "?",
      "documentation": "The dragstart event is fired when the user starts dragging an element or text selection.",
      "kind": 18,
      "label": "ondragstart",
    },
    {
      "detail": "?",
      "documentation": "The drop event is fired when an element or text selection is dropped on a valid drop target.",
      "kind": 18,
      "label": "ondrop",
    },
    {
      "detail": "fn() -> bool",
      "documentation": "Register a global error handler to catch uncaught javascript errors.
@export
@ignore",
      "kind": 3,
      "label": "onerror",
    },
    {
      "detail": "?",
      "documentation": "The onfocus property returns the onFocus event handler code on the current element.",
      "kind": 18,
      "label": "onfocus",
    },
    {
      "detail": "fn()",
      "documentation": "The hashchange event fires when a window's hash changes.",
      "kind": 3,
      "label": "onhashchange",
    },
    {
      "detail": "?",
      "documentation": "The DOM input event is fired synchronously when the value of an <input> or <textarea> element is changed. Additionally, it's also fired on contenteditable editors when its contents are changed. In this case, the event target is the editing host element. If there are two or more elements which have contenteditable as true, "editing host" is the nearest ancestor element whose parent isn't editable. Similarly, it's also fired on root element of designMode editors.",
      "kind": 18,
      "label": "oninput",
    },
    {
      "detail": "?",
      "documentation": "An event handler for the keydown event on the window.",
      "kind": 18,
      "label": "onkeydown",
    },
    {
      "detail": "?",
      "documentation": "The onkeypress property sets and returns the onKeyPress event handler code for the current element.",
      "kind": 18,
      "label": "onkeypress",
    },
    {
      "detail": "?",
      "documentation": "The onkeyup property returns the onKeyUp event handler code for the current element.",
      "kind": 18,
      "label": "onkeyup",
    },
    {
      "detail": "?",
      "documentation": "An event handler for the load event of a window.",
      "kind": 18,
      "label": "onload",
    },
    {
      "detail": "?",
      "documentation": "Dedicated Web Workers provide a simple means for web content to run scripts in background threads.  Once created, a worker can send messages to the spawning task by posting messages to an event handler specified by the creator.",
      "kind": 18,
      "label": "onmessage",
    },
    {
      "detail": "?",
      "documentation": "An event handler for the mousedown event on the window.",
      "kind": 18,
      "label": "onmousedown",
    },
    {
      "detail": "?",
      "documentation": "The onmousemove property returns the mousemove event handler code on the current element.",
      "kind": 18,
      "label": "onmousemove",
    },
    {
      "detail": "?",
      "documentation": "The onmouseout property returns the onMouseOut event handler code on the current element.",
      "kind": 18,
      "label": "onmouseout",
    },
    {
      "detail": "?",
      "documentation": "The onmouseover property returns the onMouseOver event handler code on the current element.",
      "kind": 18,
      "label": "onmouseover",
    },
    {
      "detail": "?",
      "documentation": "An event handler for the mouseup event on the window.",
      "kind": 18,
      "label": "onmouseup",
    },
    {
      "detail": "?",
      "documentation": "The DOM mousewheel event is fired asynchronously when mouse wheel or similar device is operated. It's represented by the MouseWheelEvent interface.",
      "kind": 18,
      "label": "onmousewheel",
    },
    {
      "detail": "?",
      "documentation": "Some browsers implement Online/Offline events from the WHATWG Web Applications 1.0 specification.",
      "kind": 18,
      "label": "onoffline",
    },
    {
      "detail": "?",
      "documentation": ""online" event is fired when the browser switches between online and offline mode.",
      "kind": 18,
      "label": "ononline",
    },
    {
      "detail": "?",
      "documentation": "An event handler for the popstate event on the window.",
      "kind": 18,
      "label": "onpopstate",
    },
    {
      "detail": "?",
      "documentation": "An event handler for the resize event on the window.",
      "kind": 18,
      "label": "onresize",
    },
    {
      "detail": "?",
      "documentation": "Specifies the function to be called when the window is scrolled.",
      "kind": 18,
      "label": "onscroll",
    },
    {
      "detail": "?",
      "documentation": "The unload event is raised when the window is unloading its content and resources. The resources removal is processed after the unload event occurs.",
      "kind": 18,
      "label": "onunload",
    },
    {
      "detail": "<top>",
      "documentation": "Returns a reference to the window that opened this current window.",
      "kind": 18,
      "label": "opener",
    },
    {
      "detail": "number",
      "documentation": "window.outerHeight gets the height in pixels of the whole browser window.",
      "kind": 18,
      "label": "outerHeight",
    },
    {
      "detail": "number",
      "documentation": "window.outerWidth gets the width of the outside of the browser window. It represents the width of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.",
      "kind": 18,
      "label": "outerWidth",
    },
    {
      "detail": "number",
      "documentation": "Returns the number of pixels that the document has already been scrolled vertically.",
      "kind": 18,
      "label": "pageXOffset",
    },
    {
      "detail": "number",
      "documentation": "Returns the number of pixels that the document has already been scrolled vertically.",
      "kind": 18,
      "label": "pageYOffset",
    },
    {
      "detail": "<top>",
      "documentation": "A reference to the parent of the current window or subframe.",
      "kind": 18,
      "label": "parent",
    },
    {
      "detail": "fn(string: string) -> number",
      "documentation": "Parses a string argument and returns a floating point number.",
      "kind": 3,
      "label": "parseFloat",
    },
    {
      "detail": "fn(string: string, radix?: number) -> number",
      "documentation": "Parses a string argument and returns an integer of the specified radix or base.",
      "kind": 3,
      "label": "parseInt",
    },
    {
      "detail": "fn(message: string, targetOrigin: string)",
      "documentation": "window.postMessage, when called, causes a MessageEvent to be dispatched at the target window when any pending script that must be executed completes (e.g. remaining event handlers if window.postMessage is called from an event handler, previously-set pending timeouts, etc.). The MessageEvent has the type message, a data property which is set to the value of the first argument provided to window.postMessage, an origin property corresponding to the origin of the main document in the window calling window.postMessage at the time window.postMessage was called, and a source property which is the window from which window.postMessage is called. (Other standard properties of events are present with their expected values.)",
      "kind": 3,
      "label": "postMessage",
    },
    {
      "detail": "fn(message: string, value: string) -> string",
      "documentation": "Displays a dialog with a message prompting the user to input some text.",
      "kind": 3,
      "label": "prompt",
    },
    {
      "detail": "fn(type: string, listener: fn(), capture: bool)",
      "documentation": "Allows the removal of event listeners from the event target.",
      "kind": 3,
      "label": "removeEventListener",
    },
    {
      "detail": "fn(callback: fn(timestamp: number)) -> number",
      "documentation": "The Window.requestAnimationFrame() method tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation before the next repaint. The method takes as an argument a callback to be invoked before the repaint.",
      "kind": 3,
      "label": "requestAnimationFrame",
    },
    {
      "detail": "?",
      "documentation": undefined,
      "kind": 18,
      "label": "returnValue",
    },
    {
      "detail": "screen",
      "documentation": "Returns a reference to the screen object associated with the window.",
      "kind": 18,
      "label": "screen",
    },
    {
      "detail": "number",
      "documentation": "Returns the distance in pixels from the left side of the main screen to the left side of the current screen.",
      "kind": 18,
      "label": "screenLeft",
    },
    {
      "detail": "number",
      "documentation": "Returns the distance in pixels from the top side of the current screen.",
      "kind": 18,
      "label": "screenTop",
    },
    {
      "detail": "number",
      "documentation": "Returns the horizontal coordinate of the event within the screen as a whole.",
      "kind": 18,
      "label": "screenX",
    },
    {
      "detail": "number",
      "documentation": "Returns the vertical coordinate of the event within the screen as a whole.",
      "kind": 18,
      "label": "screenY",
    },
    {
      "detail": "fn(x: number, y: number)",
      "documentation": "Scrolls the window to a particular place in the document.",
      "kind": 3,
      "label": "scroll",
    },
    {
      "detail": "fn(x: number, y: number)",
      "documentation": "Scrolls the document in the window by the given amount.",
      "kind": 3,
      "label": "scrollBy",
    },
    {
      "detail": "fn(x: number, y: number)",
      "documentation": "Scrolls to a particular set of coordinates in the document.",
      "kind": 3,
      "label": "scrollTo",
    },
    {
      "detail": "number",
      "documentation": "Returns the number of pixels that the document has already been scrolled vertically.",
      "kind": 18,
      "label": "scrollX",
    },
    {
      "detail": "number",
      "documentation": "Returns the number of pixels that the document has already been scrolled vertically.",
      "kind": 18,
      "label": "scrollY",
    },
    {
      "detail": "<top>",
      "documentation": "Returns an object reference to the window object. ",
      "kind": 18,
      "label": "self",
    },
    {
      "detail": "Storage",
      "documentation": "The sessionStorage property allows you to access a session Storage object for the current origin. sessionStorage is similar to Window.localStorage, the only difference is while data stored in localStorage has no expiration set, data stored in sessionStorage gets cleared when the page session ends. A page session lasts for as long as the browser is open and survives over page reloads and restores. Opening a page in a new tab or window will cause a new session to be initiated, which differs from how session cookies work.

It should be noted that data stored in either sessionStorage or localStorage is specific to the protocol of the page.",
      "kind": 18,
      "label": "sessionStorage",
    },
    {
      "detail": "fn(f: fn(), ms: number) -> number",
      "documentation": "Calls a function or executes a code snippet repeatedly, with a fixed time delay between each call to that function.",
      "kind": 3,
      "label": "setInterval",
    },
    {
      "detail": "fn(f: fn(), ms: number) -> number",
      "documentation": "Calls a function or executes a code snippet after specified delay.",
      "kind": 3,
      "label": "setTimeout",
    },
    {
      "detail": "string",
      "documentation": undefined,
      "kind": 18,
      "label": "state",
    },
    {
      "detail": "<top>",
      "documentation": "Returns a reference to the topmost window in the window hierarchy.",
      "kind": 18,
      "label": "top",
    },
    {
      "detail": "fn(?)",
      "documentation": "The value undefined.",
      "kind": 3,
      "label": "undefined",
    },
    {
      "detail": "<top>",
      "documentation": "The window object represents a window containing a DOM document.",
      "kind": 18,
      "label": "window",
    },
    {
      "detail": "fn(size: number)",
      "documentation": "The JavaScript Array global object is a constructor for arrays, which are high-level, list-like objects.",
      "kind": 3,
      "label": "Array",
    },
    {
      "detail": "fn(length: number)",
      "documentation": "The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer.",
      "kind": 3,
      "label": "ArrayBuffer",
    },
    {
      "detail": "fn()",
      "documentation": "This type represents a DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., Element.getAttribute(), but certain functions (e.g., Element.getAttributeNode()) or means of iterating give Attr types.",
      "kind": 3,
      "label": "Attr",
    },
    {
      "detail": "window.Aura",
      "documentation": "-- Namespaces ------------------------------------------------------------",
      "kind": 18,
      "label": "Aura",
    },
    {
      "detail": "fn()",
      "documentation": "This section provides a brief reference for all of the methods, properties, and events available through the DOM window object. The window object implements the Window interface, which in turn inherits from the AbstractView interface. Some additional global functions, namespaces objects, and constructors, not typically associated with the window, but available on it, are listed in the JavaScript Reference.",
      "kind": 3,
      "label": "BeforeLoadEvent",
    },
    {
      "detail": "fn(parts: [?], options?: ?)",
      "documentation": "A Blob object represents a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.",
      "kind": 3,
      "label": "Blob",
    },
    {
      "detail": "fn(value: ?) -> bool",
      "documentation": "The Boolean object is an object wrapper for a boolean value.",
      "kind": 3,
      "label": "Boolean",
    },
    {
      "detail": "CanvasRenderingContext2D",
      "documentation": undefined,
      "kind": 18,
      "label": "CanvasRenderingContext2D",
    },
    {
      "detail": "fn()",
      "documentation": "Returns a collection of rectangles that indicate the bounding rectangles for each box in a client.",
      "kind": 3,
      "label": "ClientRect",
    },
    {
      "detail": "Clipboard",
      "documentation": "The Clipboard interface implements the Clipboard API, providing both read and write access to the contents of the system clipboard.",
      "kind": 18,
      "label": "Clipboard",
    },
    {
      "detail": "fn()",
      "documentation": "The DOM CustomEvent are events initialized by an application for any purpose.",
      "kind": 3,
      "label": "CustomEvent",
    },
    {
      "detail": "fn()",
      "documentation": "DOMParser can parse XML or HTML source stored in a string into a DOM Document. DOMParser is specified in DOM Parsing and Serialization.",
      "kind": 3,
      "label": "DOMParser",
    },
    {
      "detail": "fn()",
      "documentation": "This type represents a set of space-separated tokens. Commonly returned by HTMLElement.classList, HTMLLinkElement.relList, HTMLAnchorElement.relList or HTMLAreaElement.relList. It is indexed beginning with 0 as with JavaScript arrays. DOMTokenList is always case-sensitive.",
      "kind": 3,
      "label": "DOMTokenList",
    },
    {
      "detail": "DataTransfer",
      "documentation": "This object is available from the dataTransfer property of all drag events. It cannot be created separately.",
      "kind": 18,
      "label": "DataTransfer",
    },
    {
      "detail": "fn(buffer: ArrayBuffer, byteOffset?: number, byteLength?: number)",
      "documentation": "The DataView view provides a low-level interface for reading data from and writing it to an ArrayBuffer.",
      "kind": 3,
      "label": "DataView",
    },
    {
      "detail": "fn(ms: number)",
      "documentation": "Creates JavaScript Date instances which let you work with dates and times.",
      "kind": 3,
      "label": "Date",
    },
    {
      "detail": "fn()",
      "documentation": "Each web page loaded in the browser has its own document object. This object serves as an entry point to the web page's content (the DOM tree, including elements such as <body> and <table>) and provides functionality global to the document (such as obtaining the page's URL and creating new elements in the document).",
      "kind": 3,
      "label": "Document",
    },
    {
      "detail": "fn()",
      "documentation": "Creates a new empty DocumentFragment.",
      "kind": 3,
      "label": "DocumentFragment",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "Element",
    },
    {
      "detail": "fn(message: string)",
      "documentation": "Creates an error object.",
      "kind": 3,
      "label": "Error",
    },
    {
      "detail": "fn()",
      "documentation": "The error event is fired whenever a resource fails to load.",
      "kind": 3,
      "label": "ErrorEvent",
    },
    {
      "detail": "fn(message: string)",
      "documentation": "Represents an error regarding the eval function.",
      "kind": 3,
      "label": "EvalError",
    },
    {
      "detail": "fn()",
      "documentation": undefined,
      "kind": 3,
      "label": "Event",
    },
    {
      "detail": "fn(bits: ?, name: string, options?: ?)",
      "documentation": "The File object provides information about -- and access to the contents of -- files. These are generally retrieved from a FileList object returned as a result of a user selecting files using the input element, or from a drag and drop operation's DataTransfer object.",
      "kind": 3,
      "label": "File",
    },
    {
      "detail": "fn()",
      "documentation": "An object of this type is returned by the files property of the HTML input element; this lets you access the list of files selected with the <input type="file"> element. It's also used for a list of files dropped into web content when using the drag and drop API.",
      "kind": 3,
      "label": "FileList",
    },
    {
      "detail": "fn()",
      "documentation": "The FileReader object lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read. File objects may be obtained from a FileList object returned as a result of a user selecting files using the <input> element, from a drag and drop operation's DataTransfer object, or from the mozGetAsFile() API on an HTMLCanvasElement.",
      "kind": 3,
      "label": "FileReader",
    },
    {
      "detail": "fn(size: number)",
      "documentation": "A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.",
      "kind": 3,
      "label": "Float32Array",
    },
    {
      "detail": "fn(size: number)",
      "documentation": "A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.",
      "kind": 3,
      "label": "Float64Array",
    },
    {
      "detail": "fn()",
      "documentation": undefined,
      "kind": 3,
      "label": "FormData",
    },
    {
      "detail": "fn(body: string) -> fn()",
      "documentation": "Every function in JavaScript is actually a Function object.",
      "kind": 3,
      "label": "Function",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLAnchorElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLAreaElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLAudioElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLBRElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLBaseElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLBodyElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLButtonElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLCanvasElement",
    },
    {
      "detail": "fn()",
      "documentation": "HTMLCollection is an interface representing a generic collection of elements (in document order) and offers methods and properties for traversing the list.",
      "kind": 3,
      "label": "HTMLCollection",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLDListElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLDataElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLDataListElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLDivElement",
    },
    {
      "detail": "fn()",
      "documentation": "Each web page loaded in the browser has its own document object. This object serves as an entry point to the web page's content (the DOM tree, including elements such as <body> and <table>) and provides functionality global to the document (such as obtaining the page's URL and creating new elements in the document).",
      "kind": 3,
      "label": "HTMLDocument",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLEmbedElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLFieldSetElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLFormControlsCollection",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLFormElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLHRElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLHeadElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLHeadingElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLHtmlElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLIFrameElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLImageElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLInputElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLKeygenElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLLIElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLLabelElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLLegendElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLLinkElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLMapElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLMediaElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLMetaElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLMeterElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLModElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLOListElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLObjectElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLOptGroupElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLOptionElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLOptionsCollection",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLOutputElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLParagraphElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLParamElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLPreElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLProgressElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLQuoteElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLScriptElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLSelectElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLSourceElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLSpanElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLStyleElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLTableCaptionElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLTableCellElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLTableColElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLTableDataCellElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLTableElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLTableHeaderCellElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLTableRowElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLTableSectionElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLTextAreaElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLTimeElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLTitleElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLTrackElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLUListElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLUnknownElement",
    },
    {
      "detail": "fn()",
      "documentation": "Represents an element in an HTML or XML document.",
      "kind": 3,
      "label": "HTMLVideoElement",
    },
    {
      "detail": "fn()",
      "documentation": "The hashchange event fires when a window's hash changes.",
      "kind": 3,
      "label": "HashChangeEvent",
    },
    {
      "detail": "fn(init?: ?)",
      "documentation": "Represents response/request headers, allowing you to query them and take different actions depending on the results.",
      "kind": 3,
      "label": "Headers",
    },
    {
      "detail": "fn(width?: number, height?: number) -> Element",
      "documentation": "Image Element constructor. Accepts two optional parameters: Image([unsigned long width, unsigned long height]). Returns an HTMLImageElement instance just as document.createElement('img') would.",
      "kind": 3,
      "label": "Image",
    },
    {
      "detail": "number",
      "documentation": "A numeric value representing infinity.",
      "kind": 18,
      "label": "Infinity",
    },
    {
      "detail": "fn(size: number)",
      "documentation": "A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.",
      "kind": 3,
      "label": "Int16Array",
    },
    {
      "detail": "fn(size: number)",
      "documentation": "A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.",
      "kind": 3,
      "label": "Int32Array",
    },
    {
      "detail": "fn(size: number)",
      "documentation": "A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.",
      "kind": 3,
      "label": "Int8Array",
    },
    {
      "detail": "JSON",
      "documentation": "JSON (JavaScript Object Notation) is a data-interchange format.  It closely resembles a subset of JavaScript syntax, although it is not a strict subset. (See JSON in the JavaScript Reference for full details.)  It is useful when writing any kind of JavaScript-based application, including websites and browser extensions.  For example, you might store user information in JSON format in a cookie, or you might store extension preferences in JSON in a string-valued browser preference.",
      "kind": 18,
      "label": "JSON",
    },
    {
      "detail": "fn()",
      "documentation": "Json instance for test. Used to export Json methods for testing.

@export
@memberof Test",
      "kind": 3,
      "label": "JsonTestInstance",
    },
    {
      "detail": "fn()",
      "documentation": "KeyboardEvent objects describe a user interaction with the keyboard. Each event describes a key; the event type (keydown, keypress, or keyup) identifies what kind of activity was performed.",
      "kind": 3,
      "label": "KeyboardEvent",
    },
    {
      "detail": "fn(iterable?: [?])",
      "documentation": "The Map object is a simple key/value map. Any value (both objects and primitive values) may be used as either a key or a value.",
      "kind": 3,
      "label": "Map",
    },
    {
      "detail": "Math",
      "documentation": "A built-in object that has properties and methods for mathematical constants and functions.",
      "kind": 18,
      "label": "Math",
    },
    {
      "detail": "fn()",
      "documentation": "The DOM MouseEvent represents events that occur due to the user interacting with a pointing device (such as a mouse). It's represented by the nsINSDOMMouseEvent interface, which extends the nsIDOMMouseEvent interface.",
      "kind": 3,
      "label": "MouseEvent",
    },
    {
      "detail": "fn(callback: fn([MutationRecord]))",
      "documentation": "MutationObserver provides developers a way to react to changes in a DOM.",
      "kind": 3,
      "label": "MutationObserver",
    },
    {
      "detail": "MutationRecord",
      "documentation": "A MutationRecord represents an individual DOM mutation.",
      "kind": 18,
      "label": "MutationRecord",
    },
    {
      "detail": "number",
      "documentation": "A value representing Not-A-Number.",
      "kind": 18,
      "label": "NaN",
    },
    {
      "detail": "fn()",
      "documentation": "A collection of nodes returned by Element.attributes (also potentially for DocumentType.entities, DocumentType.notations). NamedNodeMaps are not in any particular order (unlike NodeList), although they may be accessed by an index as in an array (they may also be accessed with the item() method). A NamedNodeMap object are live and will thus be auto-updated if changes are made to their contents internally or elsewhere.",
      "kind": 3,
      "label": "NamedNodeMap",
    },
    {
      "detail": "fn()",
      "documentation": "A Node is an interface from which a number of DOM types inherit, and allows these various types to be treated (or tested) similarly.",
      "kind": 3,
      "label": "Node",
    },
    {
      "detail": "fn()",
      "documentation": "NodeList objects are collections of nodes returned by getElementsByTagName, getElementsByTagNameNS, Node.childNodes, querySelectorAll, getElementsByClassName, etc.",
      "kind": 3,
      "label": "NodeList",
    },
    {
      "detail": "fn(value: ?) -> number",
      "documentation": "The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor.",
      "kind": 3,
      "label": "Number",
    },
    {
      "detail": "fn()",
      "documentation": "Creates an object wrapper.",
      "kind": 3,
      "label": "Object",
    },
    {
      "detail": "fn(executor: fn(resolve: fn(value: ?), reject: fn(reason: ?)))",
      "documentation": "The Promise object is used for deferred and asynchronous computations. A Promise is in one of the three states:",
      "kind": 3,
      "label": "Promise",
    },
    {
      "detail": "fn(target: ?, handler: Proxy_handler)",
      "documentation": "The Proxy object is used to define the custom behavior in JavaScript fundamental operation (e.g. property lookup, assignment, enumeration, function invocation, etc).",
      "kind": 3,
      "label": "Proxy",
    },
    {
      "detail": "fn()",
      "documentation": "Releases a Range from use to improve performance. This lets the browser choose to release resources associated with this Range. Subsequent attempts to use the detached range will result in a DOMException being thrown with an error code of INVALID_STATE_ERR.",
      "kind": 3,
      "label": "Range",
    },
    {
      "detail": "fn(message: string)",
      "documentation": "Represents an error when a number is not within the correct range allowed.",
      "kind": 3,
      "label": "RangeError",
    },
    {
      "detail": "fn(message: string)",
      "documentation": "Represents an error when a non-existent variable is referenced.",
      "kind": 3,
      "label": "ReferenceError",
    },
    {
      "detail": "Reflect",
      "documentation": "Reflect is a built-in object that provides methods for interceptable JavaScript operations.",
      "kind": 18,
      "label": "Reflect",
    },
    {
      "detail": "fn(source: string, flags?: string)",
      "documentation": "Creates a regular expression object for matching text with a pattern.",
      "kind": 3,
      "label": "RegExp",
    },
    {
      "detail": "fn(input: string, init?: ?)",
      "documentation": "The Request interface of the Fetch API represents a resource request.",
      "kind": 3,
      "label": "Request",
    },
    {
      "detail": "fn(body: ?, init?: ?)",
      "documentation": "Represents the response to a request.",
      "kind": 3,
      "label": "Response",
    },
    {
      "detail": "fn()",
      "documentation": "Selection is the class of the object returned by window.getSelection() and other methods. It represents the text selection in the greater page, possibly spanning multiple elements, when the user drags over static text and other parts of the page. For information about text selection in an individual text editing element.",
      "kind": 3,
      "label": "Selection",
    },
    {
      "detail": "fn(iterable?: [?])",
      "documentation": "The Set object lets you store unique values of any type, whether primitive values or object references.",
      "kind": 3,
      "label": "Set",
    },
    {
      "detail": "Storage",
      "documentation": undefined,
      "kind": 18,
      "label": "Storage",
    },
    {
      "detail": "fn(value: ?) -> string",
      "documentation": "The String global object is a constructor for strings, or a sequence of characters.",
      "kind": 3,
      "label": "String",
    },
    {
      "detail": "fn(description?: string)",
      "documentation": "A symbol is a unique and immutable data type and may be used as an identifier for object properties. The symbol object is an implicit object wrapper for the symbol primitive data type.",
      "kind": 3,
      "label": "Symbol",
    },
    {
      "detail": "fn(message: string)",
      "documentation": "Represents an error when trying to interpret syntactically invalid code.",
      "kind": 3,
      "label": "SyntaxError",
    },
    {
      "detail": "fn()",
      "documentation": "In the DOM, the Text interface represents the textual content of an Element or Attr.  If an element has no markup within its content, it has a single child implementing Text that contains the element's text.  However, if the element contains markup, it is parsed into information items and Text nodes that form its children.",
      "kind": 3,
      "label": "Text",
    },
    {
      "detail": "fn(label?: string, options?: {}) -> {_encoding: {labels: [?], name: string}, _error_mode: string, _ignoreBOM: bool}",
      "documentation": "@param {string=} label The label of the encoding;
    defaults to 'utf-8'.
@param {Object=} options",
      "kind": 3,
      "label": "TextDecoder",
    },
    {
      "detail": "fn(label?: string, options?: {}) -> {_encoding: {labels: [?], name: string}}",
      "documentation": "@param {string=} label The label of the encoding. NONSTANDARD.
@param {Object=} options NONSTANDARD.",
      "kind": 3,
      "label": "TextEncoder",
    },
    {
      "detail": "fn()",
      "documentation": "In order to provide quality support for touch-based user interfaces, touch events offer the ability to interpret finger activity on touch screens or trackpads.",
      "kind": 3,
      "label": "TouchEvent",
    },
    {
      "detail": "fn(message: string)",
      "documentation": "Represents an error an error when a value is not of the expected type.",
      "kind": 3,
      "label": "TypeError",
    },
    {
      "detail": "fn(message: string)",
      "documentation": "Represents an error when a malformed URI is encountered.",
      "kind": 3,
      "label": "URIError",
    },
    {
      "detail": "fn(url: string, base?: string)",
      "documentation": "The URL interface represents an object providing static methods used for creating object URLs.",
      "kind": 3,
      "label": "URL",
    },
    {
      "detail": "fn(init?: string)",
      "documentation": "The URLSearchParams interface defines utility methods to work with the query string of a URL.",
      "kind": 3,
      "label": "URLSearchParams",
    },
    {
      "detail": "fn(size: number)",
      "documentation": "A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.",
      "kind": 3,
      "label": "Uint16Array",
    },
    {
      "detail": "fn(size: number)",
      "documentation": "A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.",
      "kind": 3,
      "label": "Uint32Array",
    },
    {
      "detail": "fn(size: number)",
      "documentation": "A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.",
      "kind": 3,
      "label": "Uint8Array",
    },
    {
      "detail": "fn(size: number)",
      "documentation": "A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.",
      "kind": 3,
      "label": "Uint8ClampedArray",
    },
    {
      "detail": "fn(iterable?: [?])",
      "documentation": "The WeakMap object is a collection of key/value pairs in which the keys are objects and the values can be arbitrary values.",
      "kind": 3,
      "label": "WeakMap",
    },
    {
      "detail": "fn(iterable?: [?])",
      "documentation": "The WeakSet object lets you store weakly held objects in a collection.",
      "kind": 3,
      "label": "WeakSet",
    },
    {
      "detail": "fn(url: string)",
      "documentation": "WebSockets is an advanced technology that makes it possible to open an interactive communication session between the user's browser and a server. With this API, you can send messages to a server and receive event-driven responses without having to poll the server for a reply.",
      "kind": 3,
      "label": "WebSocket",
    },
    {
      "detail": "fn()",
      "documentation": "The DOM WheelEvent represents events that occur due to the user moving a mouse wheel or similar input device.",
      "kind": 3,
      "label": "WheelEvent",
    },
    {
      "detail": "fn(scriptURL: string)",
      "documentation": "Workers are background tasks that can be easily created and can send messages back to their creators. Creating a worker is as simple as calling the Worker() constructor, specifying a script to be run in the worker thread.",
      "kind": 3,
      "label": "Worker",
    },
    {
      "detail": "fn()",
      "documentation": "The Web platform provides the following objects for parsing and serializing XML:",
      "kind": 3,
      "label": "XMLDocument",
    },
    {
      "detail": "fn()",
      "documentation": "XMLHttpRequest is a JavaScript object that was designed by Microsoft and adopted by Mozilla, Apple, and Google. It's now being standardized in the W3C. It provides an easy way to retrieve data at a URL. Despite its name, XMLHttpRequest can be used to retrieve any type of data, not just XML, and it supports protocols other than HTTP (including file and ftp).",
      "kind": 3,
      "label": "XMLHttpRequest",
    },
    {
      "detail": "fn()",
      "documentation": "Refer to nsIDOMXPathResult for more detail.",
      "kind": 3,
      "label": "XPathResult",
    },
  ],
}
`;

exports[`tern definition, same file 1`] = `
{
  "range": {
    "end": {
      "character": 43,
      "line": 1,
    },
    "start": {
      "character": 37,
      "line": 1,
    },
  },
  "uri": "file:///test-workspaces/sfdx-workspace/force-app/main/default/aura/lightningExamplesApp/lightningExamplesAppController.js",
}
`;

exports[`tern hover 1`] = `
{
  "contents": [
    "helper: {helperMethod}",
    "A helper resource contains functions that can be reused by your JavaScript code in the component bundle. ",
  ],
}
`;

exports[`tern references 1`] = `
[
  {
    "range": {
      "end": {
        "character": 27,
        "line": 2,
      },
      "start": {
        "character": 15,
        "line": 2,
      },
    },
    "uri": "file:///test-workspaces/sfdx-workspace/force-app/main/default/aura/lightningExamplesApp/lightningExamplesAppController.js",
  },
  {
    "range": {
      "end": {
        "character": 16,
        "line": 1,
      },
      "start": {
        "character": 4,
        "line": 1,
      },
    },
    "uri": "file:///test-workspaces/sfdx-workspace/force-app/main/default/aura/lightningExamplesApp/lightningExamplesAppHelper.js",
  },
]
`;
