{
  "lwc-alert": {
    "prefix": "lwc-alert",
    "body": [
      "async ${1:handleAlertClick}() {",
      "  await LightningAlert.open({",
      "    message: \"${2:this is the alert message}\",",
      "    variant: \"${3|header,headerless|}\", // if headerless, theme not applicable",
      "    theme: \"${4|default,alt-inverse,error,info,inverse,offline,shade,success,warning|}\", ",
      "    label: \"${5:Error}\", // this is the header text",
      "  });",
      "  //Alert has been closed",
      "  ${0}",
      "}"
    ],
    "description": "Create an alert modal within your component that communicates a state that affects the entire system, not just a feature or page."
  },
  "lwc-confirm": {
    "prefix": "lwc-confirm",
    "body": [
      "async ${1:handleConfirmClick}() {",
      "  const result = await LightningConfirm.open({",
      "    message: \"${2:this is the prompt message}\",",
      "    variant: \"${3|header,headerless|}\", // if headerless, theme not applicable",
      "    theme: \"${4|default,alt-inverse,error,info,inverse,offline,shade,success,warning|}\", ",
      "    label: \"${5:this is the aria-label value}\",",
      "  });",
      "  //Confirm has been closed",
      "  //result is true if OK was clicked",
      "  //and false if cancel was clicked",
      "}"
    ],
    "description": "Create a confirm modal within your component that asks the user to respond before they continue."
  },
  "lwc-event": {
    "prefix": "lwc-event",
    "description": "Creates an event without custom details",
    "body": ["this.dispatchEvent(new CustomEvent(\"${2:event-name}\"));"]
  },
  "lwc-event-data": {
    "prefix": "lwc-event-details",
    "description": "Creates a standard event for custom details",
    "body": [
      "const ${1:event} = new CustomEvent(\"${2:event-name}\", {",
      "    detail: { $0 }",
      "});",
      "this.dispatchEvent(${1:event});"
    ]
  },
  "lwc-event-listener": {
    "prefix": "lwc-event-listener",
    "description": "Creates an event listener",
    "body": [
      "this.template.addEventListener(\"${1:event-name}\", this.${2:local-method-name}.bind(this));"
    ]
  },
  "lwc-graphql-query": {
    "prefix": "lwc-graphql-query",
    "description": "Creates a gql function that can be passed to the query parameter in a wire call.",
    "body": [
      "gql`",
      "  query ${1:queryName} {",
      "    uiapi {",
      "      query {",
      "        ${2:sObjectName} {",
      "          edges {",
      "            node {",
      "              Name {",
      "                value",
      "              }",
      "              ${0}",
      "            }",
      "          }",
      "        }",
      "      }",
      "    }",
      "  }",
      "}`"
    ]
  },
  "lwc-graphql-wire-aggregation": {
    "prefix": "lwc-graphql-aggregation",
    "body": [
      "@wire(graphql, {",
      "  query: gql`",
      "    query ${1:queryName} {",
      "      uiapi {",
      "        aggregate {",
      "          ${2:sObjectName}(groupBy: { ${3:groupingFieldName}: {group: true} } ) {",
      "            edges {",
      "              node {",
      "                aggregate {",
      "                  ${4:aggregatedFieldName} {",
      "                    avg {",
      "                      displayValue",
      "                    }",
      "                    sum {",
      "                      displayValue",
      "                    }",
      "                  ${0}",
      "                  }",
      "                }",
      "              }",
      "            }",
      "            totalCount",
      "          }",
      "        }",
      "      }",
      "    }",
      "  `,",
      "})",
      "${5:propertyOrFunction};"
    ],
    "description": "Creates a GraphQL wire adapter containing aggregated fields."
  },
  "lwc-graphql-wire-function": {
    "prefix": "lwc-graphql-function",
    "description": "Creates a GraphQL wire adapter and a function to process results.",
    "body": [
      "results;",
      "errors;",
      "",
      "@wire(graphql, {",
      "  query: gql`",
      "    query ${1:queryName} {",
      "      uiapi {",
      "        query {",
      "          ${2:sObjectName} {",
      "            edges {",
      "              node {",
      "                Name {",
      "                  value",
      "                }",
      "                ${0}",
      "              }",
      "            }",
      "          }",
      "        }",
      "      }",
      "    }",
      "  }`,",
      "})",
      "graphqlQueryResult({ data, errors }) {",
      "  if (data) {",
      "    this.results = data.uiapi.query.${2}.edges.map((edge) => edge.node);",
      "  }",
      "  this.errors = errors;",
      "}"
    ]
  },
  "lwc-graphql-wire-multi-object": {
    "prefix": "lwc-graphql-multi-object",
    "body": [
      "@wire(graphql, {",
      "  query: gql`",
      "    query ${1:queryName} {",
      "      uiapi {",
      "        query {",
      "          ${2:sObjectName}(first: 5) {",
      "            edges {",
      "              node {",
      "                Id",
      "                Name {",
      "                  value",
      "                }",
      "              }",
      "            }",
      "          }",
      "          ${3:sObjectName}(first: 5) {",
      "            edges {",
      "              node {",
      "                Id",
      "                ${0}",
      "              }",
      "            }",
      "          }",
      "        }",
      "      }",
      "    }",
      "  `",
      "})",
      "${4:propertyOrFunction};"
    ],
    "description": "Creates a GraphQL wire adapter that queries multiple objects."
  },
  "lwc-graphql-wire-pagination": {
    "prefix": "lwc-graphql-pagination",
    "description": "GraphQL wire adapter implementation with pagination built in.",
    "body": [
      "after;",
      "pageNumber = 1;",
      "pageSize = 5",
      "",
      "@wire(graphql, {",
      "  query: gql`",
      "   query ${1:queryName}(\\$after: String, \\$pageSize: Int!) {",
      "     uiapi {",
      "       query {",
      "         ${2:sObjectName} (first: \\$pageSize, after: \\$after) {",
      "           edges {",
      "             node {",
      "               Id",
      "               ${0}",
      "             }",
      "           }",
      "           totalCount",
      "           pageInfo {",
      "             endCursor",
      "             hasNextPage",
      "             hasPreviousPage",
      "           }",
      "         }",
      "       }",
      "     }",
      "   }`,",
      "  variables: \"\\$variables\",",
      "})",
      "${3:propertyOrFunction};",
      "",
      "get variables() {",
      "  return {",
      "    after: this.after || null,",
      "    pageSize,",
      "  };",
      "}"
    ]
  },
  "lwc-graphql-wire-property": {
    "prefix": "lwc-graphql-property",
    "description": "Creates a GraphQL wire adapter and stores results in a property.",
    "body": [
      "@wire(graphql, {",
      "  query: gql`",
      "    query ${1:queryName {",
      "      uiapi {",
      "        query {",
      "          ${2:sObjectName} {",
      "            edges {",
      "              node {",
      "                Name {",
      "                  value",
      "                }",
      "                ${0}",
      "              }",
      "            }",
      "          }",
      "        }",
      "      }",
      "    }",
      "  }`,",
      "})",
      "${3:propertyOrFunction};"
    ]
  },
  "lwc-graphql-wire-reactive": {
    "prefix": "lwc-graphql-wire-reactive",
    "description": "Creates a GraphQL wire adapter and associated function to supply dynamic variables to the query.",
    "body": [
      "recordId;",
      "",
      "@wire(graphql, {",
      "  query: gql`",
      "    query ${1:queryName}(\\$recordId: Id) {",
      "      uiapi {",
      "        query {",
      "          ${2:sObjectName}(where: { Id: { eq: \\$recordId } }) {",
      "            edges {",
      "              node {",
      "                Id",
      "                Name {",
      "                  value",
      "                }",
      "                ${0}",
      "              }",
      "            }",
      "          }",
      "        }",
      "      }",
      "    }",
      "  `,",
      "  variables: \"\\$variables\", // Use a getter function to make the variables reactive",
      "})",
      "graphqlQueryResult({ data, errors }) {",
      "  if (data) {",
      "    this.records = data.uiapi.query.${2}.edges.map((edge) => edge.node);",
      "  }",
      "  this.errors = errors;",
      "}",
      "",
      "get variables() {",
      "  return {",
      "    recordId: this.recordId,",
      "  };",
      "}"
    ]
  },
  "lwc-imperative-apex": {
    "prefix": "lwc-imperative-apex",
    "description": "Creates an imperative Apex call",
    "body": [
      "${1:method name}()",
      "    .then(result => {",
      "        ${0}",
      "    })",
      "    .catch(error => {",
      "        // TODO Error handling",
      "    });"
    ]
  },
  "lwc-media-utils": {
    "prefix": "lwc-media-utils",
    "body": [
      "async ${1:handleFilesSelected}(event) {",
      "  try {",
      "      // Using the below options we resize images to a maximum of 2048x2048 pixels",
      "      // while containing their aspect ratio. By setting 'resizeStrategy' to 'reduce'",
      "      // we ensure that only images that have either width or height larger than",
      "      // 2048 pixels will be resized. Moreover, we've chosen not to preserve transparency",
      "      // in the input images and instead convert transparent pixels to white. Lastly,",
      "      // the images will be compressed with a 75% compression quality to reduce their byte size.",
      "      let options = {",
      "          resizeMode: \"${2|fill,contain,none|}\",",
      "          resizeStrategy: \"${3|always,enlarge,reduce|}\",",
      "          targetWidth: ${4:2048},",
      "          targetHeight: ${5:2048},",
      "          compressionQuality: ${6:0.75},",
      "          imageSmoothingEnabled: ${7|true,false|},",
      "          preserveTransparency: ${8|true,false|},",
      "          backgroundColor: \"${9:white}\"",
      "      };",
      "",
      "      for (const file of event.target.files) {",
      "          let blob = await processImage(file, options);",
      "          // here we can upload the data contained in the blob that is returned by processImage",
      "      }",
      "  } ",
      "  catch (error) {",
      "      console.error(\"ERROR: \", error)",
      "  }",
      "}"
    ],
    "description": "The mediaUtils library contains utility functions that can be used by an LWC developer to process media files."
  },
  "lwc-nav-item-page": {
    "prefix": "lwc-nav-item-page",
    "description": "Navigation to a CustomTab",
    "body": [
      "this[NavigationMixin.Navigate]({",
      "    type: \"standard__navItemPage\",",
      "    attributes: {",
      "        apiName: \"${1:The unique name of the CustomTab.}\"",
      "    }",
      "});"
    ]
  },
  "lwc-nav-knowledge-article": {
    "prefix": "lwc-nav-knowledge-article",
    "description": "Navigation to a Knowledge Article",
    "body": [
      "this[NavigationMixin.Navigate]({",
      "    type: \"standard__knowledgeArticlePage\",",
      "    attributes: {",
      "        articleType: \"${1:The articleType API name of the Knowledge Article record.}\",",
      "        urlName: \"${2:The value of the urlName field on the target KnowledgeArticleVersion record. The urlName is the article's URL.}\"",
      "    }",
      "});"
    ]
  },
  "lwc-nav-lightning-component": {
    "prefix": "lwc-nav-lightning-component",
    "description": "Navigation to a custom Lightning component",
    "body": [
      "this[NavigationMixin.Navigate]({",
      "    type: \"standard__component\",",
      "    attributes: {",
      "        componentName: \"c__${1:component name}\"",
      "    }",
      "});"
    ]
  },
  "lwc-nav-object-page": {
    "prefix": "lwc-nav-object-page",
    "description": "Navigation to an object page",
    "body": [
      "this[NavigationMixin.Navigate]({",
      "  type: \"standard__objectPage\",",
      "  attributes: {",
      "    actionName: \"${1|edit,home,list,new,view|}\",",
      "    objectApiName: \"${2:The API name of the standard or custom object. }\"",
      "  }",
      "});"
    ]
  },
  "lwc-nav-object-page-defaults": {
    "prefix": "lwc-nav-object-page-defaults",
    "description": "Navigation to a new object page with default values supplied",
    "body": [
      "const defaultValues = encodeDefaultFieldValues({",
      "  FirstName: \"Fluffy\",",
      "  LastName: \"McKittens\",",
      "  LeadSource: \"Other\"",
      "  ${0}",
      "});",
      "",
      "this[NavigationMixin.Navigate]({",
      "    type: \"standard__objectPage\",",
      "    attributes: {",
      "        actionName: \"new\",",
      "        objectApiName: \"${1:The API name of the standard or custom object. }\"",
      "    }",
      "    state: {",
      "      defaultFieldValues: defaultValues",
      "    }",
      "});"
    ]
  },
  "lwc-nav-page": {
    "prefix": "lwc-nav-page",
    "description": "Navigation to a named page",
    "body": [
      "this[NavigationMixin.Navigate]({",
      "    type: \"standard__namedPage\",",
      "    attributes: {",
      "        pageName: \"${1|home,chatter,today,dataAssessment,filePreview|}\"",
      "    }",
      "});"
    ]
  },
  "lwc-nav-record-page": {
    "prefix": "lwc-nav-record-page",
    "description": "Navigation to a record page",
    "body": [
      "this[NavigationMixin.Navigate]({",
      "    type: \"standard__recordPage\",",
      "    attributes: {",
      "        actionName: \"${1|clone,edit,view|}\",",
      "        recordId: \"${2:recordId}\",",
      "        objectApiName: \"${3:The API name of the record’s object. Optional for lookups.}\"",
      "    }",
      "});"
    ]
  },
  "lwc-nav-record-relationship-page": {
    "prefix": "lwc-nav-record-relationship-page",
    "description": "Navigation to a record relationship page",
    "body": [
      "this[NavigationMixin.Navigate]({",
      "    type: \"standard__recordRelationshipPage\",",
      "    attributes: {",
      "        actionName: \"view\",",
      "        recordId: \"${1:recordId}\",",
      "        objectApiName: \"${2:The API name of the record’s object. Optional for lookups.}\",",
      "        relationshipApiName: \"${3:The API name of the object’s relationship field (optional).}\"",
      "    }",
      "});"
    ]
  },
  "lwc-nav-web-page": {
    "prefix": "lwc-nav-web-page",
    "description": "Navigation to an external URL",
    "body": [
      "this[NavigationMixin.Navigate]({",
      "    type: \"standard__webPage\",",
      "    attributes: {",
      "       url: \"${1:The URL of the page you are navigating to.}\"",
      "    }",
      "});"
    ]
  },
  "lwc-prompt": {
    "prefix": "lwc-prompt",
    "body": [
      "LightningPrompt.open({",
      "  message: \"${1:this is the prompt message}\",",
      "  label: \"${2:Please Respond}\", // this is the header text",
      "  defaultValue: \"${3:initial input value}\", ",
      "  theme: \"${4|default,shade,inverse,alt-inverse,success,info,warning,error,offline|}\"",
      "  variant: \"${5|header,headerless|}\"",
      "}).then((result) => {",
      "  //Prompt has been closed",
      "  //result is input text if OK clicked",
      "  //and null if cancel was clicked",
      "});"
    ],
    "description": "Create a prompt modal within your component that asks the user to provide information before they continue."
  },
  "lwc-toast": {
    "prefix": "lwc-toast",
    "description": "Creates toast success function",
    "body": [
      "this.dispatchEvent(new ShowToastEvent({",
      "    title: \"${1:title}\",",
      "    message: \"${2:message}\",",
      "    variant: \"success\"",
      "}));"
    ]
  },
  "lwc-toast-error": {
    "prefix": "lwc-toast-error",
    "description": "Creates toast error function",
    "body": [
      "this.dispatchEvent(new ShowToastEvent({",
      "    title: \"${1:title}\",",
      "    message: \"${2:message}\",",
      "    variant: \"error\"",
      "}));"
    ]
  },
  "lwc-toast-warning": {
    "prefix": "lwc-toast-warning",
    "description": "Creates toast warning function",
    "body": [
      "this.dispatchEvent(new ShowToastEvent({",
      "    title: \"${1:title}\",",
      "    message: \"${2:message}\",",
      "    variant: \"warning\"",
      "}));"
    ]
  },

  "lwc-wire-apex-function": {
    "prefix": "lwc-wire-apex-function",
    "description": "Creates a @wire'd function for Apex with data modification",
    "body": [
      "@wire(${1:apex-method-name}, {$0})",
      "${2:apex-function-name} ({error, data}) {",
      "    if (error) {",
      "        // TODO: Error handling",
      "    } else if (data) {",
      "        // TODO: Data handling",
      "    }",
      "}"
    ]
  },
  "lwc-wire-apex-property": {
    "prefix": "lwc-wire-apex-property",
    "description": "Creates a @wire'd property for Apex",
    "body": ["@wire(${1:apex-method-name}, {$0})", "${2:apex-property-name}"]
  },
  "lwc-wire-get-record-function": {
    "prefix": "lwc-wire-get-record-function",
    "description": "Creates a @wire'd function for getRecord",
    "body": [
      "@api recordId;",
      "",
      "@wire(getRecord, { recordId: \"\\$recordId\", fields: [ $0 ] } )",
      "${2:record-function-name} ({error, data}) {",
      "    if (error) {",
      "        // TODO: Error handling",
      "    } else if (data) {",
      "        // TODO: Data handling",
      "    }",
      "}"
    ]
  },
  "lwc-wire-get-record-property": {
    "prefix": "lwc-wire-get-record-property",
    "description": "Creates a @wire'd property for getRecord",
    "body": [
      "@api recordId;",
      "",
      "@wire(getRecord, { recordId: \"\\$recordId\", fields: [ $0 ] } )",
      "${2:record-property-name}"
    ]
  },
  "lwc-wire-get-records-function": {
    "prefix": "lwc-wire-get-records-function",
    "description": "Creates a @wire'd function for getRecords",
    "body": [
      "@wire(getRecords, { records:[ { recordIds: [ $2 ], fields: [ $0 ] } ] } )",
      "${1:records-function-name} ({error, data}) {",
      "    if (error) {",
      "        // TODO: Error handling",
      "    } else if (data) {",
      "        // TODO: Data handling",
      "    }",
      "}"
    ]
  },
  "lwc-wire-get-records-property": {
    "prefix": "lwc-wire-get-records-property",
    "description": "Creates a @wire'd property for getRecords",
    "body": [
      "@api recordId;",
      "",
      "@wire(getRecords, { records:[ { recordIds: [ $2 ], fields: [ $0 ] } ] } )",
      "${1:records-property-name}"
    ]
  }
}
