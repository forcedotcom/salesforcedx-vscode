<?xml version="1.0" encoding="UTF-8"?>
<!-- Content of this file referenced from 
  https://developer.salesforce.com/docs/component-library/documentation/en/lwc/lwc.reference_configuration_tags-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://soap.sforce.com/2006/04/metadata" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://soap.sforce.com/2006/04/metadata">

  <xs:element name="LightningComponentBundle">
    <xs:complexType>
      <xs:all>
        <xs:element name="apiVersion" minOccurs="1" maxOccurs="1" type="xs:double">
          <xs:annotation>
            <xs:documentation xml:lang="en">A double value that binds the component to a Salesforce API version.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="capabilities" minOccurs="0" type="capabilities">
          <xs:annotation>
            <xs:documentation xml:lang="en">A capability is something that a component can do, as opposed to a target, which defines where you can use a component.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="description" minOccurs="0" maxOccurs="1" type="xs:string">
          <xs:annotation>
            <xs:documentation xml:lang="en">A short description of the component, usually a single sentence. Appears in list views, like the list of Lightning Components in Setup, and as a tooltip in the Lightning App Builder and in Experience Builder.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="isExposed" minOccurs="0" maxOccurs="1" type="xs:boolean">
          <xs:annotation>
            <xs:documentation xml:lang="en">If isExposed is false, the component is not exposed to Lightning App Builder or Experience Builder. To allow the component to be used in Lightning App Builder or Experience Builder, set isExposed to true and define at least one &lt; target &gt;, which is a type of Lightning page.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="masterLabel" minOccurs="0" maxOccurs="1" type="xs:string">
          <xs:annotation>
            <xs:documentation xml:lang="en">The title of the component. Appears in list views, like the list of Lightning Components in Setup, and in the Lightning App Builder and in Experience Builder.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element type="targets" name="targets" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation xml:lang="en">Specifies where the component can be added, such as on a type of Lightning Page or in Embedded Service Chat. If you want your component to appear in the Lightning App Builder or in Experience Builder, specify at least one Lightning page type.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element type="targetConfigs" name="targetConfigs" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation xml:lang="en">Configure the component for different page types and define component properties. For example, a component could have different properties on a record home page than on the Salesforce Home page or on an app page. For Communities, only lightningCommunity__Default supports component properties. Supports the targetConfig subtag.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:all>
      <xs:attribute name="fqn" />
    </xs:complexType>
  </xs:element>
  <!-- capabilities XSD-->
  <xs:complexType name="capabilities">
    <xs:sequence>
      <xs:element name="capability" maxOccurs="unbounded" minOccurs="1">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="lightningCommunity__RelaxedCSP">
              <xs:annotation>
                <xs:documentation>Enables a component installed from a managed package to run in a community that has Lightning Locker disabled. This setting allows managed package developers to opt in to running their Lightning web components in a community with Lightning Locker disabled.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!-- targets XSD-->
  <xs:complexType name="targets">
    <xs:sequence>
      <xs:element name="target" maxOccurs="unbounded" minOccurs="1">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="lightning__AppPage">
              <xs:annotation>
                <xs:documentation>Enables a component to be used on an App page in Lightning App Builder.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="lightning__HomePage">
              <xs:annotation>
                <xs:documentation>Enables a component to be used on a Home page in Lightning App Builder.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="lightning__RecordPage">
              <xs:annotation>
                <xs:documentation>Enables a component to be used on a record page in Lightning App Builder.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="lightning__UtilityBar">
              <xs:annotation>
                <xs:documentation>Enables a component to be used as a utility item on the utility bar in the App Manager.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="lightning__FlowScreen">
              <xs:annotation>
                <xs:documentation>Enables a component to be used on flow screens in Flow Builder.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="lightning__Tab">
              <xs:annotation>
                <xs:documentation>Enables a component to be used in a custom tab in Lightning Experience or the Salesforce mobile app.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="lightning__Inbox">
              <xs:annotation>
                <xs:documentation>Enables a component to be used in Lightning App Builder to add to email application panes for the Outlook and Gmail integrations.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="lightningStatic__Email">
              <xs:annotation>
                <xs:documentation>Enables a component to be used in Email Template Builder.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="lightningCommunity__Page">
              <xs:annotation>
                <xs:documentation>Enables a component to be used on a Lightning community page in Experience Builder.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="lightningCommunity__Default">
              <xs:annotation>
                <xs:documentation>Used together with lightningCommunity__Page. Enables a component that includes configurable properties to be used on a Lightning community page in Experience Builder. When the component is selected on the page, the properties appear.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="lightningSnapin__ChatMessage">
              <xs:annotation>
                <xs:documentation>Enables a custom chat message component to be selected from Embedded Service Chat Setup. A component that imports the lightningsnapin/baseChatMessage module must specify the lightningSnapin__ChatMessage target. For more information, see the lightningsnapin/baseChatMessage documentation.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="lightningSnapin__Minimized">
              <xs:annotation>
                <xs:documentation>Enables a custom minimized component to be selected from Embedded Service Chat Setup. A component that imports the lightningsnapin/minimized module must specify the lightningSnapin__Minimized target. For more information, see the lightningsnapin/minimized documentation.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="lightningSnapin__PreChat">
              <xs:annotation>
                <xs:documentation>Enables a custom prechat component to be selected from Embedded Service Chat Setup. A component that imports the lightningsnapin/basePrechat module must specify the lightningSnapin__PreChat target. For more information, see the lightningsnapin/basePrechat documentation.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="lightningSnapin__ChatHeader">
              <xs:annotation>
                <xs:documentation>Enables a custom chat header component to be selected from Embedded Service Chat Setup. A component that imports the lightningsnapin/baseChatHeader module must specify that lightningSnapin__ChatHeader target. For more information, see the lightningsnapin/baseChatHeader documentation.</xs:documentation>
              </xs:annotation>

            </xs:enumeration>
             <xs:enumeration value="lightning__RecordAction">
              <xs:annotation>
                <xs:documentation>Makes Lightning web component record action available for quick action.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="lightning__GlobalAction">
              <xs:annotation>
                <xs:documentation>Makes Lightning web component global action available for quick action.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!-- objects XSD-->
  <xs:complexType name="objects">
    <xs:annotation>
      <xs:documentation>Limits the component to a set of one or more objects. If you don’t use this tag set, the component supports all supported objects. This tag set works only inside a parent targetConfig that’s configured for lightning__RecordPage. Specify the objects tag set only once inside a targetConfig set. Supports the object subtag.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element type="xs:string" name="object" maxOccurs="unbounded" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Defines which objects the component is supported for. Use one object tag for each supported object. See the User Interface API Developer Guide for the list of supported objects.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!-- property XSD-->
  <xs:complexType name="property">
    <xs:annotation>
      <xs:documentation>Specifies a public property of a component that can be set in Lightning App Builder, App Manager, Lightning Flow Builder, or Experience Builder. The component author defines the property in the component’s JavaScript class using the @api decorator.</xs:documentation>
    </xs:annotation>
    <xs:attribute type="xs:string" name="datasource" use="optional">
      <xs:annotation>
        <xs:documentation>Renders a field as a picklist, with static values. Supported only if the type attribute is String. You can also set the picklist values dynamically using an Apex class. See Create Dynamic Picklists for Your Custom Components in the documentation for more information.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="xs:string" name="default" use="optional">
      <xs:annotation>
        <xs:documentation>The default value for the attribute.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="xs:string" name="description" use="optional">
      <xs:annotation>
        <xs:documentation>Displays as an i-bubble for the attribute in the tool.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="xs:string" name="label" use="optional">
      <xs:annotation>
        <xs:documentation>Displays as a label for the attribute in the tool.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="xs:integer" name="max" use="optional">
      <xs:annotation>
        <xs:documentation>The maximum allowed value for an attribute of type Integer. Not supported if the target is lightning__FlowScreen.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="xs:integer" name="min" use="optional">
      <xs:annotation>
        <xs:documentation>The minimum allowed value for an attribute of type Integer. Not supported if the target is lightning__FlowScreen.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="xs:string" name="name" use="required">
      <xs:annotation>
        <xs:documentation>Required if you’re setting properties for your component. The attribute name. This value must match the property name in the component’s JavaScript class.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="xs:string" name="placeholder" use="optional">
      <xs:annotation>
        <xs:documentation>Input placeholder text for the attribute when it displays in the tool. This text is the ghost text in text fields and text areas before a user starts typing. Supported only if the type attribute is String. Not supported if the target is lightning__FlowScreen.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="xs:string" name="required" use="optional">
      <xs:annotation>
        <xs:documentation>Specifies whether the attribute is required. The default value is false.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="xs:string" name="role" use="optional">
      <xs:annotation>
        <xs:documentation>Specifies whether the attribute is inputOnly or outputOnly. If you don’t specify the role attribute, the default value allows input and output. For example, if a property is restricted to outputOnly, users can’t set its value from a Lightning record page. Supported only if the target is lightning__FlowScreen. If you don’t set the role attribute, or if you set it to inputOnly, the property is exposed in a custom property editor. If you set it to outputOnly, the property isn’t exposed in a custom property editor.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="xs:string" name="type" use="required">
      <xs:annotation>
        <xs:documentation>The attribute’s data type. Please refer to the documentation for all supported types for different targets.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!-- supportedFormFactors XSD-->
  <xs:complexType name="supportedFormFactors">
    <xs:annotation>
      <xs:documentation>A set of one or more form factors or devices that the component supports. Specify the supportedFormFactors tag set once inside a targetConfig set. Supports the supportedFormFactor subtag.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="supportedFormFactor" maxOccurs="unbounded" minOccurs="1">
        <xs:complexType>
          <xs:annotation>
            <xs:documentation>Defines which form factor or device the component supports. Use one supportedFormFactor tag for each supported form factor.</xs:documentation>
          </xs:annotation>
          <xs:attribute type="supportedFormFactortype" name="type" use="required">
            <xs:annotation>
              <xs:documentation>Device form factor on which the component displays.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!-- supportedFormFactortype XSD-->
  <xs:simpleType name="supportedFormFactortype">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Large">
        <xs:annotation>
          <xs:documentation>Represents the desktop form factor. Supported for all page types.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Small">
        <xs:annotation>
          <xs:documentation>Represents the phone form factor. Supported for lightning__AppPage and lightning__RecordPage only.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <!-- supportedActionType XSD -->
  <xs:simpleType name="actionType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ScreenAction">
        <xs:annotation>
          <xs:documentation>Represents screen action.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Action">
        <xs:annotation>
          <xs:documentation>Represents headless action.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <!-- targetConfigs XSD-->
  <xs:complexType name="targetConfigs">
    <xs:annotation>
      <xs:documentation>Configure the component for different page types and define component properties. For example, a component could have different properties on a record home page than on the Salesforce Home page or on an app page. For Communities, only lightningCommunity__Default supports component properties. Supports the targetConfig subtag.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="targetConfig" maxOccurs="unbounded" minOccurs="0">
        <xs:complexType>
          <xs:annotation>
            <xs:documentation>Use a separate targetConfig for each different page type configuration.</xs:documentation>
          </xs:annotation>
          <xs:sequence>
            <xs:element type="objects" name="objects" minOccurs="0" />
            <xs:element type="property" name="property" minOccurs="0" maxOccurs="unbounded" />
            <xs:element type="supportedFormFactors" name="supportedFormFactors" minOccurs="0" />
          </xs:sequence>
          <xs:attribute type="xs:string" name="configurationEditor" use="optional">
            <xs:annotation>
              <xs:documentation>Registers a custom property editor for a flow screen component. A custom property editor is a Lightning web component that provides a custom UI for configuring a custom flow screen component’s input attributes.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute type="xs:string" name="targets" use="required">
            <xs:annotation>
              <xs:documentation>The targets attribute value that you specify must match one or more of the page types that you listed under &lt; targets &gt; for the component.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

</xs:schema>