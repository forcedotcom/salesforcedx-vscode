({
  "label": "aura:application",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "An app is a special top-level component whose markup is in a .app file. The markup looks similar to HTML and can contain components as well as a set of supported HTML tags. The .app file is a standalone entry point for the app and enables you to define the overall application layout, style sheets, and global JavaScript includes. It starts with the top-level <aura:application> tag, which contains optional system attributes. These system attributes tell the framework how to configure the app.\n### Attributes\n* **abstract**: *Boolean* Set to true if the component is abstract. The default is false.\n* **access**: *String* Indicates whether the app can be extended by another app outside of a namespace. Possible values are internal (default), public, and global.\n* **description**: *String* A brief description of the app.\n* **extends**: *Component* The app to be extended, if applicable. For example, extends='namespace:yourApp'.\n* **extensible**: *Boolean* Indicates whether the app is extensible by another app. Defaults to false.\n* **implements**: *String* A comma-separated list of interfaces that the app implements.\n* **locationChangeEvent**: *Event* The framework monitors the location of the current window for changes. If the # value in a URL changes, the framework fires an application event. The locationChangeEvent defines this event. The default value is aura:locationChange. The locationChange event has a single attribute called token, which is set with everything after the # value in the URL.\n* **preload**: *String*\n* **render**: *String* Renders the component using client-side or server-side renderers. If not provided, the framework determines any dependencies and whether the application should be rendered client-side or server-side. Valid options are client or server. The default is auto. For example, specify render='client' if you want to inspect the application on the client-side during testing.\n* **support**: *String* The support level for the component. Valid options are PROTO, DEPRECATED, BETA, or GA.\n* **template**: *Component* The name of the template used to bootstrap the loading of the framework and the app. The default value is aura:template. You can customize the template by creating your own component that extends the default template. For example: <aura:component extends='aura:template' ... >\n* **whitespace**: *String* Preserves or removes unnecessary whitespace in the component markup. Valid options are preserve or optimize. The default is optimize.\n",
    "_isTrusted": false
  },
  "insertText": "aura:application",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "aura:application"
  }
},
{
  "label": "aura:attribute",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "aura:attribute describes an attribute available on an app, interface, component, or event.\n### Attributes\n* **access**: *String* Indicates whether the attribute can be used outside of its own namespace. Possible values are internal (default), private, public, and global.\n* **default**: *String* The default value for the attribute, which can be overwritten as needed. When setting a default value, expressions using the $Label, $Locale, and $Browser global value providers are supported. Alternatively, to set a dynamic default, use an init event. See <a href='http://aura-oss-dev.herokuapp.com/en-us/main/aura-oss/js_cb_init_handler.htm'>Invoking Actions on Component Initialization</a>\n* **description**: *String* A summary of the attribute and its usage.\n* **name**: *String* Required. The name of the attribute. For example, if you set <aura:attribute name='isTrue' type='Boolean' /> on a component called aura:newCmp, you can set this attribute when you instantiate the component; for example,<aura:newCmp isTrue='false' />.\n* **required**: *Boolean* Determines if the attribute is required. The default is false.\n* **type**: *String* Required. The type of the attribute. For a list of basic types supported, see <a href='http://aura-oss-dev.herokuapp.com/en-us/main/aura-oss/ref_attr_types_basic.htm'>Basic Types</a>\n",
    "_isTrusted": false
  },
  "sortText": "aura:attribute",
  "insertText": "aura:attribute",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "aura:attribute"
  }
},
{
  "label": "aura:component",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "The root of the component hierarchy. Provides a default rendering implementation.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n",
    "_isTrusted": false
  },
  "sortText": "aura:component",
  "insertText": "aura:component",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "aura:component"
  }
},
{
  "label": "aura:dependency",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "The <aura:dependency> tag enables you to declare dependencies that can't easily be discovered by the framework. The framework automatically tracks dependencies between definitions, such as components. This enables the framework to automatically reload when it detects that you've changed a definition during development. However, if a component uses a client- or server-side provider that instantiates components that are not directly referenced in the component’s markup, use <aura:dependency> in the component’s markup to explicitly tell the framework about the dependency. Adding the <aura:dependency> tag ensures that a component and its dependencies are sent to the client, when needed. For example, adding this tag to a component marks the aura:placeholder component as a dependency.\n### Attributes\n* **description**: *String* The description of this dependency.\n* **resource**: *String* The resource that the component depends on. For example, resource='markup://sampleNamespace:sampleComponent' refers to the sampleComponent in the sampleNamespace namespace. Use an asterisk (*) in the resource name for wildcard matching. For example, resource='markup://sampleNamespace:*' matches everything in the namespace; resource='markup://sampleNamespace:input*' matches everything in the namespace that starts with input. Don’t use an asterisk (*) in the namespace portion of the resource name. For example, resource='markup://sample*:sampleComponent' is not supported.\n* **type**: *String* The type of resource that the component depends on. The default value is COMPONENT. Use type='*' to match all types of resources. The most commonly used values are: COMPONENT, APPLICATION, EVENT. Use a comma-separated list for multiple types; for example: COMPONENT,APPLICATION.\n",
    "_isTrusted": false
  },
  "sortText": "aura:dependency",
  "insertText": "aura:dependency",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "aura:dependency"
  }
},
{
  "label": "aura:event",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "An event is represented by the aura:event tag, which has the following attributes.\n### Attributes\n* **access**: *String* Indicates whether the event can be extended or used outside of its own namespace. Possible values are internal (default), public, and global.\n* **description**: *String* A description of the event.\n* **extends**: *Component* The event to be extended. For example, extends='namespace:myEvent'.\n* **support**: *String* The support level for the event. Valid options are PROTO, DEPRECATED, BETA, or GA.\n* **type**: *String* Required. Possible values are COMPONENT or APPLICATION.\n",
    "_isTrusted": false
  },
  "sortText": "aura:event",
  "insertText": "aura:event",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "aura:event"
  }
},
{
  "label": "aura:expression",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Renders the value to which an expression evaluates. Creates an instance of this component which renders the                         referenced \"property reference value\" set to the value attribute when expressions are found in free text or markup.\n### Attributes\n* **value**: *string* The expression to evaluate and render.\n",
    "_isTrusted": false
  },
  "sortText": "aura:expression",
  "insertText": "aura:expression",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "aura:expression"
  }
},
{
  "label": "aura:handler",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A client-side controller handles events within a component. It’s a JavaScript file that defines the functions for all of the component's actions.\n### Attributes\n* **action**: *String* The client-side controller action that handles the value change. Example: action='{!c.handleApplicationEvent}'\n* **description**: *String* The description of the handler\n* **event**: *String* The event name to be handled. Example: event='namespace:MyEvent'\n* **name**: *String* The name of the handler. Example: name='init'.\n* **value**: *String* The value that is initialized, for example {!this}.\n",
    "_isTrusted": false
  },
  "sortText": "aura:handler",
  "insertText": "aura:handler",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "aura:handler"
  }
},
{
  "label": "aura:html",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A meta component that represents all html elements.  Any html found in your markup causes the creation of one of these.\n### Attributes\n* **body**: *component[]* The body of the component.  In markup, this is everything in the body of the tag.\n* **HTMLAttributes**: *map* A Map of attributes to set on the html element.\n* **tag**: *string* The name of the html element that should be rendered.\n",
    "_isTrusted": false
  },
  "sortText": "aura:html",
  "insertText": "aura:html",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "aura:html"
  }
},
{
  "label": "aura:if",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Conditionally instantiates and renders either the body or the components in the else attribute.\n### Attributes\n* **body**: *componentdefref[]* The components to render when isTrue evaluates to true.\n* **else**: *componentdefref[]* The alternative to render when isTrue evaluates to false, and the body is not rendered.  Should always be set using the aura:set tag.\n* **isTrue**: *boolean* An expression that must be fulfilled in order to display the body.\n",
    "_isTrusted": false
  },
  "sortText": "aura:if",
  "insertText": "aura:if",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "aura:if"
  }
},
{
  "label": "aura:interface",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Object-oriented languages, such as Java, support the concept of an interface that defines a set of method signatures. A class that implements the interface must provide the method implementations. An interface in Java can't be instantiated directly, but a class that implements the interface can. Similarly, Aura supports the concept of interfaces that define a component's shape by defining its attributes.\n### Attributes\n* **access**: *String* Indicates whether the interface can be extended or used outside of its own namespace. Possible values are internal (default), public, and global.\n* **description**: *String* A description of the interface.\n* **extends**: *Component* The comma-seperated list of interfaces to be extended. For example, extends='namespace:intfB'\n* **support**: *String* The support level for the interface. Valid options are PROTO, DEPRECATED, BETA, or GA.\n",
    "_isTrusted": false
  },
  "sortText": "aura:interface",
  "insertText": "aura:interface",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "aura:interface"
  }
},
{
  "label": "aura:iteration",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Renders a view of a collection of items. Supports iterations containing components that can be created exclusively on the client-side.\n### Attributes\n* **body**: *componentdefref[]* Template to use when creating components for each iteration.\n* **end**: *integer* The index of the collection to stop at (exclusive)\n* **indexVar**: *string* The name of variable to use for the index of each item inside the iteration\n* **items**: *list* The collection of data to iterate over\n* **loaded**: *boolean* True if the iteration has finished loading the set of templates.\n* **start**: *integer* The index of the collection to start at (inclusive)\n* **template**: *componentdefref[]* The template that is used to generate components. By default, this is set from the body markup on first load.\n* **var**: *string* The name of the variable to use for each item inside the iteration\n",
    "_isTrusted": false
  },
  "sortText": "aura:iteration",
  "insertText": "aura:iteration",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "aura:iteration"
  }
},
{
  "label": "aura:method",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Use <aura:method> to define a method as part of a component's API. This enables you to directly call a method in a component’s client-side controller instead of firing and handling a component event. Using <aura:method> simplifies the code needed for a parent component to call a method on a child component that it contains.\n### Attributes\n* **access**: *String* The access control for the method. Valid values are: internal (system namespaces), public (same namespace), global (any namespace)\n* **action**: *String* The client-side controller action to execute. For example: action='{!c.sampleAction}''. sampleAction is an action in the client-side controller. If you don’t specify an action value, the controller action defaults to the value of the method name.\n* **description**: *String* The method description.\n* **name**: *String* The method name. Use the method name to call the method in JavaScript code. For example: cmp.sampleMethod(param1);\n",
    "_isTrusted": false
  },
  "sortText": "aura:method",
  "insertText": "aura:method",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "aura:method"
  }
},
{
  "label": "aura:registerEvent",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Registers an event that your component will fire as part of its lifecycle.\n### Attributes\n* **description**: *String* The description of this registered event\n* **name**: *String* The name this registered event will be referred to by. Example: type='myEvent'. You can now access this event by calling component.get('e.myEvent')\n* **type**: *String* The event that this component may fire. Example: type='force:showQuickAction'\n",
    "_isTrusted": false
  },
  "sortText": "aura:registerEvent",
  "insertText": "aura:registerEvent",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "aura:registerEvent"
  }
},
{
  "label": "aura:renderIf",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Deprecated. Use aura:if instead. This component allows you to conditionally render its contents. It renders its body only if isTrue evaluates to true. The else attribute allows you to render an alternative when isTrue evaluates to false.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **else**: *component[]* The alternative content to render when isTrue evaluates to false, and the body is not rendered. Set using the <aura:set> tag.\n* **isTrue**: *boolean* An expression that must evaluate to true to display the body of the component.\n",
    "_isTrusted": false
  },
  "sortText": "aura:renderIf",
  "insertText": "aura:renderIf",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "aura:renderIf"
  }
},
{
  "label": "aura:rootComponent",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "This is a marker interface for top-level components like aura:component, aura:expression, and aura:html\n### Attributes\n",
    "_isTrusted": false
  },
  "sortText": "aura:rootComponent",
  "insertText": "aura:rootComponent",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "aura:rootComponent"
  }
},
{
  "label": "aura:set",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Use <aura:set> in markup to set the value of an attribute inherited from a super component, event, or interface.\n### Attributes\n* **attribute**: *String* The attribute name to set\n* **value**: *String* The value to set on this attribute\n",
    "_isTrusted": false
  },
  "sortText": "aura:set",
  "insertText": "aura:set",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "aura:set"
  }
},
{
  "label": "aura:template",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Default template used to bootstrap Aura framework. To use another template, extend aura:template and set attributes using aura:set.\n### Attributes\n* **auraPreInitBlock**: *component[]* The block of content that is rendered before Aura initialization.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **bodyClass**: *string* Extra body CSS styles\n* **defaultBodyClass**: *string* Default body CSS styles.\n* **doctype**: *string* The DOCTYPE declaration for the template.\n* **errorMessage**: *string* Error loading text\n* **errorTitle**: *string* Error title when an error has occured.\n* **loadingText**: *string* Loading text\n* **title**: *string* The title of the template.\n",
    "_isTrusted": false
  },
  "sortText": "aura:template",
  "insertText": "aura:template",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "aura:template"
  }
},
{
  "label": "aura:text",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Renders plain text.  When any free text (not a tag or attribute value) is found in markup, an instance of this component is created with the value attribute set to the text found in the markup.\n### Attributes\n* **value**: *string* The String to be rendered.\n",
    "_isTrusted": false
  },
  "sortText": "aura:text",
  "insertText": "aura:text",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "aura:text"
  }
},
{
  "label": "aura:unescapedHtml",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "The value assigned to this component will be rendered as-is, without altering its contents. It's intended for outputting pre-formatted HTML, for example, where the formatting is arbitrary, or expensive to calculate. The body of this component is ignored, and won't be rendered. Warning: this component outputs value as unescaped HTML, which introduces the possibility of security vulnerabilities in your code. You must sanitize user input before rendering it unescaped, or you will create a cross-site scripting (XSS) vulnerability. Only use <aura:unescapedHtml> with trusted or sanitized sources of data.\n### Attributes\n* **body**: *component[]* The body of <aura:unescapedHtml> is ignored and won't be rendered.\n* **value**: *string* The string that should be rendered as unescaped HTML.\n",
    "_isTrusted": false
  },
  "sortText": "aura:unescapedHtml",
  "insertText": "aura:unescapedHtml",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "aura:unescapedHtml"
  }
},
{
  "label": "c:DemoApp",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": { "_value": "\n### Attributes\n", "_isTrusted": false },
  "sortText": "c:DemoApp",
  "insertText": "c:DemoApp",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "c:DemoApp"
  }
},
{
  "label": "c:DemoComponent",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": { "_value": "\n### Attributes\n", "_isTrusted": false },
  "sortText": "c:DemoComponent",
  "insertText": "c:DemoComponent",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "c:DemoComponent"
  }
},
{
  "label": "c:demoLwcComponent",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": { "_value": "\n### Attributes\n", "_isTrusted": false },
  "sortText": "c:demoLwcComponent",
  "insertText": "c:demoLwcComponent",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "c:demoLwcComponent"
  }
},
{
  "label": "clients:availableForMailAppAppPage",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Marker Interface that allows components to show up in the Lightning for Gmail or Lightning For Outlook Flexipages\n### Attributes\n",
    "_isTrusted": false
  },
  "sortText": "clients:availableForMailAppAppPage",
  "insertText": "clients:availableForMailAppAppPage",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "clients:availableForMailAppAppPage"
  }
},
{
  "label": "clients:hasEventContext",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Context for event information. Use this interface to interact with the mail clients.\n### Attributes\n* **dates**: *object* READONLY - An object representing the item context pertinent to the appointment.\n* **location**: *string* READONLY - The location of the current event.\n",
    "_isTrusted": false
  },
  "sortText": "clients:hasEventContext",
  "insertText": "clients:hasEventContext",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "clients:hasEventContext"
  }
},
{
  "label": "clients:hasItemContext",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Context Shape for Email / Event Components. Use this interface to interact with the mail clients.\n### Attributes\n* **messageBody**: *string* READONLY - The body of the current item in plain text\n* **mode**: *string* READONLY - An enum indicating the mode of the item. Possible values are 'view', 'edit'\n* **people**: *object* READONLY - An object representing the contacts on the current item.\n* **source**: *string* READONLY - An enum indicating where the source is coming from. Possible values are 'email', 'event'\n* **subject**: *string* READONLY - The subject of the current item.\n",
    "_isTrusted": false
  },
  "sortText": "clients:hasItemContext",
  "insertText": "clients:hasItemContext",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "clients:hasItemContext"
  }
},
{
  "label": "design:component",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "\n### Attributes\n* **label**: *String*\n",
    "_isTrusted": false
  },
  "sortText": "design:component",
  "insertText": "design:component",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "design:component"
  }
},
{
  "label": "flexipage:availableForAllPageTypes",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Marks a component as being able to be used inside a Lightning App Builder page\n### Attributes\n",
    "_isTrusted": false
  },
  "sortText": "flexipage:availableForAllPageTypes",
  "insertText": "flexipage:availableForAllPageTypes",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "flexipage:availableForAllPageTypes"
  }
},
{
  "label": "flexipage:availableForRecordHome",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Able to be used inside a Record Home Lightning App Builder page\n### Attributes\n",
    "_isTrusted": false
  },
  "sortText": "flexipage:availableForRecordHome",
  "insertText": "flexipage:availableForRecordHome",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "flexipage:availableForRecordHome"
  }
},
{
  "label": "force:appHostable",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": { "_value": "null\n### Attributes\n", "_isTrusted": false },
  "sortText": "force:appHostable",
  "insertText": "force:appHostable",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "force:appHostable"
  }
},
{
  "label": "force:canvasApp",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Enables you to include a Force.com Canvas app in a Lightning component.\n### Attributes\n* **applicationName**: *string* Name or label of the canvas app. Used to display the app's name while Canvas is loading.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **border**: *string* Width of the canvas app border, in pixels. If not specified, defaults to 0 px.\n* **canvasId**: *string* An unique label within a page for the Canvas app window. This should be used when targeting events to this canvas app.\n* **containerId**: *string* An html element id in which canvas app is rendered. The container needs to be defined before canvasApp cmp usage.\n* **developerName**: *string* API name of the canvas app. This name is defined when the canvas app is created and can be viewed in the Canvas App Previewer. Either developerName or referenceId is required.\n* **displayLocation**: *string* The location in the application where the canvas app is currently being called from.\n* **height**: *string* Canvas app window height, in pixels. If not specified, defaults to 900 px.\n* **maxHeight**: *string* The maximum height of the Canvas app window in pixels. Defaults to 2000 px; 'infinite' is also a valid value.\n* **maxWidth**: *string* The maximum width of the Canvas app window in pixels. Defaults to 1000 px; 'infinite' is also a valid value.\n* **namespacePrefix**: *string* Namespace value of the Developer Edition organization in which the canvas app was created. Optional if the canvas app wasn’t created in a Developer Edition organization. If not specified, defaults to null.\n* **onCanvasAppError**: *string* Name of the JavaScript function to be called if the canvas app fails to render.\n* **onCanvasAppLoad**: *string* Name of the JavaScript function to be called after the canvas app loads.\n* **onCanvasSubscribed**: *string* Name of the JavaScript function to be called after the canvas app registers with the parent.\n* **parameters**: *string* Object representation of parameters passed to the canvas app. This should be supplied in JSON format or as a JavaScript object literal. Here’s an example of parameters in a JavaScript object literal: {param1:'value1',param2:'value2'}. If not specified, defaults to null.\n* **referenceId**: *string* The referenceId attribute is deprecated. Use developerName instead.\n* **scrolling**: *string* Canvas window scrolling\n* **sublocation**: *string* The sublocation is the location in the application where the canvas app is currently being called from, for ex, displayLocation can be PageLayout and sublocation can be S1MobileCardPreview or S1MobileCardFullview, etc\n* **title**: *string* Title for the link\n* **watermark**: *boolean* Renders a link if set to true\n* **width**: *string* Canvas app window width, in pixels. If not specified, defaults to 800 px.\n",
    "_isTrusted": false
  },
  "sortText": "force:canvasApp",
  "insertText": "force:canvasApp",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "force:canvasApp"
  }
},
{
  "label": "force:hasRecordId",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "This interface is used to indicate that a component takes a record (SObject) as an attribute.\n### Attributes\n* **recordId**: *string* The record Id\n",
    "_isTrusted": false
  },
  "sortText": "force:hasRecordId",
  "insertText": "force:hasRecordId",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "force:hasRecordId"
  }
},
{
  "label": "force:hasSObjectName",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "This interface is used to indicate that a component has SObject name attribute\n### Attributes\n* **sObjectName**: *string* sObject name\n",
    "_isTrusted": false
  },
  "sortText": "force:hasSObjectName",
  "insertText": "force:hasSObjectName",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "force:hasSObjectName"
  }
},
{
  "label": "force:inputField",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A component that provides a concrete type-specific input component implementation based on the data to which it is bound.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* The CSS style used to display the field.\n* **errorComponent**: *component[]* For internal use only. Displays error messages for the field.\n* **required**: *boolean* Specifies whether this field is required or not.\n* **value**: *object* Data value of Salesforce field to which to bind.\n",
    "_isTrusted": false
  },
  "sortText": "force:inputField",
  "insertText": "force:inputField",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "force:inputField"
  }
},
{
  "label": "force:lightningQuickAction",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": { "_value": "null\n### Attributes\n", "_isTrusted": false },
  "sortText": "force:lightningQuickAction",
  "insertText": "force:lightningQuickAction",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "force:lightningQuickAction"
  }
},
{
  "label": "force:lightningQuickActionWithoutHeader",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": { "_value": "null\n### Attributes\n", "_isTrusted": false },
  "sortText": "force:lightningQuickActionWithoutHeader",
  "insertText": "force:lightningQuickActionWithoutHeader",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "force:lightningQuickActionWithoutHeader"
  }
},
{
  "label": "force:outputField",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A component that provides a concrete type-specific output component implementation based on the data to which it is bound.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **value**: *object* Data value of Salesforce field to which to bind.\n",
    "_isTrusted": false
  },
  "sortText": "force:outputField",
  "insertText": "force:outputField",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "force:outputField"
  }
},
{
  "label": "force:recordData",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Provides the ability to create, read, update, and delete Salesforce records in Lightning.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **fields**: *string[]* Specifies which of the record's fields to query.\n* **layoutType**: *string* Name of the layout to query, which determines the fields included. Valid values are FULL or COMPACT. The layoutType and/or fields attribute must be specified.\n* **mode**: *string* The mode in which to load the record: VIEW (default) or EDIT.\n* **recordId**: *string* The record Id\n* **targetError**: *string* Will be set to the localized error message if the record can't be provided.\n* **targetFields**: *object* A simplified view of the fields in targetRecord, to reference record fields in component markup.\n* **targetRecord**: *object* The provided record. This attribute will contain only the fields relevant to the requested layoutType and/or fields atributes.\n",
    "_isTrusted": false
  },
  "sortText": "force:recordData",
  "insertText": "force:recordData",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "force:recordData"
  }
},
{
  "label": "force:recordEdit",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Generates an editable view of the specified Salesforce record.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **recordId**: *string* The Id of the record to load.\n",
    "_isTrusted": false
  },
  "sortText": "force:recordEdit",
  "insertText": "force:recordEdit",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "force:recordEdit"
  }
},
{
  "label": "force:recordView",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Generates a view of the specified Salesforce record.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **record**: *sobject* The record (SObject) to load, optional if recordId attribute is specified.\n* **recordId**: *string* The Id of the record to load, optional if record attribute is specified.\n* **type**: *string* The type of layout to use to display the record. The default is FULL, and is the only valid type.\n",
    "_isTrusted": false
  },
  "sortText": "force:recordView",
  "insertText": "force:recordView",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "force:recordView"
  }
},
{
  "label": "forceChatter:feed",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a Chatter Feed\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **feedDesign**: *string* Valid values include DEFAULT ( shows inline comments on desktop, a bit more detail ) or BROWSE ( primarily an overview of the feed items )\n* **subjectId**: *string* For most feeds tied to an entity, this is used specified the desired entity. Defaults to the current user if not specified\n* **type**: *string* The strategy used to find items associated with the subject. Valid values include: Bookmarks, Company, DirectMessages, Feeds, Files, Filter, Groups, Home, Moderation, Mute, News, PendingReview, Record, Streams, To, Topics, UserProfile.\n",
    "_isTrusted": false
  },
  "sortText": "forceChatter:feed",
  "insertText": "forceChatter:feed",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "forceChatter:feed"
  }
},
{
  "label": "forceChatter:fullFeed",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "null\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **handleNavigationEvents**: *boolean* Should this component handle navigation events for entities and urls. If true then navigation events will result in the entity or url being opened in a new window.\n* **subjectId**: *string* For most feeds tied to an entity, this is used specified the desired entity. Defaults to the current user if not specified\n* **type**: *string* The strategy used to find items associated with the subject. Valid values include: News, Home, Record, To.\n",
    "_isTrusted": false
  },
  "sortText": "forceChatter:fullFeed",
  "insertText": "forceChatter:fullFeed",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "forceChatter:fullFeed"
  }
},
{
  "label": "forceChatter:publisher",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Lets users create posts on records or groups and upload attachments from their desktops in Lightning Experience and communities and from their mobile devices in communities. Note that this component is not available to mobile devices in Lightning Experience.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **context**: *string* The context in which the component is being displayed (RECORD or GLOBAL). RECORD is for a record feed, and GLOBAL is for all other feed types. This attribute is case-sensitive.\n* **recordId**: *string* The record Id\n",
    "_isTrusted": false
  },
  "sortText": "forceChatter:publisher",
  "insertText": "forceChatter:publisher",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "forceChatter:publisher"
  }
},
{
  "label": "forceCommunity:appLauncher",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays the App Launcher in Lightning communities to make it easy for members to move between their communities and their Salesforce org.      Add this component to any custom Lightning component in communities.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n",
    "_isTrusted": false
  },
  "sortText": "forceCommunity:appLauncher",
  "insertText": "forceCommunity:appLauncher",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "forceCommunity:appLauncher"
  }
},
{
  "label": "forceCommunity:availableForAllPageTypes",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Enables a component for drag and drop in the Lightning Components panel in Community Builder.\n### Attributes\n",
    "_isTrusted": false
  },
  "sortText": "forceCommunity:availableForAllPageTypes",
  "insertText": "forceCommunity:availableForAllPageTypes",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "forceCommunity:availableForAllPageTypes"
  }
},
{
  "label": "forceCommunity:layout",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Enables a component to be used as a custom layout for creating pages in the Community Builder\n### Attributes\n",
    "_isTrusted": false
  },
  "sortText": "forceCommunity:layout",
  "insertText": "forceCommunity:layout",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "forceCommunity:layout"
  }
},
{
  "label": "forceCommunity:navigationMenuBase",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "An abstract component for customizing the navigation menu in a community, which loads menu data and handles navigation. The menu’s look and feel is controlled by the component that's extending it.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **menuItems**: *object* Automatically populated with menu item’s data. This attribute is read-only.\n",
    "_isTrusted": false
  },
  "sortText": "forceCommunity:navigationMenuBase",
  "insertText": "forceCommunity:navigationMenuBase",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "forceCommunity:navigationMenuBase"
  }
},
{
  "label": "forceCommunity:notifications",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Notifications lets your members receive notifications wherever they are working, whether in their communities or in their apps. Members receive notifications on any screen—mobile, tablet, and desktop. All events that trigger notifications (@mentions and group posts) are supported. When a member clicks a notification, the originating detail page or other appropriate location is displayed for seamless collaboration across communities and apps.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n",
    "_isTrusted": false
  },
  "sortText": "forceCommunity:notifications",
  "insertText": "forceCommunity:notifications",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "forceCommunity:notifications"
  }
},
{
  "label": "forceCommunity:profileMenuInterface",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Enables a component to be used as a custom profile menu in Community Builder.\n### Attributes\n",
    "_isTrusted": false
  },
  "sortText": "forceCommunity:profileMenuInterface",
  "insertText": "forceCommunity:profileMenuInterface",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "forceCommunity:profileMenuInterface"
  }
},
{
  "label": "forceCommunity:routeLink",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Sets an HTML anchor tag with an href attribute that’s automatically generated from the provided record ID. Use it to improve SEO link equity in template-based communities.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the anchor tag.\n* **id**: *string* The ID of the anchor tag.\n* **label**: *string* The text displayed in the link.\n* **onClick**: *action* Action to trigger when the anchor is clicked.\n* **routeInput**: *map* The map of dynamic parameters that create the link. Only recordId-based routes are supported.\n* **title**: *string* The text to display for the link tooltip.\n",
    "_isTrusted": false
  },
  "sortText": "forceCommunity:routeLink",
  "insertText": "forceCommunity:routeLink",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "forceCommunity:routeLink"
  }
},
{
  "label": "forceCommunity:searchInterface",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Enables a components to be used as a custom search component in the Community Builder.\n### Attributes\n",
    "_isTrusted": false
  },
  "sortText": "forceCommunity:searchInterface",
  "insertText": "forceCommunity:searchInterface",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "forceCommunity:searchInterface"
  }
},
{
  "label": "forceCommunity:themeLayout",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represent the layout for a theme and hosted inside the Community Builder\n### Attributes\n",
    "_isTrusted": false
  },
  "sortText": "forceCommunity:themeLayout",
  "insertText": "forceCommunity:themeLayout",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "forceCommunity:themeLayout"
  }
},
{
  "label": "forceCommunity:waveDashboard",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Use this component to add a Salesforce Analytics dashboard to a Community page.\n### Attributes\n* **accessToken**: *string* A valid access token obtained by logging into Salesforce. Useful when the component is used by Lightning Out in a non-Salesforce domain.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **dashboardId**: *string* The unique ID of the dashboard. You can get a dashboard’s ID, an 18-character code beginning with 0FK, from the dashboard's URL, or you can request it through the API. This attribute can be used instead of the developer name, but it can't be included if the name has been set. One of the two is required.\n* **developerName**: *string* The unique developer name of the dashboard. You can request the developer name through the API. This attribute can be used instead of the dashboard ID, but it can't be included if the ID has been set. One of the two is required.\n* **filter**: *string* Adds selections or filters to the embedded dashboard at runtime. The filter attribute is configured using JSON. For filtering by dimension, use this syntax: {'datasets' : {'dataset1': [ {'fields': ['field1'], 'selection': ['$value1', '$value2']}, {'fields': ['field2'], 'filter': { 'operator': 'operator1', 'values': ['$value3', '$value4']}}]}}. For filtering on measures, use this syntax: {'datasets' : {'dataset1': [ {'fields': ['field1'], 'selection': ['$value1', '$value2']}, {'fields': ['field2'], 'filter': { 'operator': 'operator1', 'values': [[$value3]]}}]}}. With the selection option, the dashboard is shown with all its data, and the specified dimension values are highlighted. With the filter option, the dashboard is shown with only filtered data. For more information, see https://help.salesforce.com/articleView?id=bi_embed_community_builder.htm. \n* **height**: *integer* Specifies the height of the dashboard, in pixels.\n* **hideOnError**: *boolean* Controls whether or not users see a dashboard that has an error. When this attribute is set to true, if the dashboard has an error, it won’t appear on the page. When set to false, the dashboard appears but doesn’t show any data. An error can occur when a user doesn't have access to the dashboard or it has been deleted. \n* **openLinksInNewWindow**: *boolean* If false, links to other dashboards will be opened in the same window.\n* **recordId**: *string* Id of the current entity in the context of which the component is being displayed.\n* **rendered**: *boolean* Specifies whether or not the component is rendered on the page.\n* **showHeader**: *boolean* If true, the dashboard is displayed with a header bar that includes dashboard information and controls. If false, the dashboard appears without a header bar. Note that the header bar automatically appears when either showSharing or showTitle is true.\n* **showSharing**: *boolean* If true, and the dashboard is shareable, then the dashboard shows the Share icon. If false, the dashboard doesn't show the Share icon. To show the Share icon in the dashboard, the smallest supported frame size is 800 x 612 pixels.\n* **showTitle**: *boolean* If true, the dashboard’s title is included above the dashboard. If false, the dashboard appears without a title.\n",
    "_isTrusted": false
  },
  "sortText": "forceCommunity:waveDashboard",
  "insertText": "forceCommunity:waveDashboard",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "forceCommunity:waveDashboard"
  }
},
{
  "label": "lightning:accordion",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A collection of vertically stacked sections with multiple content areas. This component requires version 41.0 and later.\n### Attributes\n* **activeSectionName**: *string* The activeSectionName changes the default expanded section. The first section in the accordion is expanded by default.\n* **allowMultipleSectionsOpen**: *boolean* If true, all sections will be closed by default and the accordion will allow multiple sections open at a time.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **onsectiontoggle**: *action* Action fired when the open sections change, it contains all open sections.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:accordion",
  "insertText": "lightning:accordion",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:accordion"
  }
},
{
  "label": "lightning:accordionSection",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A single section that is nested in a lightning:accordion component. This component requires version 41.0 and later.\n### Attributes\n* **actions**: *component[]* Enables a custom menu implementation. Actions are displayed to the right of the section title.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **label**: *string* The text that displays as the title of the section.\n* **name**: *string* The unique section name to use with the activeSectionName attribute in the lightning:accordion component.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:accordionSection",
  "insertText": "lightning:accordionSection",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:accordionSection"
  }
},
{
  "label": "lightning:actionOverride",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Enables a component to be used as an override for a standard action. You can override the View, New, Edit, and Tab standard actions on most standard and all custom components. This interface has no effect except when used within Lightning Experience and Salesforce1.\n### Attributes\n",
    "_isTrusted": false
  },
  "sortText": "lightning:actionOverride",
  "insertText": "lightning:actionOverride",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:actionOverride"
  }
},
{
  "label": "lightning:appHomeTemplate",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Indicates the component can be used as a flexipage page template for the APP_PAGE page type\n### Attributes\n",
    "_isTrusted": false
  },
  "sortText": "lightning:appHomeTemplate",
  "insertText": "lightning:appHomeTemplate",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:appHomeTemplate"
  }
},
{
  "label": "lightning:availableForChatterExtensionComposer",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Enables a component to be used as a chatter extension composer\n### Attributes\n",
    "_isTrusted": false
  },
  "sortText": "lightning:availableForChatterExtensionComposer",
  "insertText": "lightning:availableForChatterExtensionComposer",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:availableForChatterExtensionComposer"
  }
},
{
  "label": "lightning:availableForChatterExtensionRenderer",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Enables a component to be used as a Chatter Extension Renderer\n### Attributes\n* **payload**: *object* Payload preserved for this extension that is associated with this feed item.\n* **variant**: *string* The variant changes based on where the extension is rendered. Valid values are FEED and PREVIEW. The value defaults to FEED\n",
    "_isTrusted": false
  },
  "sortText": "lightning:availableForChatterExtensionRenderer",
  "insertText": "lightning:availableForChatterExtensionRenderer",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:availableForChatterExtensionRenderer"
  }
},
{
  "label": "lightning:availableForFlowActions",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Enables a component's controller to be used as an action in a flow.\n### Attributes\n* **timeout**: *integer* Maximum time (in seconds) an asynchronous call can take before returning control to the flow and executing the Local Action element's fault connector. The default value is 120. If the value is 0 or a negative number, the call never times out.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:availableForFlowActions",
  "insertText": "lightning:availableForFlowActions",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:availableForFlowActions"
  }
},
{
  "label": "lightning:availableForFlowScreens",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "To make a component available for flow screens, implement the lightning:availableForFlowScreens interface.\n### Attributes\n* **availableActions**: *string[]* The navigation actions available for this screen. Valid actions are NEXT, PREVIOUS, FINISH, and PAUSE.\n* **navigateFlow**: *action* Reference the appropriate navigation action to move away from this screen.\n* **screenHelpText**: *string* Help text for this screen.\n* **validate**: *action* Custom validation to run when the flow is navigated to the next screen. Pass a function into this attribute that evaluates the component and returns values for isValid and errorMessage.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:availableForFlowScreens",
  "insertText": "lightning:availableForFlowScreens",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:availableForFlowScreens"
  }
},
{
  "label": "lightning:avatar",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A visual representation of an object.\n### Attributes\n* **alternativeText**: *string* The alternative text used to describe the avatar, which is displayed as hover text on the image.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **fallbackIconName**: *string* The Lightning Design System name of the icon used as a fallback when the image fails to load. The initials fallback relies on this for its background color. Names are written in the format 'standard:account' where 'standard' is the category, and 'account' is the specific icon to be displayed. Only icons from the standard and custom categories are allowed.\n* **initials**: *string* If the record name contains two words, like first and last name, use the first capitalized letter of each. For records that only have a single word name, use the first two letters of that word using one capital and one lower case letter.\n* **size**: *string* The size of the avatar. Valid values are x-small, small, medium, and large. This value defaults to medium.\n* **src**: *string* The URL for the image.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **variant**: *string* The variant changes the shape of the avatar. Valid values are empty, circle, and square. This value defaults to square.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:avatar",
  "insertText": "lightning:avatar",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:avatar"
  }
},
{
  "label": "lightning:backgroundUtilityItem",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "This interface is used to indicate that the component is available to be instantiated at the app level without rendering any UI.\n### Attributes\n",
    "_isTrusted": false
  },
  "sortText": "lightning:backgroundUtilityItem",
  "insertText": "lightning:backgroundUtilityItem",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:backgroundUtilityItem"
  }
},
{
  "label": "lightning:badge",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a label which holds a small amount of information, such as the number of unread notifications.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **label**: *string* The text to be displayed inside the badge.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:badge",
  "insertText": "lightning:badge",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:badge"
  }
},
{
  "label": "lightning:breadcrumb",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "An item in the hierarchy path of the page the user is on.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **href**: *string* The URL of the page that the breadcrumb goes to.\n* **label**: *string* The text label for the breadcrumb.\n* **name**: *string* The name for the breadcrumb component. This value is optional and can be used to identify the breadcrumb in a callback.\n* **onclick**: *action* The action triggered when the breadcrumb is clicked.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:breadcrumb",
  "insertText": "lightning:breadcrumb",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:breadcrumb"
  }
},
{
  "label": "lightning:breadcrumbs",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A hierarchy path of the page you're currently visiting within the website or app.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:breadcrumbs",
  "insertText": "lightning:breadcrumbs",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:breadcrumbs"
  }
},
{
  "label": "lightning:button",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a button element.\n### Attributes\n* **accesskey**: *string* Specifies a shortcut key to activate or focus an element.\n* **ariaAtomic**: *string* Indicates whether assistive technologies will present all, or only parts of, the changed region. Valid values are 'true' or 'false'.\n* **ariaControls**: *string* A space-separated list of element IDs that this button controls the contents or presence of.\n* **ariaDescribedBy**: *string* A space-separated list of element IDs that provides descriptive labels for the button.\n* **ariaExpanded**: *string* Indicates whether an element the button controls is expanded or collapsed. Valid values are 'true' or 'false'.\n* **ariaLabel**: *string* Label describing the button to assistive technologies.\n* **ariaLive**: *string* Indicates that the button will be updated. Valid values are 'assertive', 'polite', or 'off'.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **disabled**: *boolean* Specifies whether this button should be displayed in a disabled state. Disabled buttons can't be clicked. This value defaults to false.\n* **iconName**: *string* The Lightning Design System name of the icon. Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed.\n* **iconPosition**: *string* Describes the position of the icon with respect to body. Options include left and right. This value defaults to left.\n* **label**: *string* The text to be displayed inside the button.\n* **name**: *string* The name for the button element. This value is optional and can be used to identify the button in a callback.\n* **onblur**: *action* The action triggered when the element releases focus.\n* **onclick**: *action* The action triggered when the button is clicked.\n* **onfocus**: *action* The action triggered when the element receives focus.\n* **tabindex**: *integer* Specifies the tab order of an element (when the tab button is used for navigating).\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **type**: *string* Specifies the type of button. Valid values are button, reset, and submit. This value defaults to button.\n* **value**: *string* The value for the button element. This value is optional and can be used when submitting a form.\n* **variant**: *string* The variant changes the appearance of the button. Accepted variants include base, neutral, brand, destructive, inverse and success. This value defaults to neutral.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:button",
  "insertText": "lightning:button",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:button"
  }
},
{
  "label": "lightning:buttonGroup",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a group of buttons.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:buttonGroup",
  "insertText": "lightning:buttonGroup",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:buttonGroup"
  }
},
{
  "label": "lightning:buttonIcon",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "An icon-only HTML button.\n### Attributes\n* **accesskey**: *string* Specifies a shortcut key to activate or focus an element.\n* **alternativeText**: *string* The alternative text used to describe the icon. This text should describe what happens when you click the button, for example 'Upload File', not what the icon looks like, 'Paperclip'.\n* **ariaAtomic**: *string* Indicates whether assistive technologies will present all, or only parts of, the changed region. Valid values are 'true' or 'false'.\n* **ariaControls**: *string* A space-separated list of element IDs that this button controls the contents or presence of.\n* **ariaDescribedBy**: *string* A space-separated list of element IDs that provides descriptive labels for the button.\n* **ariaExpanded**: *string* Indicates whether an element the button controls is expanded or collapsed. Valid values are 'true' or 'false'.\n* **ariaLabel**: *string* Label describing the button to assistive technologies.\n* **ariaLive**: *string* Indicates that the button will be updated. Valid values are 'assertive', 'polite', or 'off'.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **disabled**: *boolean* Specifies whether this button should be displayed in a disabled state. Disabled buttons can't be clicked. This value defaults to false.\n* **iconClass**: *string* The class to be applied to the contained icon element.\n* **iconName**: *string* The Lightning Design System name of the icon. Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed. Only utility icons can be used in this component.\n* **name**: *string* The name for the button element. This value is optional and can be used to identify the button in a callback.\n* **onblur**: *action* The action triggered when the element releases focus.\n* **onclick**: *action* The action that will be run when the button is clicked.\n* **onfocus**: *action* The action triggered when the element receives focus.\n* **size**: *string* The size of the buttonIcon. For the bare variant, options include x-small, small, medium, and large. For non-bare variants, options include xx-small, x-small, small, and medium. This value defaults to medium.\n* **tabindex**: *integer* Specifies the tab order of an element (when the tab button is used for navigating).\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **type**: *string* Specifies the type of button. Valid values are button, reset, and submit. This value defaults to button.\n* **value**: *string* The value for the button element. This value is optional and can be used when submitting a form.\n* **variant**: *string* The variant changes the appearance of buttonIcon. Accepted variants include bare,         container, brand, border, border-filled, bare-inverse, and border-inverse. This value defaults to border.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:buttonIcon",
  "insertText": "lightning:buttonIcon",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:buttonIcon"
  }
},
{
  "label": "lightning:buttonIconStateful",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "An icon-only button that retains state. This component requires API version 41.0 and later.\n### Attributes\n* **accesskey**: *string* Specifies a shortcut key to activate or focus an element.\n* **alternativeText**: *string* The alternative text used to describe the icon. This text should describe what happens when you click the button, for example 'Upload File', not what the icon looks like, 'Paperclip'.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **disabled**: *boolean* Specifies whether this button should be displayed in a disabled state. Disabled buttons can't be clicked. This value defaults to false.\n* **iconName**: *string* The Lightning Design System name of the icon. Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed. Note: Only utility icons can be used in this component.\n* **name**: *string* The name for the button element. This value is optional and can be used to identify the button in a callback.\n* **onblur**: *action* The action triggered when the element releases focus.\n* **onclick**: *action* The action that will be run when the button is clicked.\n* **onfocus**: *action* The action triggered when the element receives focus.\n* **selected**: *boolean* Specifies whether button is in selected state or not\n* **size**: *string* The size of the buttonIcon. Options include xx-small, x-small, small, and medium. This value defaults to medium.\n* **tabindex**: *integer* Specifies the tab order of an element (when the tab button is used for navigating).\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **value**: *string* The value for the button element. This value is optional and can be used when submitting a form.\n* **variant**: *string* The variant changes the appearance of buttonIcon. Accepted variants include border, border-filled, and border-inverse. This value defaults to border.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:buttonIconStateful",
  "insertText": "lightning:buttonIconStateful",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:buttonIconStateful"
  }
},
{
  "label": "lightning:buttonMenu",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a dropdown menu with a list of actions or functions.\n### Attributes\n* **accesskey**: *string* Specifies a shortcut key to activate or focus an element.\n* **alternativeText**: *string* The assistive text for the button.\n* **body**: *componentdefref[]* The body of the component.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **disabled**: *boolean* If true, the menu is disabled. Disabling the menu prevents users from opening it. This value defaults to false.\n* **draftAlternativeText**: *string* Describes the reason for showing the draft indicator. This is required when the isDraft attribute is true.\n* **iconName**: *string* The name of the icon to be used in the format \\'utility:down\\'. This value defaults to utility:down. If an icon other than utility:down or utility:chevrondown is used, a utility:down icon is appended to the right of that icon.\n* **iconSize**: *string* The size of the icon. Options include xx-small, x-small, medium, or large. This value defaults to medium.\n* **isDraft**: *boolean* If true, the menu trigger shows a draft indicator. This value defaults to false.\n* **isLoading**: *boolean* If true, the menu is in a loading state and shows a spinner. This value defaults to false.\n* **label**: *string* Optional text to be shown on the button.\n* **loadingStateAlternativeText**: *string* Message displayed while the menu is in the loading state.\n* **menuAlignment**: *string* Determines the alignment of the menu relative to the button. Available options are: auto, left, center, right, bottom-left, bottom-center, bottom-right. The auto option aligns the dropdown menu based on available space. This value defaults to left.\n* **name**: *string* The name for the button element. This value is optional and can be used to identify the button in a callback.\n* **onblur**: *action* The action triggered when the element releases focus.\n* **onfocus**: *action* The action triggered when the element receives focus.\n* **onopen**: *action* Action fired when the menu is opened.\n* **onselect**: *action* Action fired when a menu item is selected. The 'detail.menuItem' property of the passed event is the selected menu item.\n* **tabindex**: *integer* Specifies the tab order of an element (when the tab button is used for navigating).\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **value**: *string* The value for the button element. This value is optional and can be used when submitting a form.\n* **variant**: *string* The variant changes the look of the button. Accepted variants include bare, container, border, border-filled, bare-inverse, and border-inverse. This value defaults to border.\n* **visible**: *boolean* If true, the menu items are displayed. This value defaults to false.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:buttonMenu",
  "insertText": "lightning:buttonMenu",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:buttonMenu"
  }
},
{
  "label": "lightning:buttonStateful",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A button that toggles between states.\n### Attributes\n* **accesskey**: *string* Specifies a shortcut key to activate or focus an element.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **iconNameWhenHover**: *string* The name of the icon to be used in the format \\'utility:close\\' when the state is true and the button receives focus.\n* **iconNameWhenOff**: *string* The name of the icon to be used in the format \\'utility:add\\' when the state is false.\n* **iconNameWhenOn**: *string* The name of the icon to be used in the format \\'utility:check\\' when the state is true.\n* **labelWhenHover**: *string* The text to be displayed inside the button when state is true and the button receives focus.\n* **labelWhenOff**: *string* The text to be displayed inside the button when state is false.\n* **labelWhenOn**: *string* The text to be displayed inside the button when state is true.\n* **onblur**: *action* The action triggered when the element releases focus.\n* **onclick**: *action* The action triggered when the button is clicked.\n* **onfocus**: *action* The action triggered when the element receives focus.\n* **state**: *boolean* The state of the button, which shows whether the button has been selected or not. The default state is false.\n* **tabindex**: *integer* Specifies the tab order of an element (when the tab button is used for navigating).\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **variant**: *string* The variant changes the appearance of the button. Accepted variants include brand, destructive, inverse, neutral, success, and text. This value defaults to neutral.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:buttonStateful",
  "insertText": "lightning:buttonStateful",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:buttonStateful"
  }
},
{
  "label": "lightning:card",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Cards are used to apply a container around a related grouping of information.\n### Attributes\n* **actions**: *component[]* Actions are components such as button or buttonIcon. Actions are displayed in the header.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **footer**: *object* The footer can include text or another component\n* **iconName**: *string* The Lightning Design System name of the icon. Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed. The icon is displayed in the header to the left of the title.\n* **title**: *object* The title can include text or another component, and is displayed in the header.\n* **variant**: *string* The variant changes the appearance of the card. Accepted variants include base or narrow. This value defaults to base.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:card",
  "insertText": "lightning:card",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:card"
  }
},
{
  "label": "lightning:carousel",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A collection of images that are displayed one at a time.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **disableAutoRefresh**: *boolean* Specifies whether the carousel should stop looping from the beginning after the last item is displayed. The default value is false.\n* **disableAutoScroll**: *boolean* Specifies whether auto scroll is disabled. The default value is false.\n* **scrollDuration**: *integer* The auto scroll duration. The default is 5 seconds, after that the next image is displayed.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:carousel",
  "insertText": "lightning:carousel",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:carousel"
  }
},
{
  "label": "lightning:checkboxGroup",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A checkbox group that enables selection of single or multiple options. This component requires API version 41.0 and later.\n### Attributes\n* **accesskey**: *string* Specifies a shortcut key to activate or focus an element.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **disabled**: *boolean* Set to true if the checkbox group is disabled. Checkbox selections can't be changed for a disabled checkbox group. This value defaults to false.\n* **label**: *string* Text label for the checkbox group.\n* **messageWhenValueMissing**: *string* Optional message displayed when no checkbox is selected and the required attribute is set to true.\n* **name**: *string* The name of the checkbox group.\n* **onblur**: *action* The action triggered when the checkbox group releases focus.\n* **onchange**: *action* The action triggered when a checkbox value changes.\n* **onfocus**: *action* The action triggered when the checkbox group receives focus.\n* **options**: *list* Array of label-value pairs for each checkbox.\n* **required**: *boolean* Set to true if at least one checkbox must be selected. This value defaults to false.\n* **tabindex**: *integer* Specifies the tab order of an element (when the tab button is used for navigating).\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **value**: *string[]* The list of selected checkboxes. Each array entry contains the value of a selected checkbox. The value of each checkbox is set in the options attribute.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:checkboxGroup",
  "insertText": "lightning:checkboxGroup",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:checkboxGroup"
  }
},
{
  "label": "lightning:clickToDial",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Renders a formatted phone number as click-to-dial enabled or disabled for Open CTI and Voice. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **params**: *string* Comma-separated list of parameters to pass to the third-party phone system.\n* **recordId**: *string* The Salesforce record Id that's associated with the phone number.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **value**: *string* The phone number.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:clickToDial",
  "insertText": "lightning:clickToDial",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:clickToDial"
  }
},
{
  "label": "lightning:combobox",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A widget that provides an input field that is readonly, accompanied with a dropdown list of selectable options.\n### Attributes\n* **accesskey**: *string* Specifies a shortcut key to activate or focus an element.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **disabled**: *boolean* Specifies that an input element should be disabled. This value defaults to false.\n* **dropdownAlignment**: *string* Specifies where the drop-down list is aligned with or anchored to the selection field. By default the list is aligned with the selection field at the top so the list opens down.  Use bottom-left to make the selection field display at the bottom so the list opens above it.  Use auto to let the component determine where to open the list based on space available.\n* **fieldLevelHelp**: *string* Help text detailing the purpose and function of the combobox.\n* **label**: *string* Text label for the combobox.\n* **messageWhenValueMissing**: *string* Error message to be displayed when the value is missing and input is required.\n* **name**: *string* Specifies the name of an input element.\n* **onblur**: *action* The action triggered when the element releases focus.\n* **onchange**: *action* The action triggered when a value attribute changes.\n* **onfocus**: *action* The action triggered when the element receives focus.\n* **options**: *object[]* A list of options that are available for selection. Each option has the following attributes: label and value.\n* **placeholder**: *string* Text that is displayed before an option is selected, to prompt the user to select an option. The default is \"Select an Option\".\n* **readonly**: *boolean* Specifies that an input field is read-only. This value defaults to false.\n* **required**: *boolean* Specifies that an input field must be filled out before submitting the form. This value defaults to false.\n* **spinnerActive**: *boolean* Displays a spinner to indicate activity in the dropdown list. This value defaults to false.\n* **tabindex**: *integer* Specifies the tab order of an element (when the tab button is used for navigating).\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **validity**: *object* Represents the validity states that an element can be in, with respect to constraint validation.\n* **value**: *object* Specifies the value of an input element.\n* **variant**: *string* The variant changes the appearance of an input field. Accepted variants include standard and label-hidden. This value defaults to standard.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:combobox",
  "insertText": "lightning:combobox",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:combobox"
  }
},
{
  "label": "lightning:container",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Used to contain content that uses a third-party javascript framework such as Angular or React.\n### Attributes\n* **alternativeText**: *string* Used for alternative text in accessibility scenarios.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* The CSS class for the iframe element.\n* **onerror**: *action* The client-side controller action to run when an error occurs when sending a message to the contained app.\n* **onmessage**: *action* The client-side controller action to run when a message is received from the contained content.\n* **src**: *string* The resource name, landing page and query params in url format. Navigation is supported only for the single page identified.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:container",
  "insertText": "lightning:container",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:container"
  }
},
{
  "label": "lightning:conversationToolkitAPI",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Console integration APIs for Live Agent.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:conversationToolkitAPI",
  "insertText": "lightning:conversationToolkitAPI",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:conversationToolkitAPI"
  }
},
{
  "label": "lightning:datatable",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A table that displays columns of data, formatted according to type. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **columns**: *list* Array of the columns object that's used to define the data types. Required properties include 'label', 'dataKey', and 'type'. The default type is 'text'.\n* **data**: *object* The array of data to be displayed.\n* **defaultSortDirection**: *string* Specifies the default sorting direction on an unsorted column. Valid options include 'asc' and 'desc'. The default is 'asc' for sorting in ascending order.\n* **draftValues**: *object* The current values per row that are provided during inline edit.\n* **enableInfiniteLoading**: *boolean* Enables or disables infinite loading. The default is false.\n* **errors**: *object* Specifies an object containing information about cell level, row level, and table level errors. When it's set, error messages are displayed on the table accordingly.\n* **hideCheckboxColumn**: *boolean* Hides or displays the checkbox column for row selection. To hide the checkbox column, set hideCheckboxColumn to true. The default is false.\n* **hideTableHeader**: *boolean* Specifies whether the table header should be hidden.\n* **isLoading**: *boolean* Specifies whether more data is being loaded and displays a spinner if so. The default is false.\n* **keyField**: *string* Required for better performance. Associates each row with a unique ID.\n* **loadMoreOffset**: *integer* Determines when to trigger infinite loading based on how many pixels the table's scroll position is from the bottom of the table. The default is 20.\n* **maxColumnWidth**: *integer* The maximum width for all columns. The default is 1000px.\n* **maxRowSelection**: *integer* The maximum number of rows that can be selected. Checkboxes are used for selection by default, and radio buttons are used when maxRowSelection is 1.\n* **minColumnWidth**: *integer* The minimum width for all columns. The default is 50px.\n* **oncancel**: *action* The action triggered when clicking on the table footer bar's cancel button during inline edit. All edited cells are reverted to their original values.\n* **oncellchange**: *action* The action triggered when a cell's value changes after an inline edit. Returns the draftValues object.\n* **onheaderaction**: *action* The action triggered when a header action is clicked. By default, it also closes the header actions menu. Returns the action and columnDefinition objects.\n* **onloadmore**: *action* The action triggered when infinite loading loads more data.\n* **onresize**: *action* The action triggered when the table renders columns the first time and every time its resized an specific column. Returns columnWidths.\n* **onrowaction**: *action* The action triggered when a row action is clicked. By default, it also closes the row actions menu. Returns the eventDetails object.\n* **onrowselection**: *action* The action triggered when a row is selected. Returns the selectedRows object.\n* **onsave**: *action* The action triggered when clicking on the table footer bar's save button during inline edit. Returns the draftValues object.\n* **onsort**: *action* The action triggered when a column is sorted. Returns fieldName and sortDirection.\n* **resizeColumnDisabled**: *boolean* Specifies whether column resizing is disabled. The default is false.\n* **resizeStep**: *integer* The width to resize the column when user press left or right arrow. The default is 10px.\n* **rowNumberOffset**: *integer* Determines where to start counting the row number. The default is 0.\n* **selectedRows**: *list* Enables programmatic row selection with a list of keyField values.\n* **showRowNumberColumn**: *boolean* Shows or hides the row number column. Set to true to show the row number column. The default is false.\n* **sortedBy**: *string* The column fieldName that controls the sorting order. Sort the data using the onsort event handler.\n* **sortedDirection**: *string* Specifies the sorting direction. Sort the data using the onsort event handler. Valid options include 'asc' and 'desc'.\n* **suppressBottomBar**: *boolean* Specifies whether the inline edit Save/Cancel bottom bar should be hidden.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:datatable",
  "insertText": "lightning:datatable",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:datatable"
  }
},
{
  "label": "lightning:dualListbox",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A widget that provides an input listbox, accompanied with a listbox of selectable options. Order of selected options is saved. This component requires API version 41.0 and later.\n### Attributes\n* **accesskey**: *string* Specifies a shortcut key to activate or focus an element.\n* **addButtonLabel**: *string* Label for add button.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **disabled**: *boolean* Specifies that an input element should be disabled. This value defaults to false.\n* **disableReordering**: *boolean* Set to true to hide the Up and Down buttons used for reordering the Selected list items.\n* **downButtonLabel**: *string* Label for down button.\n* **fieldLevelHelp**: *string* Help text detailing the purpose and function of name compound field.\n* **label**: *string* Label for the dual listbox.\n* **max**: *integer* Maximum number of options required in the selected options listbox.\n* **min**: *integer* Minimum number of options required in the selected options listbox.\n* **name**: *string* Specifies the name of an input element.\n* **onblur**: *action* The action triggered when the element releases focus.\n* **onchange**: *action* The action triggered when a value attribute changes.\n* **onfocus**: *action* The action triggered when the element receives focus.\n* **options**: *object[]* A list of options that are available for selection. Each option has the following attributes: label and value.\n* **readonly**: *boolean* Specifies that an input field is read-only. This value defaults to false.\n* **removeButtonLabel**: *string* Label for remove button.\n* **required**: *boolean* Specifies that an input field must be filled out before submitting the form. This value defaults to false.\n* **requiredOptions**: *list* A list of required options that cannot be removed from selected options listbox. This list is populated with values from options attribute.\n* **selectedLabel**: *string* Label for selected options listbox.\n* **showActivityIndicator**: *boolean* Displays a spinner to indicate activity in the listbox. This value defaults to false.\n* **size**: *integer* Number of items that display before vertical scrollbars are displayed for the listboxes. Determines the vertical size of the dual listbox.\n* **sourceLabel**: *string* Label for source options listbox.\n* **tabindex**: *integer* Specifies the tab order of an element (when the tab button is used for navigating).\n* **upButtonLabel**: *string* Label for up button.\n* **validity**: *object* Represents the validity states that an element can be in, with respect to constraint validation.\n* **value**: *object* Specifies the value of an input element.\n* **values**: *list* A list of default options that are included in the selected options listbox. This list is populated with values from the options attribute.\n* **variant**: *string* The variant changes the appearance of the compound field. Accepted variants include standard and label-hidden. This value defaults to standard.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:dualListbox",
  "insertText": "lightning:dualListbox",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:dualListbox"
  }
},
{
  "label": "lightning:dynamicIcon",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents various animated icons with different states. This component requires API version 41.0 and later.\n### Attributes\n* **alternativeText**: *string* The alternative text used to describe the dynamicIcon. This text should describe what’s happening. For example, 'Graph is refreshing', not what the icon looks like, 'Graph'.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **onclick**: *action* The action triggered when the icon is clicked.\n* **option**: *string* The option attribute changes the appearance of the dynamicIcon. The options available depend on the type attribute.                 For eq: play (default) or stop                 For score: positive (default) or negative                 For strength: -3, -2, -1, 0 (default), 1, 2, 3                 For trend: neutral (default), up, or down\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **type**: *string* The Lightning Design System name of the dynamicIcon. Valid values are: ellie, eq, score, strength, trend, and waffle.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:dynamicIcon",
  "insertText": "lightning:dynamicIcon",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:dynamicIcon"
  }
},
{
  "label": "lightning:empApi",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Exposes the EmpJs Streaming API library which subscribes to a streaming channel and listens to event messages using a shared CometD connection. This component is supported only in desktop browsers. This component requires API version 44.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:empApi",
  "insertText": "lightning:empApi",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:empApi"
  }
},
{
  "label": "lightning:fileCard",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays a preview of an uploaded file available in Salesforce CRM Content or Salesforce Files.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **description**: *string* The description of the file, by default it is set to the filename\n* **fileId**: *string* The Salesforce File ID (ContentDocument).\n* **hideDescription**: *boolean* Hides the file description in the caption if enabled\n",
    "_isTrusted": false
  },
  "sortText": "lightning:fileCard",
  "insertText": "lightning:fileCard",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:fileCard"
  }
},
{
  "label": "lightning:fileUpload",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A file uploader for uploading and attaching files to records.\n### Attributes\n* **accept**: *list* Comma-separated list of file extensions that can be uploaded in the format .ext, such as .pdf, .jpg, or .png\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **disabled**: *boolean* Specifies whether this component should be displayed in a disabled state. Disabled components can't be clicked. This value defaults to false.\n* **label**: *string* The text label for the file uploader.\n* **multiple**: *boolean* Specifies whether a user can upload more than one file simultanesouly. This value defaults to false.\n* **name**: *string* Specifies the name of the input element.\n* **onuploadfinished**: *action* The action triggered when files have finished uploading.\n* **recordId**: *string* The record Id of the record that the uploaded file is associated to.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:fileUpload",
  "insertText": "lightning:fileUpload",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:fileUpload"
  }
},
{
  "label": "lightning:flexipageRegionInfo",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Provides Lightning page region information to the component that contains it.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **width**: *string* The width of the region that the component resides in.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:flexipageRegionInfo",
  "insertText": "lightning:flexipageRegionInfo",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:flexipageRegionInfo"
  }
},
{
  "label": "lightning:flow",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a flow interview in Lightning runtime. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **onstatuschange**: *action* The action triggered when the interview’s status changes or a new screen is displayed.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:flow",
  "insertText": "lightning:flow",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:flow"
  }
},
{
  "label": "lightning:formattedAddress",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays a formatted address that provides a link to the given location on Google Maps. This component requires API version 42.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **city**: *string* The city detail for the address.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **country**: *string* The country detail for the address.\n* **disabled**: *boolean* Specifies whether the address is clickable. This value defaults to false.\n* **latitude**: *decimal* The latitude of the location if known. Latitude values must be within -90 and 90.\n* **longitude**: *decimal* The longitude of the location if known. Longitude values must be within -180 and 180.\n* **postalCode**: *string* The postal code detail for the address.\n* **province**: *string* The province detail for the address.\n* **showStaticMap**: *boolean* Displays a static map of the location using Google Maps. This value defaults to false.\n* **street**: *string* The street detail for the address.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:formattedAddress",
  "insertText": "lightning:formattedAddress",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:formattedAddress"
  }
},
{
  "label": "lightning:formattedDateTime",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays formatted date and time.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **day**: *string* Allowed values are numeric or 2-digit.\n* **era**: *string* Allowed values are narrow, short, or long.\n* **hour**: *string* Allowed values are numeric or 2-digit.\n* **hour12**: *boolean* Determines whether time is displayed as 12-hour. If false, time displays as 24-hour. The default setting is determined by the user's locale.\n* **minute**: *string* Allowed values are numeric or 2-digit.\n* **month**: *string* Allowed values are 2-digit, narrow, short, or long.\n* **second**: *string* Allowed values are numeric or 2-digit.\n* **timeZone**: *string* The time zone to use. Implementations can include any time zone listed in the IANA time zone database. The default is the runtime's default time zone. Use this attribute only if you want to override the default time zone.\n* **timeZoneName**: *string* Allowed values are short or long. For example, the Pacific time zone would display as 'PST' if you select 'short', or 'Pacific Standard Time' if you select 'long.'\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **value**: *object* The value to be formatted, which can be a Date object, timestamp, or an ISO8601 formatted string.\n* **weekday**: *string* Specifies how to display the day of the week. Allowed values are narrow, short, or long.\n* **year**: *string* Allowed values are numeric or 2-digit.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:formattedDateTime",
  "insertText": "lightning:formattedDateTime",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:formattedDateTime"
  }
},
{
  "label": "lightning:formattedEmail",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays an email as a hyperlink with the mailto: URL scheme. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **hideIcon**: *boolean* If true, hides the email icon so only the email address is displayed.\n* **label**: *string* The text label for the email.\n* **onclick**: *action* The action triggered when the email is clicked.\n* **value**: *string* The email address that's displayed if a label is not provided.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:formattedEmail",
  "insertText": "lightning:formattedEmail",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:formattedEmail"
  }
},
{
  "label": "lightning:formattedLocation",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays a geolocation in decimal degrees (DD) using the format [latitude, longitude]. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **latitude**: *decimal* The latitude value of the geolocation. Latitude values must be within -90 and 90.\n* **longitude**: *decimal* The longitude value of the geolocation. Longitude values must be within -180 and 180.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:formattedLocation",
  "insertText": "lightning:formattedLocation",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:formattedLocation"
  }
},
{
  "label": "lightning:formattedName",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays a formatted name that can include a salutation and suffix. This component requires API version 42.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **firstName**: *string* The value for the first name.\n* **format**: *string* The format for which to display the name. Valid values include short, medium, and long. This value defaults to long.\n* **informalName**: *string* The value for the informal name.\n* **lastName**: *string* The value for the last name.\n* **middleName**: *string* The value for the middle name.\n* **salutation**: *string* The value for the salutation, such as Dr. or Mrs.\n* **suffix**: *string* The value for the suffix.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:formattedName",
  "insertText": "lightning:formattedName",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:formattedName"
  }
},
{
  "label": "lightning:formattedNumber",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays formatted numbers for decimals, currency, and percentages.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **currencyCode**: *string* Only used if style='currency', this attribute determines which currency is displayed. Possible values are the ISO 4217 currency codes, such as 'USD' for the US dollar.\n* **currencyDisplayAs**: *string* Determines how currency is displayed. Possible values are symbol, code, and name. This value defaults to symbol.\n* **maximumFractionDigits**: *integer* The maximum number of fraction digits that are allowed.\n* **maximumSignificantDigits**: *integer* The maximum number of significant digits that are allowed. Possible values are from 1 to 21.\n* **minimumFractionDigits**: *integer* The minimum number of fraction digits that are required.\n* **minimumIntegerDigits**: *integer* The minimum number of integer digits that are required. Possible values are from 1 to 21.\n* **minimumSignificantDigits**: *integer* The minimum number of significant digits that are required. Possible values are from 1 to 21.\n* **style**: *string* The number formatting style to use. Possible values are decimal, currency, and percent. This value defaults to decimal.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **value**: *decimal* The value to be formatted.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:formattedNumber",
  "insertText": "lightning:formattedNumber",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:formattedNumber"
  }
},
{
  "label": "lightning:formattedPhone",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays a phone number as a hyperlink with the tel: URL scheme. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **onclick**: *action* The action triggered when the phone number is clicked.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **value**: *integer* Sets the phone number to display.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:formattedPhone",
  "insertText": "lightning:formattedPhone",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:formattedPhone"
  }
},
{
  "label": "lightning:formattedRichText",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays rich text that's formatted with whitelisted tags and attributes. Other tags and attributes are removed and only their text content is displayed. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **disableLinkify**: *boolean* Prevents the component from creating links in the rich text.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **value**: *string* Sets the rich text to display.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:formattedRichText",
  "insertText": "lightning:formattedRichText",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:formattedRichText"
  }
},
{
  "label": "lightning:formattedText",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays text, replaces newlines with line breaks, and linkifies if requested. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **linkify**: *boolean* Specifies whether the text should be converted to a link. If set to true, URLs and email addresses are displayed in anchor tags.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **value**: *string* Text to output.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:formattedText",
  "insertText": "lightning:formattedText",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:formattedText"
  }
},
{
  "label": "lightning:formattedTime",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays a formatted time in user's locale format. This component requires API version 42.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **value**: *string* The time value to format.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:formattedTime",
  "insertText": "lightning:formattedTime",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:formattedTime"
  }
},
{
  "label": "lightning:formattedUrl",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays a URL as a hyperlink. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **label**: *string* The text to display in the link.\n* **onclick**: *action* The action triggered when the URL is clicked.\n* **target**: *string* Specifies where to open the link. Options include _blank, _parent, _self, and _top.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **tooltip**: *string* The text to display when the mouse hovers over the link.\n* **value**: *string* The URL to be formatted.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:formattedUrl",
  "insertText": "lightning:formattedUrl",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:formattedUrl"
  }
},
{
  "label": "lightning:hasPageReference",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "This interface is used to indicate that a component takes a pageReference Object as an attribute.\n### Attributes\n* **pageReference**: *object* An object with a String 'type' property and Object 'attributes' and 'state' properties.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:hasPageReference",
  "insertText": "lightning:hasPageReference",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:hasPageReference"
  }
},
{
  "label": "lightning:helptext",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "An icon with a text popover.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **content**: *string* Text to be shown in the popover.\n* **iconName**: *string* The Lightning Design System name of the icon used as the visible element. Names are written in the format 'utility:info' where 'utility' is the category, and 'info' is the specific icon to be displayed. The default value is 'utility:info'.\n* **iconVariant**: *string* The iconVariant changes the appearance of the icon. Accepted variants include inverse, warning, error.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:helptext",
  "insertText": "lightning:helptext",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:helptext"
  }
},
{
  "label": "lightning:homeTemplate",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Indicates the component can be used as a flexipage page template for the HOME_PAGE page type\n### Attributes\n",
    "_isTrusted": false
  },
  "sortText": "lightning:homeTemplate",
  "insertText": "lightning:homeTemplate",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:homeTemplate"
  }
},
{
  "label": "lightning:icon",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a visual element that provides context and enhances usability.\n### Attributes\n* **alternativeText**: *string* The alternative text used to describe the icon. This text should describe what happens when you click the button, for example 'Upload File', not what the icon looks like, 'Paperclip'.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **iconName**: *string* The Lightning Design System name of the icon. Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed.\n* **size**: *string* The size of the icon. Options include xx-small, x-small, small, medium, or large. This value defaults to medium.\n* **src**: *string* A uri path to a custom svg sprite, including the name of the resouce, for example: /assets/icons/standard-sprite/svg/test.svg#icon-heart\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **variant**: *string* The variant changes the appearance of a utility icon. Accepted variants include inverse, warning, and error. Use the inverse variant to implement a white fill in utility icons on dark backgrounds.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:icon",
  "insertText": "lightning:icon",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:icon"
  }
},
{
  "label": "lightning:input",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents interactive controls that accept user input depending on the type attribute.\n### Attributes\n* **accept**: *string* Specifies the types of files that the server accepts. This attribute can be used only when type='file'.\n* **accesskey**: *string* Specifies a shortcut key to activate or focus an element.\n* **ariaControls**: *string* A space-separated list of element IDs whose presence or content is controlled by the input.\n* **ariaDescribedBy**: *string* A space-separated list of element IDs that provide descriptive labels for the input.\n* **ariaLabel**: *string* Describes the input to assistive technologies.\n* **ariaLabelledBy**: *string* A space-separated list of element IDs that provide labels for the input.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **checked**: *boolean* Specifies whether the checkbox is checked. This value defaults to false.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **dateAriaControls**: *string* A space-separated list of element IDs whose presence or content is controlled by the date input when type=datetime. On mobile devices, this is merged with ariaControls and timeAriaControls to describe the native date time input.\n* **dateAriaDescribedBy**: *string* A space-separated list of element IDs that provide descriptive labels for the date input when type=datetime. On mobile devices, this is merged with ariaDescribedBy and timeAriaDescribedBy to describe the native date time input.\n* **dateAriaLabel**: *string* Describes the date input to assistive technologies when type=datetime. On mobile devices, this label is merged with ariaLabel and timeAriaLabel to describe the native date time input.\n* **dateAriaLabelledBy**: *string* A space-separated list of element IDs that provide labels for the date input when type=datetime. On mobile devices, this is merged with ariaLabelledBy and timeAriaLabelledBy to describe the native date time input.\n* **disabled**: *boolean* Specifies that an input element should be disabled. This value defaults to false.\n* **files**: *object* A FileList that contains selected files. This attribute can be used only when type='file'.\n* **formatter**: *string* String value with the formatter to be used for number input. Valid values include decimal, percent, percent-fixed, and currency.\n* **isLoading**: *boolean* Specifies whether the spinner is displayed to indicate that data is loading. This value defaults to false.\n* **label**: *string* Text label for the input.\n* **max**: *object* The maximum acceptable value for the input. This attribute can be used only with number, range, date, time, and datetime input types. For number and range type, the max value is a decimal number. For the date, time, and datetime types, the max value must use a valid string for the type.\n* **maxlength**: *integer* The maximum number of characters allowed in the field.\n* **messageToggleActive**: *string* Text shown for the active state of a toggle. The default is \"Active\".\n* **messageToggleInactive**: *string* Text shown for then inactive state of a toggle. The default is \"Inactive\".\n* **messageWhenBadInput**: *string* Error message to be displayed when a bad input is detected.\n* **messageWhenPatternMismatch**: *string* Error message to be displayed when a pattern mismatch is detected.\n* **messageWhenRangeOverflow**: *string* Error message to be displayed when a range overflow is detected.\n* **messageWhenRangeUnderflow**: *string* Error message to be displayed when a range underflow is detected.\n* **messageWhenStepMismatch**: *string* Error message to be displayed when a step mismatch is detected.\n* **messageWhenTooLong**: *string* Error message to be displayed when the value is too long.\n* **messageWhenTooShort**: *string* Error message to be displayed when the value is too short.\n* **messageWhenTypeMismatch**: *string* Error message to be displayed when a type mismatch is detected.\n* **messageWhenValueMissing**: *string* Error message to be displayed when the value is missing.\n* **min**: *object* The minimum acceptable value for the input. This attribute can be used only with number, range, date, time, and datetime input types. For number and range types, the min value is a decimal number. For the date, time, and datetime types, the min value must use a valid string for the type.\n* **minlength**: *integer* The minimum number of characters allowed in the field.\n* **multiple**: *boolean* Specifies that a user can enter more than one value. This attribute can be used only when type='file' or type='email'.\n* **name**: *string* Specifies the name of an input element.\n* **onblur**: *action* The action triggered when the element releases focus.\n* **onchange**: *action* The action triggered when a value attribute changes.\n* **onfocus**: *action* The action triggered when the element receives focus.\n* **pattern**: *string* Specifies the regular expression that the input's value is checked against.                                 This attribute is supported for text, search, url, tel, email, and password types.\n* **placeholder**: *string* Text that is displayed when the field is empty, to prompt the user for a valid entry.\n* **readonly**: *boolean* Specifies that an input field is read-only. This value defaults to false.\n* **required**: *boolean* Specifies that an input field must be filled out before submitting the form. This value defaults to false.\n* **step**: *object* Granularity of the value, specified as a positive floating point number. Use 'any' when granularity is not a concern. This value defaults to 1.\n* **tabindex**: *integer* Specifies the tab order of an element (when the tab button is used for navigating).\n* **timeAriaControls**: *string* A space-separated list of element IDs whose presence or content is controlled by the time input when type=datetime. On mobile devices, this is merged with ariaControls and dateAriaControls to describe the native date time input.\n* **timeAriaDescribedBy**: *string* A space-separated list of element IDs that provide descriptive labels for the time input when type=datetime. On mobile devices, this is merged with ariaDescribedBy and dateAriaDescribedBy to describe the native date time input.\n* **timeAriaLabel**: *string* Describes the time input to assistive technologies when type=datetime. On mobile devices, this label is merged with ariaLabel and dateAriaLabel to describe the native date time input.\n* **timeAriaLabelledBy**: *string* A space-separated list of element IDs that provide labels for the time input when type=datetime. On mobile devices, this is merged with ariaLabelledBy and dateAriaLabelledBy to describe the native date time input.\n* **timezone**: *string* Specifies the time zone used when type='datetime' only. This value defaults to the user’s Salesforce time zone setting.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **type**: *string* The type of the input. This value defaults to text.\n* **validity**: *object* Represents the validity states that an element can be in, with respect to constraint validation.\n* **value**: *object* Specifies the value of an input element.\n* **variant**: *string* The variant changes the appearance of an input field. Accepted variants include standard and label-hidden. This value defaults to standard.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:input",
  "insertText": "lightning:input",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:input"
  }
},
{
  "label": "lightning:inputAddress",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents an address compound field. This component requires API version 42.0 and later.\n### Attributes\n* **addressLabel**: *string* The label of the address compound field.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **city**: *string* The city field of the address.\n* **cityLabel**: *string* The label of the city field of the address.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **country**: *string* The country field of the address. If countryOptions is provided, this country value is selected by default.\n* **countryLabel**: *string* The label of the country field of the address.\n* **countryOptions**: *list* The array of label-value pairs for the country. Displays a dropdown menu of options.\n* **disabled**: *boolean* Specifies whether the address fields are disabled. This value defaults to false.\n* **fieldLevelHelp**: *string* Help text detailing the purpose and function of the address compound field.\n* **onblur**: *action* The action triggered when the input releases focus.\n* **onchange**: *action* The action triggered when the value changes.\n* **onfocus**: *action* The action triggered when the input receives focus.\n* **postalCode**: *string* The postal code field of the address.\n* **postalCodeLabel**: *string* The label of the postal code field of the address.\n* **province**: *string* The province field of the address. If provinceOptions is provided, this province value is selected by default.\n* **provinceLabel**: *string* The label of the province field of the address.\n* **provinceOptions**: *list* The array of label-value pairs for the province. Displays a dropdown menu of options.\n* **readonly**: *boolean* Specifies whether the address fields are read-only. This value defaults to false.\n* **required**: *boolean* Specifies whether the address fields are required. This value defaults to false.\n* **showAddressLookup**: *boolean* Specifies whether to enable address lookup using Google Maps. This value defaults to false.\n* **street**: *string* The street field of the address.\n* **streetLabel**: *string* The label of the street field of the address.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **variant**: *string* The variant changes the appearance of the compound field. Accepted variants include standard and label-hidden. This value defaults to standard.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:inputAddress",
  "insertText": "lightning:inputAddress",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:inputAddress"
  }
},
{
  "label": "lightning:inputField",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents an editable input for a field on a Salesforce object. This component requires API version 42.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **disabled**: *boolean* Whether or not the field is disabled. Defaults to false for readonly fields, true for other fields.\n* **fieldName**: *string* The API name of the field to be displayed.\n* **onchange**: *action* The action triggered when the input value changes.\n* **value**: *string* The field value, which overrides the existing value.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:inputField",
  "insertText": "lightning:inputField",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:inputField"
  }
},
{
  "label": "lightning:inputLocation",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a geolocation compound field that accepts a latitude and longitude value. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **disabled**: *boolean* Specifies whether the compound field should be disabled. Disabled fields are grayed out and not clickable. This value defaults to false.\n* **fieldLevelHelp**: *string* Help text detailing the purpose and function of location compound field.\n* **label**: *string* Text label for the input location field.\n* **latitude**: *string* The latitude value. Latitude values must be within -90 and 90.\n* **longitude**: *string* The longitude value. Longitude values must be within -180 and 180.\n* **onblur**: *action* The action triggered when the input releases focus.\n* **onchange**: *action* The action triggered when the value changes.\n* **onfocus**: *action* The action triggered when the input receives focus.\n* **readonly**: *boolean* Specifies whether the compound field is read-only. This value defaults to false.\n* **required**: *boolean* Specifies whether the compound field must be filled out. An error message is displayed if a user interacts with the field and does not provide a value. This value defaults to false.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **variant**: *string* The variant changes the appearance of the compound field. Accepted variants include standard and label-hidden. This value defaults to standard.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:inputLocation",
  "insertText": "lightning:inputLocation",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:inputLocation"
  }
},
{
  "label": "lightning:inputName",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a name compound field. This component requires API version 42.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **disabled**: *boolean* Specifies whether the compound field should be disabled. Disabled fields are grayed out and not clickable. This value defaults to false.\n* **fieldLevelHelp**: *string* Help text detailing the purpose and function of name compound field.\n* **fieldsToDisplay**: *list* List of fields to be displayed on the component. This value defaults to ['firstName', 'salutation', 'lastName']. Other field values include middleName, informalName, suffix.\n* **firstName**: *string* Displays the First Name field.\n* **informalName**: *string* Displays the Informal Name field.\n* **label**: *string* Text label for the compound field.\n* **lastName**: *string* Displays the Last Name field. This field is always displayed if you set required to true.\n* **middleName**: *string* Displays the Middle Name field.\n* **onblur**: *action* The action triggered when the input releases focus.\n* **onchange**: *action* The action triggered when the value changes.\n* **onfocus**: *action* The action triggered when the input receives focus.\n* **options**: *list* Displays a list of salutation options, such as Dr. or Mrs., provided as label-value pairs.\n* **readonly**: *boolean* Specifies whether the compound field is read-only. This value defaults to false.\n* **required**: *boolean* Specifies whether the compound field must be filled out. A red asterisk is displayed on the Last Name field. An error message is displayed if a user interacts with the Last Name field and does not provide a value. This value defaults to false.\n* **salutation**: *string* Displays the Salutation field as a dropdown menu. An array of label-value pairs must be provided using the options attribute.\n* **suffix**: *string* Displays the Suffix field.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **variant**: *string* The variant changes the appearance of the compound field. Accepted variants include standard and label-hidden. This value defaults to standard.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:inputName",
  "insertText": "lightning:inputName",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:inputName"
  }
},
{
  "label": "lightning:inputRichText",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A WYSIWYG editor with a customizable toolbar for entering rich text\n### Attributes\n* **accesskey**: *string* Specifies a shortcut key to activate or focus an element.\n* **ariaDescribedby**: *string* A space-separated list of element IDs that provides descriptive labels for the rich text editor.\n* **ariaLabel**: *string* Label describing the rich text editor to assistive technologies\n* **ariaLabelledby**: *string* An element ID that provides a label for the rich text editor.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **disabled**: *boolean* Specifies whether the editor is disabled. This value defaults to false.\n* **disabledCategories**: *list* A comma-separated list of button categories to remove from the toolbar.\n* **formats**: *list* A list of formats accepted by the text editor. By default, the list is computed based on enabled categories. The \"table\" format is always enabled to support copying and pasting of tables. If formats are specified, all desired formats must be specified. Omitting a format from the list removes the corresponding button.\n* **label**: *string* Text label for the rich text editor.\n* **labelVisible**: *boolean* Specifies whether the label is visible or not. The default is false.\n* **messageWhenBadInput**: *string* Error message that's displayed when valid is false.\n* **onblur**: *action* The action triggered when the element releases focus.\n* **onfocus**: *action* The action triggered when the element receives focus.\n* **placeholder**: *string* Text that is displayed when the field is empty.\n* **shareWithEntityId**: *string* Entity ID to share the image with.\n* **tabindex**: *integer* Specifies the tab order of an element (when the tab button is used for navigating).\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **valid**: *boolean* Specifies whether the editor content is valid. If invalid, the slds-has-error class is added. This value defaults to true.\n* **value**: *string* The HTML content in the rich text editor.\n* **variant**: *string* The variant changes the appearance of the toolbar. Accepted variants include bottom-toolbar\n",
    "_isTrusted": false
  },
  "sortText": "lightning:inputRichText",
  "insertText": "lightning:inputRichText",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:inputRichText"
  }
},
{
  "label": "lightning:insertImageButton",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Button to insert an inline image in lightning:inputRichText. This component requires API version 43.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:insertImageButton",
  "insertText": "lightning:insertImageButton",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:insertImageButton"
  }
},
{
  "label": "lightning:isUrlAddressable",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "This interface is used to indicate that a component can be directly navigated to through a URL.\n### Attributes\n* **pageReference**: *object* An object with a String 'type' property and Object 'attributes' and 'state' properties.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:isUrlAddressable",
  "insertText": "lightning:isUrlAddressable",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:isUrlAddressable"
  }
},
{
  "label": "lightning:layout",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a responsive grid system for arranging containers on a page.\n### Attributes\n* **body**: *component[]* Body of the layout component.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **horizontalAlign**: *string* Determines how to spread the layout items horizontally. The alignment options are center, space, spread, and end.\n* **multipleRows**: *boolean* Determines whether to wrap the child items when they exceed the layout width. If true, the items wrap to the following line. This value defaults to false.\n* **pullToBoundary**: *string* Pulls layout items to the layout boundaries and corresponds to the padding size on the layout item. Possible values are small, medium, or large.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **verticalAlign**: *string* Determines how to spread the layout items vertically. The alignment options are start, center, end, and stretch.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:layout",
  "insertText": "lightning:layout",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:layout"
  }
},
{
  "label": "lightning:layoutItem",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "The basic element of lightning:layout.\n### Attributes\n* **alignmentBump**: *string* Specifies a direction to bump the alignment of adjacent layout items. Allowed values are left, top, right, bottom.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **flexibility**: *object* Make the item fluid so that it absorbs any extra space in its container or shrinks when there is less space. Allowed values are: auto (columns grow or shrink equally as space allows), shrink (columns shrink equally as space decreases), no-shrink (columns don't shrink as space reduces), grow (columns grow equally as space increases), no-grow (columns don't grow as space increases), no-flex (columns don't grow or shrink as space changes). Use a comma-separated value for multiple options, such as 'auto, no-shrink'.\n* **largeDeviceSize**: *integer* If the viewport is divided into 12 parts, this attribute indicates the relative space the container occupies on device-types larger than desktop. It is expressed as an integer from 1 through 12.\n* **mediumDeviceSize**: *integer* If the viewport is divided into 12 parts, this attribute indicates the relative space the container occupies on device-types larger than tablet. It is expressed as an integer from 1 through 12.\n* **padding**: *string* Sets padding to either the right and left sides of a container, or all sides of a container. Allowed values are horizontal-small, horizontal-medium, horizontal-large, around-small, around-medium, around-large.\n* **size**: *integer* If the viewport is divided into 12 parts, size indicates the relative space the container occupies. Size is expressed as an integer from 1 through 12. This applies for all device-types.\n* **smallDeviceSize**: *integer* If the viewport is divided into 12 parts, this attribute indicates the relative space the container occupies on device-types larger than mobile. It is expressed as an integer from 1 through 12.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:layoutItem",
  "insertText": "lightning:layoutItem",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:layoutItem"
  }
},
{
  "label": "lightning:listView",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays a List View of the specified object. This component requires API 42.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **enableInlineEdit**: *boolean* Specifies whether the inline edit of cells is enabled. This value defaults to false.\n* **listName**: *string* The developer name of the List View\n* **objectApiName**: *string* The API name of the object to be displayed in this List View\n* **rows**: *integer* Specifies the number of rows to initially load and additional rows after each subsequent 'Load More' click. The default and maximum number of rows value is 50.\n* **showActionBar**: *boolean* Specifies whether the action bar displays. This value defaults to false.\n* **showRowLevelActions**: *boolean* Specifies whether row level actions are displayed (as a dropdown menu in the last column of the row). This value defaults to false.\n* **showSearchBar**: *boolean* Specifies whether the search bar displays. This value defaults to false. Note: The server side may still disable search if it does not support searching.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:listView",
  "insertText": "lightning:listView",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:listView"
  }
},
{
  "label": "lightning:map",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A lightning:map component securely displays a map of one or more locations. This component requires API version 44.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **center**: *object* Centers the map according to an specific 'mapMarker' object. If not specified automatically calculates center.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **mapMarkers**: *object* Array containing one of more objects with the address or coordinates to be displayed.\n* **markersTitle**: *string* When the map displays multiple markers on the page and shows the list of markers, this property provides the heading title for the markers. Required if multiple markers specified.\n* **showFooter**: *boolean* Shows footer with 'Open in Google Maps' link. Default value: 'false'\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **zoomLevel**: *integer* Corresponds to zoom levels defined in Google Maps API. If not specified, the map component automatically chooses an appropriate zoom level to show all markers with comfortable margins.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:map",
  "insertText": "lightning:map",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:map"
  }
},
{
  "label": "lightning:menuItem",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a list item in a menu.\n### Attributes\n* **accesskey**: *string* Specifies a shortcut key to activate or focus an element.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **checked**: *boolean* If not specified, the menu item is not checkable. If true, a check mark is shown to the left of the menu item. If false, a check mark is not shown but there is space to accommodate one.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **disabled**: *boolean* If true, the menu item is not actionable and is shown as disabled.\n* **draftAlternativeText**: *string* Describes the reason for showing the draft indicator. This is required when the isDraft attribute is true\n* **href**: *string* URL for a link to use for the menu item.\n* **iconName**: *string* The name of an icon to display after the text of the menu item.\n* **isDraft**: *boolean* If true, the menu item shows a draft indicator. This value defaults to false.\n* **label**: *string* Text of the menu item.\n* **onactive**: *action* DEPRECATED. The action triggered when this menu item is selected.\n* **onblur**: *action* The action triggered when the element releases focus.\n* **onfocus**: *action* The action triggered when the element receives focus.\n* **prefixIconName**: *string* The name of an icon to display before the text of the menu item.\n* **tabindex**: *integer* Specifies the tab order of an element (when the tab button is used for navigating).\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **value**: *string* A value associated with the menu item.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:menuItem",
  "insertText": "lightning:menuItem",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:menuItem"
  }
},
{
  "label": "lightning:navigation",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Generates URL for a given pageReference. This component requires API version 43.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:navigation",
  "insertText": "lightning:navigation",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:navigation"
  }
},
{
  "label": "lightning:navigationItemAPI",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "This component allows you to access methods for programmatically controlling navigation items in Lightning console apps, where navigation items display in an item menu. This component requires API version 43.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:navigationItemAPI",
  "insertText": "lightning:navigationItemAPI",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:navigationItemAPI"
  }
},
{
  "label": "lightning:notificationsLibrary",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays messages via notices and toasts. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:notificationsLibrary",
  "insertText": "lightning:notificationsLibrary",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:notificationsLibrary"
  }
},
{
  "label": "lightning:omniToolkitAPI",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "This component provides access to the API for the Omni-channel toolkit.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:omniToolkitAPI",
  "insertText": "lightning:omniToolkitAPI",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:omniToolkitAPI"
  }
},
{
  "label": "lightning:outputField",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a read-only display of a label, help text, and value for a field on a Salesforce object. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **fieldName**: *string* The API name of the field to be displayed.\n* **variant**: *string* Changes the appearance of the output. Accepted variants include standard and label-hidden. This value defaults to standard.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:outputField",
  "insertText": "lightning:outputField",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:outputField"
  }
},
{
  "label": "lightning:overlayLibrary",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays messages via modals and popovers. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:overlayLibrary",
  "insertText": "lightning:overlayLibrary",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:overlayLibrary"
  }
},
{
  "label": "lightning:path",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays a path driven by a picklist field and Path Setup metadata. This component requires API 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **hideUpdateButton**: *boolean* Specified whether the Mark Complete button is displayed next to the path. If true, the button is not displayed. The Mark Complete button is displayed by default.\n* **onselect**: *action* The action triggered when a step on the path is clicked.\n* **recordId**: *string* The record's ID\n* **variant**: *string* Changes the appearance of the path. Choose between linear and non-linear formats. In linear paths, completed steps show a checkmark. In non-linear paths, completed steps show the step name. We show linear paths by default.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:path",
  "insertText": "lightning:path",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:path"
  }
},
{
  "label": "lightning:picklistPath",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays a path based on a specified picklist field. This component requires API 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **onselect**: *action* The action triggered when a step on the path is clicked.\n* **picklistFieldApiName**: *string* The API name of the field from which the path is derived. For example, StageName for Opportunity.\n* **recordId**: *string* The record's ID\n* **variant**: *string* Changes the appearance of the path. Choose between linear and non-linear formats. In linear paths, completed steps show a checkmark. In non-linear paths, completed steps show the step name. We show linear paths by default.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:picklistPath",
  "insertText": "lightning:picklistPath",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:picklistPath"
  }
},
{
  "label": "lightning:pill",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A pill displays a label that can contain links and can be removed from view.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **hasError**: *boolean* Specifies whether the pill has errors. The default is false.\n* **href**: *string* The URL of the page that the link goes to.\n* **label**: *string* The text label that displays in the pill.\n* **media**: *component[]* The icon or figure that's displayed next to the textual information.\n* **name**: *string* The name for the pill. This value is optional and can be used to identify the pill in a callback.\n* **onclick**: *action* The action triggered when the button is clicked.\n* **onremove**: *action* The action triggered when the pill is removed.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:pill",
  "insertText": "lightning:pill",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:pill"
  }
},
{
  "label": "lightning:pillContainer",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A list of pills grouped in a container. This component requires API version 42.0 and later. \n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **items**: *list* An array of items to be rendered as pills in a container.\n* **label**: *string* Aria label for the pill container.\n* **onitemremove**: *action* The action triggered when a pill is removed.\n* **singleLine**: *boolean* Whether keep pills in single line.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:pillContainer",
  "insertText": "lightning:pillContainer",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:pillContainer"
  }
},
{
  "label": "lightning:progressBar",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays a horizontal progress bar from left to right to indicate the progress of an operation. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **size**: *string* The size of the progress bar. Valid values are x-small, small, medium, and large. The default value is medium.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **value**: *integer* The percentage value of the progress bar.\n* **variant**: *string* The variant of the progress bar. Valid values are base and circular.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:progressBar",
  "insertText": "lightning:progressBar",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:progressBar"
  }
},
{
  "label": "lightning:progressIndicator",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Provides a visual indication on the progress of a particular process. This component is available in version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **currentStep**: *string* The current step, which must match the value attribute of one of progressStep components. If a step is not provided, the value of the first progressStep component is used.\n* **hasError**: *boolean* Indicates whether the current step is in error state and displays a warning icon on the step indicator. Applies to the base type only. This value defaults to false.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **type**: *string* Changes the visual pattern of the indicator. Valid values are base and path. This value defaults to base.\n* **variant**: *string* Changes the appearance of the progress indicator for the base type only. Valid values are base or shaded. The shaded variant adds a light gray border to the step indicators. This value defaults to base.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:progressIndicator",
  "insertText": "lightning:progressIndicator",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:progressIndicator"
  }
},
{
  "label": "lightning:quickActionAPI",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "This component allows you to access methods for programmatically controlling actions on record pages in Lightning Experience. This component requires API version 43.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:quickActionAPI",
  "insertText": "lightning:quickActionAPI",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:quickActionAPI"
  }
},
{
  "label": "lightning:quipCard",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Quip card\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **parentRecordId**: *string* ID of the Salesforce record to display the card for.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:quipCard",
  "insertText": "lightning:quipCard",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:quipCard"
  }
},
{
  "label": "lightning:radioGroup",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A radio button group that can have a single option selected. This component requires API version 41.0 and later.\n### Attributes\n* **accesskey**: *string* Specifies a shortcut key to activate or focus an element.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **disabled**: *boolean* Specifies that an input element should be disabled. This value defaults to false.\n* **label**: *string* Text label for the radio group.\n* **messageWhenValueMissing**: *string* Optional message displayed when no radio button is selected and the required attribute is set to true.\n* **name**: *string* Specifies the name of an input element.\n* **onblur**: *action* The action triggered when the element releases focus.\n* **onchange**: *action* The action triggered when a value attribute changes.\n* **onfocus**: *action* The action triggered when the element receives focus.\n* **options**: *list* Array of label-value pairs for each radio button.\n* **readonly**: *boolean* Specifies that an input field is read-only. This value defaults to false.\n* **required**: *boolean* Specifies that an input field must be filled out before submitting the form. This value defaults to false.\n* **tabindex**: *integer* Specifies the tab order of an element (when the tab button is used for navigating).\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **type**: *string* The style of the radio group. Options are radio or button. The default is radio.\n* **validity**: *object* Represents the validity states that an element can be in, with respect to constraint validation.\n* **value**: *object* Specifies the value of an input element.\n* **variant**: *string* The variant changes the appearance of an input field. Accepted variants include standard and label-hidden. This value defaults to standard.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:radioGroup",
  "insertText": "lightning:radioGroup",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:radioGroup"
  }
},
{
  "label": "lightning:recordEditForm",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a record edit layout that displays one or more fields, provided by lightning:outputField. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **objectApiName**: *string* The API name of the object.\n* **onerror**: *action* The action triggered when there is an error on form submission.\n* **onload**: *action* The action triggered when the form data is loaded.\n* **onsubmit**: *action* The action triggered when the form is submitted.\n* **onsuccess**: *action* The action triggered when the form is saved.\n* **recordId**: *string* The ID of the record to be displayed.\n* **recordTypeId**: *string* The ID of the record type, which is required if you created multiple record types but don't have a default.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:recordEditForm",
  "insertText": "lightning:recordEditForm",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:recordEditForm"
  }
},
{
  "label": "lightning:recordForm",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Creates an editable form or display form for a record. This component requires API version 43.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **columns**: *number* Specifies the number of columns for the form.\n* **fields**: *string[]* List of fields to be displayed.\n* **layoutType**: *string* The type of layout to use to display the form fields. Possible values: Compact, Full.\n* **mode**: *string* Specifies the interaction and display style for the form. Possible values: view, edit, readonly\n* **objectApiName**: *string* The API name of the object.\n* **onerror**: *action* The action triggered when there is an error on form submission.\n* **onload**: *action* The action triggered when the form data is loaded.\n* **onsubmit**: *action* The action triggered when the form is submitted.\n* **onsuccess**: *action* The action triggered when the form is saved.\n* **recordId**: *string* The ID of the record to be displayed.\n* **recordTypeId**: *string* The ID of the record type, which is required if you created multiple record types but don't have a default.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:recordForm",
  "insertText": "lightning:recordForm",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:recordForm"
  }
},
{
  "label": "lightning:recordHomeTemplate",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Indicates the component can be used as a flexipage page template for the RECORD_PAGE page type\n### Attributes\n",
    "_isTrusted": false
  },
  "sortText": "lightning:recordHomeTemplate",
  "insertText": "lightning:recordHomeTemplate",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:recordHomeTemplate"
  }
},
{
  "label": "lightning:recordViewForm",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a record view that displays one or more fields, provided by lightning:outputField. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **objectApiName**: *string* The API name of the object.\n* **recordId**: *string* The ID of the record to be displayed.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:recordViewForm",
  "insertText": "lightning:recordViewForm",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:recordViewForm"
  }
},
{
  "label": "lightning:relativeDateTime",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays the relative time difference between the source date-time and the provided date-time.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **value**: *object* The timestamp or JavaScript Date object to be formatted.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:relativeDateTime",
  "insertText": "lightning:relativeDateTime",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:relativeDateTime"
  }
},
{
  "label": "lightning:select",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a select input.\n### Attributes\n* **accesskey**: *string* Specifies a shortcut key to activate or focus an element.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **disabled**: *boolean* Specifies that an input element should be disabled. This value defaults to false.\n* **label**: *string* Text that describes the desired select input.\n* **messageWhenValueMissing**: *string* Error message to be displayed when the value is missing.\n* **name**: *string* Specifies the name of an input element.\n* **onblur**: *action* The action triggered when the element releases focus.\n* **onchange**: *action* The action triggered when a value attribute changes.\n* **onfocus**: *action* The action triggered when the element receives focus.\n* **readonly**: *boolean* Specifies that an input field is read-only. This value defaults to false.\n* **required**: *boolean* Specifies that an input field must be filled out before submitting the form. This value defaults to false.\n* **tabindex**: *integer* Specifies the tab order of an element (when the tab button is used for navigating).\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **validity**: *object* Represents the validity states that an element can be in, with respect to constraint validation.\n* **value**: *string* The value of the select, also used as the default value to select the right option during init. If no value is provided, the first option will be selected.\n* **variant**: *string* The variant changes the appearance of an input field. Accepted variants include standard and label-hidden. This value defaults to standard.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:select",
  "insertText": "lightning:select",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:select"
  }
},
{
  "label": "lightning:slider",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "An input range slider for specifying a value between two specified numbers. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **disabled**: *boolean* The disabled value of the input range. This value default to false.\n* **label**: *string* The text label for the input range. Provide your own label to describe the slider. Otherwise, no label is displayed.\n* **max**: *integer* The max value of the input range. This value defaults to 100.\n* **messageWhenBadInput**: *string* Error message to be displayed when a bad input is detected.\n* **messageWhenPatternMismatch**: *string* Error message to be displayed when a pattern mismatch is detected.\n* **messageWhenRangeOverflow**: *string* Error message to be displayed when a range overflow is detected.\n* **messageWhenRangeUnderflow**: *string* Error message to be displayed when a range underflow is detected.\n* **messageWhenStepMismatch**: *string* Error message to be displayed when a step mismatch is detected.\n* **messageWhenTooLong**: *string* Error message to be displayed when the value is too long.\n* **messageWhenTypeMismatch**: *string* Error message to be displayed when a type mismatch is detected.\n* **messageWhenValueMissing**: *string* Error message to be displayed when the value is missing.\n* **min**: *integer* The min value of the input range. This value defaults to 0.\n* **onblur**: *action* The action triggered when the slider releases focus.\n* **onchange**: *string* The action triggered when the slider value changes. You must pass any newly selected value back to the slider component to bind the new value to the slider.\n* **onfocus**: *action* The action triggered when the slider receives focus.\n* **size**: *string* The size value of the input range. This value default to empty, which is the base. Supports x-small, small, medium, and large.\n* **step**: *string* The step increment value of the input range. Example steps include 0.1, 1, or 10. This value defaults to 1.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **type**: *string* The type of the input range position. This value defaults to horizontal.\n* **value**: *integer* The numerical value of the input range. This value defaults to 0.\n* **variant**: *string* The variant changes the appearance of the slider. Accepted variants include standard and label-hidden. This value defaults to standard.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:slider",
  "insertText": "lightning:slider",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:slider"
  }
},
{
  "label": "lightning:spinner",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays an animated spinner.\n### Attributes\n* **alternativeText**: *string* The alternative text used to describe the reason for the wait and need for a spinner.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **size**: *string* The size of the spinner. Accepted sizes are small, medium, and large. This value defaults to medium.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **variant**: *string* The variant changes the appearance of the spinner. Accepted variants are base, brand, and inverse. This value defaults to base.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:spinner",
  "insertText": "lightning:spinner",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:spinner"
  }
},
{
  "label": "lightning:tab",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A single tab that is nested in a lightning:tabset component.\n### Attributes\n* **accesskey**: *string* Specifies a shortcut key to activate or focus an element.\n* **body**: *componentdefref[]* The body of the tab.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **iconAssistiveText**: *string* Assistive text for the icon specified by iconName.\n* **iconName**: *string* The Lightning Design System name of an icon to display to the left of the tab label. Specify the name in the format 'utility:down' where 'utility' is the category, and 'down' is the icon to be displayed. Only utility icons can be used in this component.\n* **id**: *string* The optional ID is used during tabset's onselect event to determine which tab was clicked.\n* **label**: *component[]* The text that appears on the tab. The attribute accepts string values, but for compatibility with previous releases also accepts a component type. Only the text portion of the label value displays and any CSS classes that are applied are ignored.\n* **onactive**: *action* The action triggered when this tab becomes active.\n* **onblur**: *action* The action triggered when the element releases focus.\n* **onfocus**: *action* The action triggered when the element receives focus.\n* **showErrorIndicator**: *boolean* Specifies whether there's an error in the tab content. An error icon is displayed to the right of the tab label.\n* **tabindex**: *integer* Specifies the tab order of an element (when the tab button is used for navigating).\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:tab",
  "insertText": "lightning:tab",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:tab"
  }
},
{
  "label": "lightning:tabset",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a list of tabs.\n### Attributes\n* **body**: *componentdefref[]* The body of the component. This could be one or more lightning:tab components.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **onselect**: *action* The action that will run when the tab is clicked.\n* **selectedTabId**: *string* Allows you to set a specific tab to open by default. If this attribute is not used, the first tab opens by default.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **variant**: *string* The variant changes the appearance of the tabset. Accepted variants are default, scoped, and vertical.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:tabset",
  "insertText": "lightning:tabset",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:tabset"
  }
},
{
  "label": "lightning:textarea",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a multiline text input.\n### Attributes\n* **accesskey**: *string* Specifies a shortcut key to activate or focus an element.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **disabled**: *boolean* Specifies that an input element should be disabled. This value defaults to false.\n* **label**: *string* Text that describes the desired textarea input.\n* **maxlength**: *integer* The maximum number of characters allowed in the textarea.\n* **messageWhenBadInput**: *string* Error message to be displayed when a bad input is detected.\n* **messageWhenTooLong**: *string* Error message to be displayed when the value is too long.\n* **messageWhenTooShort**: *string* Error message to be displayed when the value is too short.\n* **messageWhenValueMissing**: *string* Error message to be displayed when the value is missing.\n* **minlength**: *integer* The minimum number of characters allowed in the textarea.\n* **name**: *string* Specifies the name of an input element.\n* **onblur**: *action* The action triggered when the element releases focus.\n* **onchange**: *action* The action triggered when a value attribute changes.\n* **onfocus**: *action* The action triggered when the element receives focus.\n* **placeholder**: *string* Text that is displayed when the field is empty, to prompt the user for a valid entry.\n* **readonly**: *boolean* Specifies that an input field is read-only. This value defaults to false.\n* **required**: *boolean* Specifies that an input field must be filled out before submitting the form. This value defaults to false.\n* **tabindex**: *integer* Specifies the tab order of an element (when the tab button is used for navigating).\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n* **validity**: *object* Represents the validity states that an element can be in, with respect to constraint validation.\n* **value**: *string* The value of the textarea, also used as the default value during init.\n* **variant**: *string* The variant changes the appearance of an input field. Accepted variants include standard and label-hidden. This value defaults to standard.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:textarea",
  "insertText": "lightning:textarea",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:textarea"
  }
},
{
  "label": "lightning:tile",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A grouping of related information associated with a record.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **href**: *string* The URL of the page that the link goes to.\n* **label**: *string* The text label that displays in the tile and hover text.\n* **media**: *component[]* The icon or figure that's displayed next to the textual information.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:tile",
  "insertText": "lightning:tile",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:tile"
  }
},
{
  "label": "lightning:tree",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays a nested tree. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **header**: *string* The text that's displayed as the tree heading.\n* **items**: *object* An array of key-value pairs that describe the tree. Keys include label, name, disabled, expanded, and items.\n* **onselect**: *action* The action triggered when a tree item is selected.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:tree",
  "insertText": "lightning:tree",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:tree"
  }
},
{
  "label": "lightning:treeGrid",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays a hierarchical view of data in a table. This component requires API version 42.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **columns**: *list* Array of the columns object that's used to define the data types. Required properties include 'label', 'dataKey', and 'type'. The default type is 'text'.\n* **data**: *object* The array of data to be displayed.\n* **expandedRows**: *list* The array of unique row IDs that are expanded.\n* **hideCheckboxColumn**: *boolean* Hides or displays the checkbox column for row selection. To hide the checkbox column, set hideCheckboxColumn to true. The default is false.\n* **isLoading**: *boolean* Specifies whether more data is being loaded and displays a spinner if so. The default is false.\n* **keyField**: *string* Required for better performance. Associates each row with a unique ID.\n* **maxColumnWidth**: *integer* The maximum width for all columns. The default is 1000px.\n* **minColumnWidth**: *integer* The minimum width for all columns. The default is 50px.\n* **onresize**: *action* The action triggered when the table renders columns the first time and every time its resized an specific column.\n* **onrowaction**: *action* The action triggered when an operation its clicked. By default its to closes the actions menu.\n* **onrowselection**: *action* The action triggered when a row is selected.\n* **ontoggle**: *action* The action triggered when a row is toggled (expanded or collapsed).\n* **ontoggleall**: *action* The action triggered when all rows are toggled (expanded or collapsed).\n* **resizeColumnDisabled**: *boolean* Specifies whether column resizing is disabled. The default is false.\n* **rowNumberOffset**: *integer* Determines where to start counting the row number. The default is 0.\n* **selectedRows**: *list* The array of unique row IDs that are selected.\n* **showRowNumberColumn**: *boolean* Hides or displays the row number column. To show the row number column, set showRowNumberColumn to true. The default is false.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:treeGrid",
  "insertText": "lightning:treeGrid",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:treeGrid"
  }
},
{
  "label": "lightning:unsavedChanges",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A component that can be used to notify the UI containment hierarchy of unsaved changes\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **label**: *string* Label for the unsaved content which appears in prompt for save or discard\n* **ondiscard**: *action* Action to handle discarding unsaved content\n* **onsave**: *action* Action to handle saving unsaved content\n",
    "_isTrusted": false
  },
  "sortText": "lightning:unsavedChanges",
  "insertText": "lightning:unsavedChanges",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:unsavedChanges"
  }
},
{
  "label": "lightning:utilityBarAPI",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "The public API for the Utility Bar.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:utilityBarAPI",
  "insertText": "lightning:utilityBarAPI",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:utilityBarAPI"
  }
},
{
  "label": "lightning:utilityItem",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "This interface is used to denote that a component can be included in the utility bar.\n### Attributes\n* **supportsPopOut**: *boolean* Controls the availability of pop-out functionality.  Set to false to remove the pop-out option for the utility item.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:utilityItem",
  "insertText": "lightning:utilityItem",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:utilityItem"
  }
},
{
  "label": "lightning:verticalNavigation",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a vertical list of links that either take the user to another page or parts of the page the user is in. This component requires API version 41.0 and later.\n### Attributes\n* **ariaLabel**: *string* The aria label attribute for the navigation component\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **compact**: *boolean* Specify true to reduce spacing between navigation items. This value defaults to false.\n* **onbeforeselect**: *action* Action fired before an item is selected. The event params include the `name` of the selected item. To prevent the onselect handler from running, call event.preventDefault() in the onbeforeselect handler.\n* **onselect**: *action* Action fired when an item is selected. The event params include the `name` of the selected item.\n* **selectedItem**: *string* Name of the nagivation item to make active.\n* **shaded**: *boolean* Specify true when the vertical navigation is sitting on top of a shaded background. This value defaults to false.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:verticalNavigation",
  "insertText": "lightning:verticalNavigation",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:verticalNavigation"
  }
},
{
  "label": "lightning:verticalNavigationItem",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A text-only link within lightning:verticalNavigationSection or lightning:verticalNavigationOverflow. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **href**: *string* The URL of the page that the navigation item goes to.\n* **label**: *string* The text displayed for the navigation item.\n* **name**: *string* A unique identifier for the navigation item.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:verticalNavigationItem",
  "insertText": "lightning:verticalNavigationItem",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:verticalNavigationItem"
  }
},
{
  "label": "lightning:verticalNavigationItemBadge",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A link and badge within a lightning:verticalNavigationSection or lightning:verticalNavigationOverflow. This component requires API version 41.0 and later.\n### Attributes\n* **assistiveText**: *string* Assistive text describing the number in the badge. This is used to enhance accessibility and is not displayed to the user.\n* **badgeCount**: *integer* The number to show inside the badge. If this value is zero the badge will be hidden.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **href**: *string* The URL of the page that the navigation item goes to.\n* **label**: *string* The text displayed for this navigation item.\n* **name**: *string* A unique identifier for this navigation item.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:verticalNavigationItemBadge",
  "insertText": "lightning:verticalNavigationItemBadge",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:verticalNavigationItemBadge"
  }
},
{
  "label": "lightning:verticalNavigationItemIcon",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A link and icon within a lightning:verticalNavigationSection or lightning:verticalNavigationOverflow. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **href**: *string* The URL of the page that the navigation item goes to.\n* **iconName**: *string* The Lightning Design System name of the icon. Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed.\n* **label**: *string* The text displayed for this navigation item.\n* **name**: *string* A unique identifier for this navigation item.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:verticalNavigationItemIcon",
  "insertText": "lightning:verticalNavigationItemIcon",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:verticalNavigationItemIcon"
  }
},
{
  "label": "lightning:verticalNavigationOverflow",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents an overflow of items from a preceding lightning:verticalNavigationSection, with the ability to toggle visibility. This component requires API 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:verticalNavigationOverflow",
  "insertText": "lightning:verticalNavigationOverflow",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:verticalNavigationOverflow"
  }
},
{
  "label": "lightning:verticalNavigationSection",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a section within a lightning:verticalNavigation. This component requires API version 41.0 and later.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class for the outer element, in addition to the component's base classes.\n* **label**: *string* The heading text for this section.\n* **title**: *string* Displays tooltip text when the mouse moves over the element.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:verticalNavigationSection",
  "insertText": "lightning:verticalNavigationSection",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:verticalNavigationSection"
  }
},
{
  "label": "lightning:workspaceAPI",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "This is the Public API for accessing/manipulating workspaces (Tabs and Subtabs)\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n",
    "_isTrusted": false
  },
  "sortText": "lightning:workspaceAPI",
  "insertText": "lightning:workspaceAPI",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightning:workspaceAPI"
  }
},
{
  "label": "lightningcommunity:allowInRelaxedCSP",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "This interface is used to indicate that a component is allowed in a Relaxed CSP community page.\n### Attributes\n",
    "_isTrusted": false
  },
  "sortText": "lightningcommunity:allowInRelaxedCSP",
  "insertText": "lightningcommunity:allowInRelaxedCSP",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightningcommunity:allowInRelaxedCSP"
  }
},
{
  "label": "lightningcommunity:backButton",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Icon button to navigate to previous community page in myCommnunity IOS app.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* Styling class for back button.\n* **iconName**: *string* The Lightning Design System name of the icon. Only utility icons can be used in this component.\n* **onnavigationcomplete**: *action* Event handler action fired after every page navigation is complete. 'navigationcomplete' event provides 'canGoBack' boolean parameter value.\n",
    "_isTrusted": false
  },
  "sortText": "lightningcommunity:backButton",
  "insertText": "lightningcommunity:backButton",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightningcommunity:backButton"
  }
},
{
  "label": "lightningsnapin:minimizedAPI",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Enables you to customize your user interface for the minimized snap-in in Snap-ins for web.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n",
    "_isTrusted": false
  },
  "sortText": "lightningsnapin:minimizedAPI",
  "insertText": "lightningsnapin:minimizedAPI",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightningsnapin:minimizedAPI"
  }
},
{
  "label": "lightningsnapin:minimizedUI",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "This marker interface is used to indicate that a component can be used as the user interface for a minimized snap-in.\n### Attributes\n",
    "_isTrusted": false
  },
  "sortText": "lightningsnapin:minimizedUI",
  "insertText": "lightningsnapin:minimizedUI",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightningsnapin:minimizedUI"
  }
},
{
  "label": "lightningsnapin:prechatAPI",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Enables customization of the user interface for the pre-chat page in Snap-ins Chat. Your custom pre-chat component must implement the lightningsnapin:prechatUI interface.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n",
    "_isTrusted": false
  },
  "sortText": "lightningsnapin:prechatAPI",
  "insertText": "lightningsnapin:prechatAPI",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightningsnapin:prechatAPI"
  }
},
{
  "label": "lightningsnapin:prechatUI",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "This marker interface is used to indicate that a component can be used with Snap-Ins Pre-Chat.\n### Attributes\n",
    "_isTrusted": false
  },
  "sortText": "lightningsnapin:prechatUI",
  "insertText": "lightningsnapin:prechatUI",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightningsnapin:prechatUI"
  }
},
{
  "label": "lightningsnapin:settingsAPI",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Enables you to fetch certain settings from within your custom components for Snap-ins for web.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n",
    "_isTrusted": false
  },
  "sortText": "lightningsnapin:settingsAPI",
  "insertText": "lightningsnapin:settingsAPI",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "lightningsnapin:settingsAPI"
  }
},
{
  "label": "ltng:allowGuestAccess",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Allows guest user access on an application.\n### Attributes\n",
    "_isTrusted": false
  },
  "sortText": "ltng:allowGuestAccess",
  "insertText": "ltng:allowGuestAccess",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ltng:allowGuestAccess"
  }
},
{
  "label": "ltng:require",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Loads scripts and stylesheets while maintaining dependency order. The styles are loaded in the order that they are listed. The styles only load once if they are specified in multiple <ltng:require> tags in the same component or across different components.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **scripts**: *string[]* The set of scripts in dependency order that will be loaded.\n* **styles**: *string[]* The set of style sheets in dependency order that will be loaded.\n",
    "_isTrusted": false
  },
  "sortText": "ltng:require",
  "insertText": "ltng:require",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ltng:require"
  }
},
{
  "label": "ui:actionMenuItem",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A menu item that triggers an action. This component is nested in a ui:menu component.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **hideMenuAfterSelected**: *boolean* Set to true to hide menu after the menu item is selected.\n* **label**: *string* The text displayed on the component.\n* **selected**: *boolean* The status of the menu item. True means this menu item is selected; False is not selected.\n* **type**: *string* The concrete type of the menu item. Accepted values are 'action', 'checkbox', 'radio', 'separator' or any namespaced component descriptor, e.g. ns:xxxxmenuItem.\n",
    "_isTrusted": false
  },
  "sortText": "ui:actionMenuItem",
  "insertText": "ui:actionMenuItem",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:actionMenuItem"
  }
},
{
  "label": "ui:button",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a button element.\n### Attributes\n* **accesskey**: *string* The keyboard access key that puts the button in focus. When the button is in focus, pressing Enter clicks the button.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **buttonTitle**: *string* The text displayed in a tooltip when the mouse pointer hovers over the button.\n* **buttonType**: *string* Specifies the type of button. Possible values: reset, submit, or button. This value defaults to button.\n* **class**: *string* A CSS style to be attached to the button. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether this button should be displayed in a disabled state. Disabled buttons can't be clicked. Default value is \"false\".\n* **label**: *string* The text displayed on the button. Corresponds to the value attribute of the rendered HTML input element.\n* **labelClass**: *string* A CSS style to be attached to the label. This style is added in addition to base styles output by the component.\n",
    "_isTrusted": false
  },
  "sortText": "ui:button",
  "insertText": "ui:button",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:button"
  }
},
{
  "label": "ui:checkboxMenuItem",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "​A menu item with a checkbox that supports multiple selection and can be used to invoke an action. This component is nested in a ui:menu component.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **hideMenuAfterSelected**: *boolean* Set to true to hide menu after the menu item is selected.\n* **label**: *string* The text displayed on the component.\n* **selected**: *boolean* The status of the menu item. True means this menu item is selected; False is not selected.\n* **type**: *string* The concrete type of the menu item. Accepted values are 'action', 'checkbox', 'radio', 'separator' or any namespaced component descriptor, e.g. ns:xxxxmenuItem.\n",
    "_isTrusted": false
  },
  "sortText": "ui:checkboxMenuItem",
  "insertText": "ui:checkboxMenuItem",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:checkboxMenuItem"
  }
},
{
  "label": "ui:inputCheckbox",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a checkbox. Its behavior can be configured using events such as click and change.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **errors**: *object[]* The list of errors to be displayed.\n* **label**: *string* The text displayed on the component.\n* **labelClass**: *string* The CSS class of the label component\n* **name**: *string* The name of the component.\n* **required**: *boolean* Specifies whether the input is required. Default value is \"false\".\n* **requiredIndicatorClass**: *string* The CSS class of the required indicator component\n* **text**: *string* The input value attribute.\n* **updateOn**: *string* Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change,click\".\n* **value**: *boolean* Indicates whether the status of the option is selected. Default value is “false”.\n",
    "_isTrusted": false
  },
  "sortText": "ui:inputCheckbox",
  "insertText": "ui:inputCheckbox",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:inputCheckbox"
  }
},
{
  "label": "ui:inputCurrency",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "An input field for entering a currency.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **errors**: *object[]* The list of errors to be displayed.\n* **format**: *string* The format of the number. For example, format=“.00” displays the number followed by two decimal places. If not specified, the Locale default format will be used.\n* **label**: *string* The text of the label component\n* **labelClass**: *string* The CSS class of the label component\n* **maxlength**: *integer* The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.\n* **placeholder**: *string* Text that is displayed when the field is empty, to prompt the user for a valid entry.\n* **required**: *boolean* Specifies whether the input is required. Default value is \"false\".\n* **requiredIndicatorClass**: *string* The CSS class of the required indicator component\n* **size**: *integer* The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.\n* **updateOn**: *string* Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".\n* **value**: *decimal* The input value of the number.\n",
    "_isTrusted": false
  },
  "sortText": "ui:inputCurrency",
  "insertText": "ui:inputCurrency",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:inputCurrency"
  }
},
{
  "label": "ui:inputDate",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "An input field for entering a date.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **displayDatePicker**: *boolean* Indicates if an icon that triggers the date picker is displayed in the field. The default is false.\n* **errors**: *object[]* The list of errors to be displayed.\n* **format**: *string* The java.text.SimpleDateFormat style format string.\n* **label**: *string* The text of the label component\n* **labelClass**: *string* The CSS class of the label component\n* **langLocale**: *string* Deprecated. The language locale used to format date time. It only allows to use the value which is provided by Locale Value Provider, otherwise, it falls back to the value of $Locale.langLocale. It will be removed in an upcoming release.\n* **required**: *boolean* Specifies whether the input is required. Default value is \"false\".\n* **requiredIndicatorClass**: *string* The CSS class of the required indicator component\n* **updateOn**: *string* Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".\n* **value**: *string* The input value of the date/time as an ISO string.\n",
    "_isTrusted": false
  },
  "sortText": "ui:inputDate",
  "insertText": "ui:inputDate",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:inputDate"
  }
},
{
  "label": "ui:inputDateTime",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "An input field for entering a date and time.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **displayDatePicker**: *boolean* Indicates if an icon that triggers the date picker is displayed in the field. The default is false.\n* **errors**: *object[]* The list of errors to be displayed.\n* **format**: *string* The java.text.SimpleDateFormat style format string.\n* **label**: *string* The text of the label component\n* **labelClass**: *string* The CSS class of the label component\n* **langLocale**: *string* Deprecated. The language locale used to format date time. It only allows to use the value which is provided by Locale Value Provider, otherwise, it falls back to the value of $Locale.langLocale. It will be removed in an upcoming release.\n* **required**: *boolean* Specifies whether the input is required. Default value is \"false\".\n* **requiredIndicatorClass**: *string* The CSS class of the required indicator component\n* **updateOn**: *string* Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".\n* **value**: *string* The input value of the date/time as an ISO string.\n",
    "_isTrusted": false
  },
  "sortText": "ui:inputDateTime",
  "insertText": "ui:inputDateTime",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:inputDateTime"
  }
},
{
  "label": "ui:inputDefaultError",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "The default implementation of field-level errors, which iterates over the value and displays the message.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **value**: *string[]* The list of errors strings to be displayed.\n",
    "_isTrusted": false
  },
  "sortText": "ui:inputDefaultError",
  "insertText": "ui:inputDefaultError",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:inputDefaultError"
  }
},
{
  "label": "ui:inputEmail",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents an input field for entering an email address.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **errors**: *object[]* The list of errors to be displayed.\n* **label**: *string* The text of the label component\n* **labelClass**: *string* The CSS class of the label component\n* **maxlength**: *integer* The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.\n* **placeholder**: *string* Text that is displayed when the field is empty, to prompt the user for a valid entry.\n* **required**: *boolean* Specifies whether the input is required. Default value is \"false\".\n* **requiredIndicatorClass**: *string* The CSS class of the required indicator component\n* **size**: *integer* The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.\n* **updateOn**: *string* Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".\n* **value**: *string* The value currently in the input field.\n",
    "_isTrusted": false
  },
  "sortText": "ui:inputEmail",
  "insertText": "ui:inputEmail",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:inputEmail"
  }
},
{
  "label": "ui:inputNumber",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "An input field for entering a number, taking advantage of client input assistance and validation when available.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **errors**: *object[]* The list of errors to be displayed.\n* **format**: *string* The format of the number. For example, format=“.00” displays the number followed by two decimal places. If not specified, the Locale default format will be used.\n* **label**: *string* The text of the label component\n* **labelClass**: *string* The CSS class of the label component\n* **maxlength**: *integer* The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.\n* **placeholder**: *string* Text that is displayed when the field is empty, to prompt the user for a valid entry.\n* **required**: *boolean* Specifies whether the input is required. Default value is \"false\".\n* **requiredIndicatorClass**: *string* The CSS class of the required indicator component\n* **size**: *integer* The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.\n* **updateOn**: *string* Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".\n* **value**: *decimal* The input value of the number.\n",
    "_isTrusted": false
  },
  "sortText": "ui:inputNumber",
  "insertText": "ui:inputNumber",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:inputNumber"
  }
},
{
  "label": "ui:inputPhone",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents an input field for entering a telephone number.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **errors**: *object[]* The list of errors to be displayed.\n* **label**: *string* The text of the label component\n* **labelClass**: *string* The CSS class of the label component\n* **maxlength**: *integer* The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.\n* **placeholder**: *string* Text that is displayed when the field is empty, to prompt the user for a valid entry.\n* **required**: *boolean* Specifies whether the input is required. Default value is \"false\".\n* **requiredIndicatorClass**: *string* The CSS class of the required indicator component\n* **size**: *integer* The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.\n* **updateOn**: *string* Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".\n* **value**: *string* The value currently in the input field.\n",
    "_isTrusted": false
  },
  "sortText": "ui:inputPhone",
  "insertText": "ui:inputPhone",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:inputPhone"
  }
},
{
  "label": "ui:inputRadio",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "The radio button used in the input.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether this radio button should be displayed in a disabled state. Disabled radio buttons can't be clicked. Default value is \"false\".\n* **errors**: *object[]* The list of errors to be displayed.\n* **label**: *string* The text displayed on the component.\n* **labelClass**: *string* The CSS class of the label component\n* **name**: *string* The name of the component.\n* **required**: *boolean* Specifies whether the input is required. Default value is \"false\".\n* **requiredIndicatorClass**: *string* The CSS class of the required indicator component\n* **text**: *string* The input value attribute.\n* **updateOn**: *string* Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".\n* **value**: *boolean* Indicates whether the status of the option is selected. Default value is “false”.\n",
    "_isTrusted": false
  },
  "sortText": "ui:inputRadio",
  "insertText": "ui:inputRadio",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:inputRadio"
  }
},
{
  "label": "ui:inputRichText",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "An input field for entering rich text. This component is not supported by LockerService.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **cols**: *integer* The width of the text area, which is defined by the number of characters to display in a single row at a time. Default value is “20”.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **errors**: *object[]* The list of errors to be displayed.\n* **height**: *string* The height of the editing area (that includes the editor content). This can be an integer, for pixel sizes, or any CSS-defined length unit.\n* **label**: *string* The text of the label component\n* **labelClass**: *string* The CSS class of the label component\n* **maxlength**: *integer* The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML textarea element.\n* **placeholder**: *string* The text that is displayed by default.\n* **readonly**: *boolean* Specifies whether the text area should be rendered as read-only. Default value is “false”.\n* **required**: *boolean* Specifies whether the input is required. Default value is \"false\".\n* **requiredIndicatorClass**: *string* The CSS class of the required indicator component\n* **resizable**: *boolean* Specifies whether or not the textarea should be resizable.  Defaults to true.\n* **rows**: *integer* The height of the text area, which is defined by the number of rows to display at a time. Default value is “2”.\n* **updateOn**: *string* Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".\n* **value**: *string* The value currently in the input field.\n* **width**: *string* The editor UI outer width. This can be an integer, for pixel sizes, or any CSS-defined unit. If isRichText is set to false, use the cols attribute instead.\n",
    "_isTrusted": false
  },
  "sortText": "ui:inputRichText",
  "insertText": "ui:inputRichText",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:inputRichText"
  }
},
{
  "label": "ui:inputSecret",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "An input field for entering secret text with type password.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **errors**: *object[]* The list of errors to be displayed.\n* **label**: *string* The text of the label component\n* **labelClass**: *string* The CSS class of the label component\n* **maxlength**: *integer* The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.\n* **placeholder**: *string* Text that is displayed when the field is empty, to prompt the user for a valid entry.\n* **required**: *boolean* Specifies whether the input is required. Default value is \"false\".\n* **requiredIndicatorClass**: *string* The CSS class of the required indicator component\n* **size**: *integer* The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.\n* **updateOn**: *string* Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".\n* **value**: *string* The value currently in the input field.\n",
    "_isTrusted": false
  },
  "sortText": "ui:inputSecret",
  "insertText": "ui:inputSecret",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:inputSecret"
  }
},
{
  "label": "ui:inputSelect",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a drop-down list with options.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **errors**: *object[]* The list of errors to be displayed.\n* **label**: *string* The text of the label component\n* **labelClass**: *string* The CSS class of the label component\n* **multiple**: *boolean* Specifies whether the input is a multiple select. Default value is “false”.\n* **options**: *list* A list of options to use for the select. Note: setting this attribute will make the component ignore v.body\n* **required**: *boolean* Specifies whether the input is required. Default value is \"false\".\n* **requiredIndicatorClass**: *string* The CSS class of the required indicator component\n* **updateOn**: *string* Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".\n* **value**: *string* The value currently in the input field.\n",
    "_isTrusted": false
  },
  "sortText": "ui:inputSelect",
  "insertText": "ui:inputSelect",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:inputSelect"
  }
},
{
  "label": "ui:inputSelectOption",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "An HTML option element that is nested in a ui:inputSelect component. Denotes the available options in the list.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **label**: *string* The text displayed on the component.\n* **name**: *string* The name of the component.\n* **text**: *string* The input value attribute.\n* **value**: *boolean* Indicates whether the status of the option is selected. Default value is “false”.\n",
    "_isTrusted": false
  },
  "sortText": "ui:inputSelectOption",
  "insertText": "ui:inputSelectOption",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:inputSelectOption"
  }
},
{
  "label": "ui:inputText",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents an input field suitable for entering a single line of free-form text.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **errors**: *object[]* The list of errors to be displayed.\n* **label**: *string* The text of the label component\n* **labelClass**: *string* The CSS class of the label component\n* **maxlength**: *integer* The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.\n* **placeholder**: *string* Text that is displayed when the field is empty, to prompt the user for a valid entry.\n* **required**: *boolean* Specifies whether the input is required. Default value is \"false\".\n* **requiredIndicatorClass**: *string* The CSS class of the required indicator component\n* **size**: *integer* The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.\n* **updateOn**: *string* Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".\n* **value**: *string* The value currently in the input field.\n",
    "_isTrusted": false
  },
  "sortText": "ui:inputText",
  "insertText": "ui:inputText",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:inputText"
  }
},
{
  "label": "ui:inputTextArea",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "An HTML textarea element that can be editable or read-only. Scroll bars may not appear on Chrome browsers in Android devices, but you can select focus in the textarea to activate scrolling.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **cols**: *integer* The width of the text area, which is defined by the number of characters to display in a single row at a time. Default value is “20”.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **errors**: *object[]* The list of errors to be displayed.\n* **label**: *string* The text of the label component\n* **labelClass**: *string* The CSS class of the label component\n* **maxlength**: *integer* The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML textarea element.\n* **placeholder**: *string* The text that is displayed by default.\n* **readonly**: *boolean* Specifies whether the text area should be rendered as read-only. Default value is “false”.\n* **required**: *boolean* Specifies whether the input is required. Default value is \"false\".\n* **requiredIndicatorClass**: *string* The CSS class of the required indicator component\n* **resizable**: *boolean* Specifies whether or not the textarea should be resizable.  Defaults to true.\n* **rows**: *integer* The height of the text area, which is defined by the number of rows to display at a time. Default value is “2”.\n* **updateOn**: *string* Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".\n* **value**: *string* The value currently in the input field.\n",
    "_isTrusted": false
  },
  "sortText": "ui:inputTextArea",
  "insertText": "ui:inputTextArea",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:inputTextArea"
  }
},
{
  "label": "ui:inputURL",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "An input field for entering a URL.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **errors**: *object[]* The list of errors to be displayed.\n* **label**: *string* The text of the label component\n* **labelClass**: *string* The CSS class of the label component\n* **maxlength**: *integer* The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.\n* **placeholder**: *string* Text that is displayed when the field is empty, to prompt the user for a valid entry.\n* **required**: *boolean* Specifies whether the input is required. Default value is \"false\".\n* **requiredIndicatorClass**: *string* The CSS class of the required indicator component\n* **size**: *integer* The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.\n* **updateOn**: *string* Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".\n* **value**: *string* The value currently in the input field.\n",
    "_isTrusted": false
  },
  "sortText": "ui:inputURL",
  "insertText": "ui:inputURL",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:inputURL"
  }
},
{
  "label": "ui:menu",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A dropdown menu list with a trigger that controls its visibility. To create a clickable link and menu items, use ui:menuTriggerLink and and ui:menuList component.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n",
    "_isTrusted": false
  },
  "sortText": "ui:menu",
  "insertText": "ui:menu",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:menu"
  }
},
{
  "label": "ui:menuItem",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A UI menu item in a ui:menuList component.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **hideMenuAfterSelected**: *boolean* Set to true to hide menu after the menu item is selected.\n* **label**: *string* The text displayed on the component.\n* **selected**: *boolean* The status of the menu item. True means this menu item is selected; False is not selected.\n* **type**: *string* The concrete type of the menu item. Accepted values are 'action', 'checkbox', 'radio', 'separator' or any namespaced component descriptor, e.g. ns:xxxxmenuItem.\n",
    "_isTrusted": false
  },
  "sortText": "ui:menuItem",
  "insertText": "ui:menuItem",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:menuItem"
  }
},
{
  "label": "ui:menuItemSeparator",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A menu separator to divide menu items, such as ui:radioMenuItem, and used in a ui:menuList component.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n",
    "_isTrusted": false
  },
  "sortText": "ui:menuItemSeparator",
  "insertText": "ui:menuItemSeparator",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:menuItemSeparator"
  }
},
{
  "label": "ui:menuList",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A menu component that contains menu items.\n### Attributes\n* **autoPosition**: *boolean* Move the popup target up when there is not enough space at the bottom to display. Note: even if autoPosition is set to false, popup will still position the menu relative to the trigger. To override default positioning, use manualPosition attribute.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **closeOnClickOutside**: *boolean* Close target when user clicks or taps outside of the target\n* **closeOnTabKey**: *boolean* Indicates whether to close the target list on tab key or not.\n* **curtain**: *boolean* Whether or not to apply an overlay under the target.\n* **menuItems**: *list* A list of menu items set explicitly using instances of the Java class: aura.​components.​ui.MenuItem.\n* **visible**: *boolean* Controls the visibility of the menu. The default is false, which hides the menu.\n",
    "_isTrusted": false
  },
  "sortText": "ui:menuList",
  "insertText": "ui:menuList",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:menuList"
  }
},
{
  "label": "ui:menuTrigger",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A clickable link that expands and collapses a menu. To create a link for ui:menu, use ui:menuTriggerLink instead.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **label**: *string* The text displayed on the component.\n* **title**: *string* The text to display as a tooltip when the mouse pointer hovers over this component.\n",
    "_isTrusted": false
  },
  "sortText": "ui:menuTrigger",
  "insertText": "ui:menuTrigger",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:menuTrigger"
  }
},
{
  "label": "ui:menuTriggerLink",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "A link that triggers a dropdown menu used in ui:menu\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **label**: *string* The text displayed on the component.\n* **title**: *string* The text to display as a tooltip when the mouse pointer hovers over this component.\n",
    "_isTrusted": false
  },
  "sortText": "ui:menuTriggerLink",
  "insertText": "ui:menuTriggerLink",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:menuTriggerLink"
  }
},
{
  "label": "ui:message",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Represents a message of varying severity levels\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **closable**: *boolean* Specifies whether to display an 'x' that will close the alert when clicked. Default value is 'false'.\n* **severity**: *string* The severity of the message. Possible values:  message (default), confirm, info, warning, error\n* **title**: *string* The title text for the message.\n",
    "_isTrusted": false
  },
  "sortText": "ui:message",
  "insertText": "ui:message",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:message"
  }
},
{
  "label": "ui:outputCheckbox",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays a checkbox in a checked or unchecked state.\n### Attributes\n* **altChecked**: *string* The alternate text description when the checkbox is checked. Default value is “True”.\n* **altUnchecked**: *string* The alternate text description when the checkbox is unchecked. Default value is “False”.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **value**: *boolean* Specifies whether the checkbox is checked.\n",
    "_isTrusted": false
  },
  "sortText": "ui:outputCheckbox",
  "insertText": "ui:outputCheckbox",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:outputCheckbox"
  }
},
{
  "label": "ui:outputCurrency",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays the currency in the default or specified format, such as with specific currency code or decimal places.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **currencyCode**: *string* The ISO 4217 currency code specified as a String, e.g. “USD”.\n* **currencySymbol**: *string* The currency symbol specified as a String.\n* **format**: *string* The format of the number. For example, format=“.00” displays the number followed by two decimal places. If not specified, the default format based on the browser's locale will be used.\n* **value**: *decimal* The output value of the currency, which is defined as type Decimal.\n",
    "_isTrusted": false
  },
  "sortText": "ui:outputCurrency",
  "insertText": "ui:outputCurrency",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:outputCurrency"
  }
},
{
  "label": "ui:outputDate",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays a date in the default or specified format based on the user's locale.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **format**: *string* A string (pattern letters are defined in java.text.SimpleDateFormat) used to format the date and time of the value attribute.\n* **langLocale**: *string* Deprecated. The language locale used to format date value. It only allows to use the value which is provided by Locale Value Provider, otherwise, it falls back to the value of $Locale.langLocale. It will be removed in an upcoming release.\n* **value**: *string* The output value of the date. It should be a date string in ISO-8601 format (YYYY-MM-DD).\n",
    "_isTrusted": false
  },
  "sortText": "ui:outputDate",
  "insertText": "ui:outputDate",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:outputDate"
  }
},
{
  "label": "ui:outputDateTime",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays a date, time in a specified or default format based on the user's locale.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **format**: *string* A string (pattern letters are defined in java.text.SimpleDateFormat) used to format the date and time of the value attribute.\n* **langLocale**: *string* Deprecated. The language locale used to format date value. It only allows to use the value which is provided by Locale Value Provider, otherwise, it falls back to the value of $Locale.langLocale. It will be removed in an upcoming release.\n* **timezone**: *string* The timezone ID, for example, America/Los_Angeles.\n* **value**: *string* An ISO8601-formatted string representing a date time.\n",
    "_isTrusted": false
  },
  "sortText": "ui:outputDateTime",
  "insertText": "ui:outputDateTime",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:outputDateTime"
  }
},
{
  "label": "ui:outputEmail",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays an email address in an HTML anchor (<a>) element. The leading and trailing space are trimmed.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **value**: *string* The output value of the email\n",
    "_isTrusted": false
  },
  "sortText": "ui:outputEmail",
  "insertText": "ui:outputEmail",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:outputEmail"
  }
},
{
  "label": "ui:outputNumber",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays the number in the default or specified format. Supports up to 18 digits before the decimal place.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **format**: *string* The format of the number. For example, format=“.00” displays the number followed by two decimal places. If not specified, the Locale default format will be used.\n* **value**: *decimal* The number displayed when this component is rendered.\n",
    "_isTrusted": false
  },
  "sortText": "ui:outputNumber",
  "insertText": "ui:outputNumber",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:outputNumber"
  }
},
{
  "label": "ui:outputPhone",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays the phone number in a URL link format.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **value**: *string* The phone number displayed when this component is rendered.\n",
    "_isTrusted": false
  },
  "sortText": "ui:outputPhone",
  "insertText": "ui:outputPhone",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:outputPhone"
  }
},
{
  "label": "ui:outputRichText",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays formatted text including tags such as paragraph, image, and hyperlink, as specified in the value attribute.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **linkify**: *boolean* Indicates if the URLs in the text are set to render as hyperlinks.\n* **value**: *string* The formatted text used for output.\n",
    "_isTrusted": false
  },
  "sortText": "ui:outputRichText",
  "insertText": "ui:outputRichText",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:outputRichText"
  }
},
{
  "label": "ui:outputText",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays text as specified by the value attribute.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **title**: *string* Displays extra information as hover text.\n* **value**: *string* The text displayed when this component is rendered.\n",
    "_isTrusted": false
  },
  "sortText": "ui:outputText",
  "insertText": "ui:outputText",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:outputText"
  }
},
{
  "label": "ui:outputTextArea",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays the text area as specified by the value attribute.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **linkify**: *boolean* Indicates if the URLs in the text are set to render as hyperlinks.\n* **value**: *string* The text to display.\n",
    "_isTrusted": false
  },
  "sortText": "ui:outputTextArea",
  "insertText": "ui:outputTextArea",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:outputTextArea"
  }
},
{
  "label": "ui:outputURL",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Displays a link to a URL as specified by the value attribute, rendered on a given text (label attribute) and image, if any.\n### Attributes\n* **alt**: *string* The alternate text description for image (used when there is no label)\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **iconClass**: *string* The CSS style used to display the icon or image.\n* **label**: *string* The text displayed on the component.\n* **target**: *string* The target destination where this rendered component is displayed. Possible values: _blank, _parent, _self, _top\n* **title**: *string* The text to display as a tooltip when the mouse pointer hovers over this component.\n* **value**: *string* The URL of the page that the link goes to.\n",
    "_isTrusted": false
  },
  "sortText": "ui:outputURL",
  "insertText": "ui:outputURL",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:outputURL"
  }
},
{
  "label": "ui:radioMenuItem",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "​A menu item with a radio button that indicates a mutually exclusive selection and can be used to invoke an action. This component is nested in a ui:menu component.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS style to be attached to the component. This style is added in addition to base styles output by the component.\n* **disabled**: *boolean* Specifies whether the component should be displayed in a disabled state. Default value is \"false\".\n* **hideMenuAfterSelected**: *boolean* Set to true to hide menu after the menu item is selected.\n* **label**: *string* The text displayed on the component.\n* **selected**: *boolean* The status of the menu item. True means this menu item is selected; False is not selected.\n* **type**: *string* The concrete type of the menu item. Accepted values are 'action', 'checkbox', 'radio', 'separator' or any namespaced component descriptor, e.g. ns:xxxxmenuItem.\n",
    "_isTrusted": false
  },
  "sortText": "ui:radioMenuItem",
  "insertText": "ui:radioMenuItem",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:radioMenuItem"
  }
},
{
  "label": "ui:scrollerWrapper",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Creates a container that enables native scrolling in the Salesforce app.\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **class**: *string* A CSS class applied to the outer element. This style is in addition to base classes output by the component.\n",
    "_isTrusted": false
  },
  "sortText": "ui:scrollerWrapper",
  "insertText": "ui:scrollerWrapper",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "ui:scrollerWrapper"
  }
},
{
  "label": "wave:sdk",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "null\n### Attributes\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n",
    "_isTrusted": false
  },
  "sortText": "wave:sdk",
  "insertText": "wave:sdk",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "wave:sdk"
  }
},
{
  "label": "wave:waveDashboard",
  "kind": "Property",
  "detail": "Lightning",
  "documentation": {
    "_value": "Use this component to add a Salesforce Einstein Analytics dashboard to a Lightning Experience page.\n### Attributes\n* **accessToken**: *string* A valid access token obtained by logging into Salesforce. Useful when the component is used by Lightning Out in a non salesforce domain.\n* **body**: *component[]* The body of the component. In markup, this is everything in the body of the tag.\n* **dashboardId**: *string* The unique ID of the dashboard. You can get a dashboard’s ID, an 18-character code beginning with 0FK, from the dashboard's URL, or you can request it through the API. This attribute can be used instead of the developer name, but it can't be included if the name has been set. One of the two is required.\n* **developerName**: *string* The unique developer name of the dashboard. You can request the developer name through the API. This attribute can be used instead of the dashboard ID, but it can't be included if the ID has been set. One of the two is required.\n* **filter**: *string* Adds selections or filters to the embedded dashboard at runtime. The filter attribute is configured using JSON. For filtering by dimension, use this syntax: {'datasets' : {'dataset1': [ {'fields': ['field1'], 'selection': ['$value1', '$value2']}, {'fields': ['field2'], 'filter': { 'operator': 'operator1', 'values': ['$value3', '$value4']}}]}}. For filtering on measures, use this syntax: {'datasets' : {'dataset1': [ {'fields': ['field1'], 'selection': ['$value1', '$value2']}, {'fields': ['field2'], 'filter': { 'operator': 'operator1', 'values': [[$value3]]}}]}}. With the selection option, the dashboard is shown with all its data, and the specified dimension values are highlighted. With the filter option, the dashboard is shown with only filtered data. For more information, see https://help.salesforce.com/articleView?id=bi_embed_lightning.htm.\n* **height**: *integer* Specifies the height of the dashboard, in pixels.\n* **hideOnError**: *boolean* Controls whether or not users see a dashboard that has an error. When this attribute is set to true, if the dashboard has an error, it won’t appear on the page. When set to false, the dashboard appears but doesn’t show any data. An error can occur when a user doesn't have access to the dashboard or it has been deleted. \n* **openLinksInNewWindow**: *boolean* If false, links to other dashboards will be opened in the same window.\n* **recordId**: *string* Id of the current entity in the context of which the component is being displayed.\n* **rendered**: *boolean* Specifies whether or not the component is rendered on the page.\n* **showHeader**: *boolean* If true, the dashboard is displayed with a header bar that includes dashboard information and controls. If false, the dashboard appears without a header bar. Note that the header bar automatically appears when either showSharing or showTitle is true.\n* **showSharing**: *boolean* If true, and the dashboard is shareable, then the dashboard shows the Share icon. If false, the dashboard doesn't show the Share icon. To show the Share icon in the dashboard, the smallest supported frame size is 800 x 612 pixels.\n* **showTitle**: *boolean* If true, the dashboard’s title is included above the dashboard. If false, the dashboard appears without a title.\n",
    "_isTrusted": false
  },
  "sortText": "wave:waveDashboard",
  "insertText": "wave:waveDashboard",
  "textEdit": {
    "range": [{ "line": 1, "character": 8 }, { "line": 1, "character": 10 }],
    "newText": "wave:waveDashboard"
  }
})
