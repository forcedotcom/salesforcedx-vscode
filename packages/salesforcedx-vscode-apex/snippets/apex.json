{
    "Class": {
        "prefix": "class",
        "body": [
            "${1|global,public,private|} with sharing class ${2:MyClass} {",
            "\t$0",
            "}"
        ],
        "description": "Class"
    },
    "Interface": {
        "prefix": "interface",
        "body": [
            "${1|global,public,private|} interface ${2:MyInterface} {",
            "\t$0",
            "}"
        ],
        "description": "Interface"
    },
    "Enum": {
        "prefix": "enum",
        "body": [
            "${1|global,public,private|} enum ${2:MyEnum} {",
            "\t$0",
            "}"
        ],
        "description": "Enum"
    },
    "System Debug": {
        "prefix": "debug",
        "body": [
            "System.debug($0)"
        ],
        "description": "System.debug"
    },
    "DescribeFieldResult": {
        "prefix": "dfr",
        "body": [
            "${1:SObjectType}.SObjectType.fields.${2:SObjectField}.getDescribe()"
        ],
        "description": "Get DescribeFieldResult"
    },
    "DescribeSObjectResult": {
        "prefix": "dsr",
        "body": [
            "${1:SObjectType}.SObjectType.getDescribe()"
        ],
        "description": "Get DescribeSObjectResult"
    },
    "Assert Fail": {
        "prefix": "fail",
        "body": [
            "System.assert(false, $0)"
        ],
        "description": "False assertion"
    },
    "do...while loop": {
        "prefix": "do",
        "body": [
            "do {",
            "\t$0",
            "} while (${1:true});"
        ],
        "description": "do...while loop"
    },
    "while loop": {
        "prefix": "while",
        "body": [
            "while (${1:true}) {",
            "\t$0",
            "}"
        ],
        "description": "do...while loop"
    },
    "for": {
        "prefix": "for",
        "body": [
            "for (${1:variable} : ${2:List_or_set}) {",
            "\t$0",
            "}"
        ],
        "description": "for loop"
    },
    "for soql": {
        "prefix": "fors",
        "body": [
            "for (${1:variable} : [${2:SOQL}]) {",
            "\t$0",
            "}"
        ],
        "description": "for loop"
    },
    "Reverse for loop": {
        "prefix": "forr",
        "body": [
            "for (Integer ${1:i} = ${2:length} - 1; ${1:i} >= 0 ; ${1:i}--) {",
            "\t$0",
            "}"
        ],
        "description": "Reverse for loop"
    },
    "for loop": {
        "prefix": "fori",
        "body": [
            "for (Integer ${1:i} = 0; ${1:i} < ${2:length}; ${1:i}++) {",
            "\t$0",
            "}"
        ],
        "description": "indexed for loop"
    },
    "if statement": {
        "prefix": "if",
        "body": [
            "if (${1:true}) {",
            "\t$0",
            "}"
        ],
        "description": "if statement"
    },
    "Else statement": {
        "prefix": "else",
        "body": [
            "else {",
            "\t$0",
            "}"
        ],
        "description": "Else statement"
    },
    "Try finally": {
        "prefix": "tryf",
        "body": [
            "try {",
            "\t$1",
            "} finally {",
            "\t$0",
            "}"
        ],
        "description": "Try finally"
    },
    "Try catch": {
        "prefix": "try",
        "body": [
            "try {",
            "\t$1",
            "} catch (${2:Exception}) {",
            "\t$0",
            "}"
        ],
        "description": "Try catch"
    },
    "Try catch finally": {
        "prefix": "trycf",
        "body": [
            "try {",
            "\t$1",
            "} catch (${2:Exception}) {",
            "\t$3",
            "} finally {",
            "\t$0",
            "}"
        ],
        "description": "Try catch finally"
    },
    "Switch statement": {
        "prefix": "switch",
        "body": [
            "switch on ${1:switch_on} {",
            "\twhen $2 {",
            "\t\t$3",
            "\t}",
            "\twhen else {",
            "\t\t$0",
            "\t}",
            "}"
        ],
        "description": "Switch statement"
    },
    "Throw Exception": {
        "prefix": "throw",
        "body": [
            "throw new ${1:Exception}($0)"
        ],
        "description": "Throw a new exception"
    },
    "List": {
        "prefix": "List",
        "body": [
            "List<${1:Object}> ${2:listName} = new List<$1>();"
        ],
        "description": "List constructor"
    },
    "map": {
        "prefix": "Map",
        "body": [
            "Map<${1:Object}, ${2:Object}> ${3:mapName} = new Map<$1, $2>();"
        ],
        "description": "Map constructor"
    },
    "set": {
        "prefix": "Set",
        "body": [
            "Set<${1:Object}> ${2:setName} = new Set<$1>();"
        ],
        "description": "Set constructor"
    },
    "@AuraEnabled": {
        "prefix": "@AuraEnabled",
        "body": [
            "@AuraEnabled",
            "${1|public,global|} static ${2:string} ${3:methodName}(){",
            "\t$0",
            "}"
        ],
        "description": "Aura Enabled Apex Method"
    },
    "AuraHandledException": {
        "prefix": "auraHandledException",
        "body": [
            "throw new AuraHandledException('${1:exceptionText}');"
        ],
        "description": "Throw an exception for a lightning component to display"
    },
    "TestMethod": {
        "prefix": "testMethod",
        "body": [
            "@IsTest",
            "static void ${1:methodName}(){",
            "\t",
            "\tTest.startTest();",
            "\tSystem.runAs(${2:contextuser}){",
            "\t\t$0",
            "\t}",
            "\tTest.stopTest();",
            "\t",
            "}"
        ],
        "description": "Test method with runAs and stop/start"
    },
    "TestSetup": {
        "prefix": "@TestSetup",
        "body": [
            "@TestSetup",
            "static void ${1:makeData}(){",
            "\t",
            "}"
        ],
        "description": "Test setup for creating data before test methods run"
    },
    "CustomException": {
        "prefix": "customException",
        "body": [
            "${1|global,public,private|} class ${2:MyException} extends Exception {",
            "\t$0",
            "}"
        ],
        "description": "Class"
    },
    "MockCallout": {
        "prefix": "mockCallout",
        "body": [
            "global HTTPResponse respond(HTTPRequest req) {",
            "\t",
            "\tHttpResponse res = new HttpResponse();",
            "\tres.setHeader('Content-Type', '${1:application/json}');",
            "\tres.setBody('{",
            "\t\t\"example\": \"test\"",
            "\t}');",
            "\tres.setStatusCode(${2:200});",
            "\treturn res;",
            "}"
        ],
        "description": "Create a mock for an http callout for apex testing"
    }
}