name: Publish Beta Release to Github Only

on:
  workflow_dispatch:

jobs:
  save_artifacts:
    name: 'Build VSIX Files'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.ref }}
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - run: npm install -g lerna
      - run: npm install
      - run: npm run compile
      - run: npm run vscode:package
      - name: Stage Artifacts
        run: |
          mkdir extensions
          find packages -name "*.vsix" -type f -exec cp {} ./extensions \;
          cp ./packages/salesforcedx-vscode/CHANGELOG.md ./extensions
      - name: Upload Extensions
        uses: actions/upload-artifact@v3
        with:
          name: VS Code Extensions
          path: ./extensions/

  get_release_variables:
    # store the RELEASE_VERSION from the parent package as an output that we can reference elsewhere
    name: 'Get Release Environment Variables'
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.getVersion.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - id: getVersion
        run: echo "::set-output name=version::"$(node -pe "require('./packages/salesforcedx-vscode/package.json').version")""
      - run: echo "Release Version is ${{ steps.getVersion.outputs.version }}"

  create_git_tag:
    name: 'Create and Tag Beta Release'
    runs-on: ubuntu-latest
    needs: [save_artifacts, get_release_variables]
    outputs:
      version: ${{ steps.version.outputs.version }}
      release_type: ${{ github.event.inputs.releaseType || 'minor' }}
      result: ${{ steps.result.outputs.result }}
    env:
      VERSION: ${{ needs.get_release_variables.outputs.RELEASE_VERSION }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        id: download
        with:
          name: VS Code Extensions
          path: tmp/saved-extensions
      - uses: ./.github/actions/gitConfig
        with:
          email: ${{ secrets.IDEE_GH_EMAIL }}
      - name: 'Create git tag to map to the Release Version'
        run: |
          git tag v${{ env.VERSION }}
          git push origin v${{ env.VERSION }}
      - name: 'Confirm all downloaded files'
        run: ls -R
        working-directory: tmp/saved-extensions
      - name: 'Create Pre-Release and Attach VSIX Files'
        run: gh release create v${{ env.VERSION }} **.vsix --title "Pre-Release v${{ env.VERSION }}" --notes-file CHANGELOG.md --prerelease
        working-directory: tmp/saved-extensions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - id: version
        run: echo "version=${{ env.VERSION }}" >> $GITHUB_OUTPUT

  slack_notification:
    if: ${{ always() }}
    needs: create_git_tag
    uses: ./.github/workflows/slackNotification.yml
    secrets: inherit
    with:
      title: 'Beta release v${{ needs.create_git_tag.outputs.version }}'
      failedEvent: 'Beta Release Publish'
      successfulEvent: '${{ github.event.repository.html_url }}/releases/${{ needs.create_git_tag.outputs.version }}'
      type: 'published'
      result: ${{ needs.create_git_tag.outputs.result }}
      workflow: 'publish-beta-release.yml'
