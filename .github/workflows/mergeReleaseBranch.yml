name: 'Merge Release Branch'
on: 
  workflow_call:
    inputs:
      releaseBranch:
        type: string
        required: true

jobs: 

  get_release_version:
    name: 'Get Release Version'
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.getReleaseVersion.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.releaseBranch }}
      - id: getReleaseVersion
        run: |
          echo "version="$(node -pe "require('./packages/salesforcedx-vscode/package.json').version")"" >> $GITHUB_OUTPUT
      - run: echo "Release Version is ${{ steps.getReleaseVersion.outputs.version }}"

  get_main_version:
    name: 'Get Main Version'
    runs-on: ubuntu-latest
    outputs:
      MAIN_VERSION: ${{ steps.getMainVersion.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'main'
      - id: getMainVersion
        run: |
          echo "version="$(node -pe "require('./packages/salesforcedx-vscode/package.json').version")"" >> $GITHUB_OUTPUT
      - run: echo "Main Version is ${{ steps.getMainVersion.outputs.version }}"

  merge-release-branch:
    name: 'Merge Release Branch'
    runs-on: ubuntu-latest
    needs: [get_release_version, get_main_version]
    env:
      RELEASE_VERSION: ${{ needs.get_release_version.outputs.RELEASE_VERSION }}
      MAIN_VERSION: ${{ needs.get_main_version.outputs.MAIN_VERSION }}
    steps:
      - name: 'Verify the release branch is not older than main'
        id: verifyReleaseVersionValid    
        run: |
          LOWER_VERSION="`echo -e "${{env.MAIN_VERSION}}\n${{env.RELEASE_VERSION}}" | sort -V | cut --delimiter $'\n' --fields 1`"
          echo "Lower version was: ${LOWER_VERSION}"
          if [ ${LOWER_VERSION} != ${{env.MAIN_VERSION}} ]
          then
            echo "The release branch is older than main. We do not want to rebase off of an old branch. Exiting."
            exit 1;
          fi
          
      - uses: actions/checkout@v3
        with:
          ref: 'main'
          token: ${{ secrets.IDEE_GH_TOKEN }}
      - uses: ./.github/actions/gitConfig
        with:
          email: ${{ secrets.IDEE_GH_EMAIL }}
      
      - name: 'Rebasing main off of release branch'
        run: |
          echo "Rebasing main off of release branch ${{env.RELEASE_VERSION}}"
          git fetch
          git branch
          git pull origin main
          git rebase -Xtheirs origin/release/v${{env.RELEASE_VERSION}}
          git push origin main
        
  slack-prepublish-notification:
    uses: ./.github/workflows/slackNotification.yml
    secrets: inherit
    needs: [merge-release-branch]
    with:
      title: "Release branch successfully merged for ${{inputs.releaseBranch}}"
      notification: "Release branch successfully merged."
      type: "notification"
      workflow: "mergeReleaseBranch.yml"
