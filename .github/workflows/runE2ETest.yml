name: Run E2E Test
on:
  workflow_call:
    inputs:
      testToRun:
        description: 'Run this E2E test'
        required: false
        type: string
      vscodeVersion:
        description: 'VSCode Version'
        required: false
        default: 'latest'
        type: string
      runId:
        description: 'Run ID of the workflow run that created the vsixes'
        required: false
        type: string
      os:
        description: 'Operating System(s) to run the E2E tests on'
        required: false
        default: '["macos-latest", "ubuntu-latest", "windows-latest"]'
        type: string
jobs:
  build:
    name: ${{ inputs.testToRun }} (${{ matrix.os }}|vscode-${{ matrix.vscodeVersion }}|node-${{ matrix.nodeVersion }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(inputs.os) }}
        nodeVersion:
          - 20.17.0
        vscodeVersion:
          - ${{ inputs.vscodeVersion }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: ./salesforcedx-vscode
          ref: ${{ github.event.ref }}
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.nodeVersion }}
          cache: npm
          cache-dependency-path: |
            salesforcedx-vscode/package-lock.json
      - name: Setup java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Create build script
        shell: bash
        run: |
          cat > build-script.sh << 'EOF'
          #!/bin/bash
          set -e
          export MSYS_NO_PATHCONV=1
          cd salesforcedx-vscode

          # Clean project directories
          rm -rf ./extensions 2>/dev/null || true
          rm -rf ./e2e-temp 2>/dev/null || true

          # Create extensions directory
          mkdir -p ./extensions

          # Download extension vsixes
          pwd
          gh run download ${{ inputs.runId }} -D ./extensions

          # Move downloaded files to extensions root
          find ./extensions -mindepth 2 -type f -exec mv {} ./extensions/ \; 2>/dev/null || true
          find ./extensions -mindepth 1 -type d -exec rm -rf {} + 2>/dev/null || true

          # Install dependencies
          npm install
          npm install -g @salesforce/cli

          # Verify CLI and set environment variables
          sf version
          SF_CLI_VERSION=$(sf version)
          echo "SF_CLI_VERSION: $SF_CLI_VERSION"
          echo "SF_CLI_VERSION=$SF_CLI_VERSION" >> $GITHUB_ENV

          if echo "$SF_CLI_VERSION" | grep -q "@salesforce/cli/"; then
            echo "@salesforce/cli installed - $SF_CLI_VERSION"
          else
            echo "The @salesforce/cli installation cannot be verified"
            exit 1
          fi

          if [ "$RUNNER_OS" = "Windows" ]; then
            echo "THROTTLE_FACTOR=5" >> $GITHUB_ENV
          else
            echo "THROTTLE_FACTOR=1" >> $GITHUB_ENV
          fi

          # Compile packages
          npm run compile

          # Run headless test
          npm run gha-automation-tests --spec ${{ format('packages/salesforcedx-vscode-automation-tests/lib/test/specs/{0}', inputs.testToRun) }}
          EOF
          chmod +x build-script.sh

      - name: Run all steps with retries
        uses: salesforcecli/github-workflows/.github/actions/retry@main
        with:
          max_attempts: 3
          command: bash build-script.sh
        env:
          GITHUB_TOKEN: ${{ secrets.IDEE_GH_TOKEN }}
          VSCODE_VERSION: ${{ matrix.vscodeVersion }}
          SPEC_FILES: ${{ format('packages/salesforcedx-vscode-automation-tests/lib/test/specs/{0}', inputs.testToRun) }}
          SFDX_AUTH_URL: ${{ secrets.SFDX_AUTH_URL_E2E }}
          ORG_ID: ${{ secrets.ORG_ID_E2E }}
          THROTTLE_FACTOR: ${{ env.THROTTLE_FACTOR }}
          VSIX_TO_INSTALL: ./extensions
          DEV_HUB_ALIAS_NAME: vscodeOrg
          DEV_HUB_USER_NAME: svcideebot@salesforce.com
          BASH_SILENCE_DEPRECATION_WARNING: 1
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots-${{ inputs.testToRun }}-${{ matrix.os }}-${{ inputs.vscodeVersion }}
          path: salesforcedx-vscode/test-resources/screenshots
      - uses: actions/upload-artifact@v4
        if: ${{ inputs.testToRun == 'createOASDoc.e2e.js' }}
        with:
          name: llm-logs-${{ matrix.os }}-${{ inputs.vscodeVersion }}
          path: salesforcedx-vscode/e2e-temp/TempProject-CreateOASDoc/llm-logs
