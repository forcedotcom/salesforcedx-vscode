name: Run E2E Test
on:
  workflow_call:
    inputs:
      testToRun:
        description: 'Run this E2E test'
        required: false
        type: string
      vscodeVersion:
        description: 'VSCode Version'
        required: false
        default: 'latest'
        type: string
      runId:
        description: 'Run ID of the workflow run that created the vsixes'
        required: false
        type: string
      os:
        description: 'Operating System(s) to run the E2E tests on'
        required: false
        default: '["macos-latest", "ubuntu-latest", "windows-latest"]'
        type: string
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(inputs.os) }}
        nodeVersion:
          - 20.17.0
        vscodeVersion:
          - ${{ inputs.vscodeVersion }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: ./salesforcedx-vscode
          ref: ${{ github.event.ref }}
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.nodeVersion }}
          cache: npm
          cache-dependency-path: |
            salesforcedx-vscode/package-lock.json
      - name: Setup java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Run all steps with retries
        uses: salesforcecli/github-workflows/.github/actions/retry@main
        with:
          max_attempts: 4
          command: |
            cd salesforcedx-vscode

            # clean project
            npm run clean && npm install && npm run compile

            # Download extension vsixes
            mkdir ./extensions
            pwd
            gh run download ${{ inputs.runId }} -D ./extensions
            mv ./extensions/*/* ./extensions/

            # Display downloaded vsix files
            ls -R ./extensions

            # Install dependencies
            npm install
            npm install -g @salesforce/cli

            # Verify CLI
            set -e
            sf version
            SF_CLI_VERSION=$(sf version)

            if [[ ((`echo $SF_CLI_VERSION | grep -c "@salesforce/cli/"` > 0))]]
            then
              echo "@salesforce/cli installed -" $SF_CLI_VERSION
            else
              echo "The @salesforce/cli installation could not be verified"
              exit 1
            fi

            # Set THROTTLE_FACTOR
            if [ "${{ matrix.os }}" = "windows-latest" ]; then
              echo "THROTTLE_FACTOR=5" >> $GITHUB_ENV
            else
              echo "THROTTLE_FACTOR=1" >> $GITHUB_ENV
            fi

            # Run headless test
            npm run gha-automation-tests --spec ${{ format('packages/salesforcedx-vscode-automation-tests/lib/test/specs/{0}', inputs.testToRun) }}
        env:
          GITHUB_TOKEN: ${{ secrets.IDEE_GH_TOKEN }}
          VSCODE_VERSION: ${{ matrix.vscodeVersion }}
          SPEC_FILES: ${{ format('packages/salesforcedx-vscode-automation-tests/lib/test/specs/{0}', inputs.testToRun) }}
          SFDX_AUTH_URL: ${{ secrets.SFDX_AUTH_URL_E2E }}
          ORG_ID: ${{ secrets.ORG_ID_E2E }}
          THROTTLE_FACTOR: ${{ env.THROTTLE_FACTOR }}
          VSIX_TO_INSTALL: ./extensions
          DEV_HUB_ALIAS_NAME: vscodeOrg
          DEV_HUB_USER_NAME: svcideebot@salesforce.com
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots-${{ inputs.testToRun }}-${{ matrix.os }}-${{ inputs.vscodeVersion }}
          path: ./salesforcedx-vscode/extensions/screenshots
      - uses: actions/upload-artifact@v4
        if: ${{ inputs.testToRun }} == 'createOasDoc'
        with:
          name: llm-logs-${{ matrix.os }}-${{ inputs.vscodeVersion }}
          path: ./salesforcedx-vscode/e2e-temp/TempProject-CreateOASDoc/llm-logs
