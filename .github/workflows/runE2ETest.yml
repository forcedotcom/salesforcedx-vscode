name: Run E2E Test
on:
  workflow_call:
    inputs:
      testToRun:
        description: 'Run this E2E test'
        required: false
        type: string
      vscodeVersion:
        description: 'VSCode Version'
        required: false
        default: 'latest'
        type: string
      runId:
        description: 'Run ID of the workflow run that created the vsixes'
        required: false
        type: string
      os:
        description: 'Operating System(s) to run the E2E tests on'
        required: false
        default: '["macos-latest", "ubuntu-latest", "windows-latest"]'
        type: string
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(inputs.os) }}
        nodeVersion:
          - 20.17.0
        vscodeVersion:
          - ${{ inputs.vscodeVersion }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: ./salesforcedx-vscode
          ref: ${{ github.event.ref }}
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.nodeVersion }}
          cache: npm
          cache-dependency-path: |
            salesforcedx-vscode/package-lock.json
      - name: Setup java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Run all steps with retries
        uses: salesforcecli/github-workflows/.github/actions/retry@main
        with:
          max_attempts: 5
          command: |
            cd salesforcedx-vscode

            # clean project
            bash -c '
              case "${{ matrix.os }}" in
                "windows-latest")
                  powershell -Command "Remove-Item -Path ./extensions -Recurse -Force -ErrorAction SilentlyContinue"
                  ;;
                *)
                  rm -rf ./extensions
                  ;;
              esac
            '

            # clean e2e-temp
            bash -c '
              case "${{ matrix.os }}" in
                "windows-latest")
                  powershell -Command "Remove-Item -Path ./e2e-temp -Recurse -Force -ErrorAction SilentlyContinue"
                  ;;
                *)
                  rm -rf ./e2e-temp
                  ;;
              esac
            '

            # Download extension vsixes
            mkdir ./extensions
            pwd
            gh run download ${{ inputs.runId }} -D ./extensions
            mv ./extensions/*/* ./extensions/

            # Install dependencies
            npm install
            npm install -g @salesforce/cli

            # Verify CLI
            set -e
            sf version
            SF_CLI_VERSION=$(sf version)
            export SF_CLI_VERSION

            echo "SF_CLI_VERSION: $SF_CLI_VERSION"

            # Use shell-specific commands for OS check
            bash -c '
              echo "Inside bash -c, SF_CLI_VERSION: $SF_CLI_VERSION"
              case "${{ matrix.os }}" in
                "windows-latest")
                  powershell -Command "
                    if ($env:SF_CLI_VERSION -match '\''@salesforce/cli/'\'') {
                      Write-Host '\''@salesforce/cli installed -'\'' $env:SF_CLI_VERSION
                    } else {
                      Write-Error '\''The @salesforce/cli installation cannot be verified'\''
                      exit 1
                    }
                    $env:THROTTLE_FACTOR=5
                    Add-Content -Path $env:GITHUB_ENV -Value '\''THROTTLE_FACTOR=5'\''
                  "
                  ;;
                *)
                  echo "Checking CLI version: $SF_CLI_VERSION"
                  grep_result=$(echo "$SF_CLI_VERSION" | grep -c "@salesforce/cli/" || echo "0")
                  echo "Grep result: $grep_result"
                  if [ "$grep_result" -gt 0 ]; then
                    echo "@salesforce/cli installed -" $SF_CLI_VERSION
                  else
                    echo "The @salesforce/cli installation cannot be verified"
                    exit 1
                  fi
                  echo "THROTTLE_FACTOR=1" >> $GITHUB_ENV
                  ;;
              esac
            '

            # Compile packages
            npm run compile

            # Run headless test
            npm run gha-automation-tests --spec ${{ format('packages/salesforcedx-vscode-automation-tests/lib/test/specs/{0}', inputs.testToRun) }}
        env:
          GITHUB_TOKEN: ${{ secrets.IDEE_GH_TOKEN }}
          VSCODE_VERSION: ${{ matrix.vscodeVersion }}
          SPEC_FILES: ${{ format('packages/salesforcedx-vscode-automation-tests/lib/test/specs/{0}', inputs.testToRun) }}
          SFDX_AUTH_URL: ${{ secrets.SFDX_AUTH_URL_E2E }}
          ORG_ID: ${{ secrets.ORG_ID_E2E }}
          THROTTLE_FACTOR: ${{ env.THROTTLE_FACTOR }}
          VSIX_TO_INSTALL: ./extensions
          DEV_HUB_ALIAS_NAME: vscodeOrg
          DEV_HUB_USER_NAME: svcideebot@salesforce.com
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots-${{ inputs.testToRun }}-${{ matrix.os }}-${{ inputs.vscodeVersion }}
          path: salesforcedx-vscode/test-resources/screenshots
      - uses: actions/upload-artifact@v4
        if: ${{ inputs.testToRun == 'createOasDoc.e2e.js' }}
        with:
          name: llm-logs-${{ matrix.os }}-${{ inputs.vscodeVersion }}
          path: salesforcedx-vscode/e2e-temp/TempProject-CreateOASDoc/llm-logs
