---
description: browser polyfills
globs:
alwaysApply: false
---

# Browser Polyfills Strategy

## Environment Detection

- Use `Global.isWeb` from salesforce/core - the correct way to check browser context
- Don't use `typeof window` - VSCode extensions run in web-worker context, not window context

## We want to use like jsforce and its consumers "as-is"

- we don't want the /browser version of jsforce, use /lib
- assume none of jsforce is polyfilled and we'll have to do it ourselves when our extensions are bundled

## EventEmitter Polyfills

- The `events` npm package DOES include `removeAllListeners` - it's not missing
- Problems arise from bundling/polyfilling that breaks the prototype chain
- Apply EventEmitter patches at MULTIPLE stages:
  1. **Build-time**: Fix minified/noop assignments in bundled code
  2. **Runtime**: Patch prototype immediately when bundle loads
  3. **Instance-level**: Patch individual objects that bypass prototype

## Common EventEmitter Issues

- `removeAllListeners is not a function` - usually means bundler replaced method with noop
- jsforce cache objects expect full EventEmitter interface
- Effect-TS and other libraries may create EventEmitter-like objects without full prototype

## Debugging Polyfill Issues

- Check bundled output for `noop` assignments to EventEmitter methods
- Use CDP (Chrome DevTools Protocol) to capture real browser console errors
- Test both isolated Playwright context AND real browser environment
- Look for timing issues - polyfills may apply after errors occur

## Use 3rd-party polyfills when possible

- choose custom as a last resort
- try to use ones that are already used by packages (ex: jsforce)
- polyfills go in devDependencies
